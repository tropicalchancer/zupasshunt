"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@zk-kit";
exports.ids = ["vendor-chunks/@zk-kit"];
exports.modules = {

/***/ "(ssr)/./node_modules/@zk-kit/artifacts/dist/index.node.js":
/*!***********************************************************!*\
  !*** ./node_modules/@zk-kit/artifacts/dist/index.node.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Project: () => (/* binding */ Project),\n/* harmony export */   download: () => (/* binding */ download),\n/* harmony export */   maybeDownload: () => (/* binding */ maybeDownload),\n/* harmony export */   maybeGetSnarkArtifacts: () => (/* binding */ maybeGetSnarkArtifacts),\n/* harmony export */   projects: () => (/* binding */ projects)\n/* harmony export */ });\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_fs_promises__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:os */ \"node:os\");\n/**\n * @module @zk-kit/artifacts\n * @version 1.8.0\n * @file Utilities for downloading snark artifacts\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/snark-artifacts/tree/main/packages/artifacts}\n*/\n\n\n\n\n\nasync function download(url, outputPath) {\n    const { body, ok, statusText } = await fetch(url);\n    if (!ok)\n        throw new Error(`Failed to fetch ${url}: ${statusText}`);\n    if (!body)\n        throw new Error('Failed to get response body');\n    const dir = (0,node_path__WEBPACK_IMPORTED_MODULE_2__.dirname)(outputPath);\n    await (0,node_fs_promises__WEBPACK_IMPORTED_MODULE_1__.mkdir)(dir, { recursive: true });\n    const fileStream = (0,node_fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream)(outputPath);\n    const reader = body.getReader();\n    try {\n        const pump = async () => {\n            const { done, value } = await reader.read();\n            if (done) {\n                fileStream.end();\n                return;\n            }\n            fileStream.write(Buffer.from(value));\n            await pump();\n        };\n        await pump();\n    }\n    catch (error) {\n        fileStream.close();\n        throw error;\n    }\n}\nasync function maybeDownload(url, outputPath) {\n    if (!(0,node_fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(outputPath))\n        await download(url, outputPath);\n    return outputPath;\n}\n\nvar Project;\n(function (Project) {\n    Project[\"SEMAPHORE_IDENTITY\"] = \"semaphore-identity\";\n    Project[\"POSEIDON\"] = \"poseidon\";\n    // RLN = 'rln',\n    Project[\"SEMAPHORE\"] = \"semaphore\";\n})(Project || (Project = {}));\nconst projects = Object.values(Project);\n\nconst BASE_URL = 'https://snark-artifacts.pse.dev';\nconst getBaseUrl = (project, version) => `${BASE_URL}/${project}/${version}/${project}`;\n\nasync function maybeGetSnarkArtifacts$1(project, options = {}) {\n    if (!projects.includes(project))\n        throw new Error(`Project '${project}' is not supported`);\n    options.version ??= 'latest';\n    const url = getBaseUrl(project, options.version);\n    const parameters = options.parameters\n        ? `-${options.parameters.join('-')}`\n        : '';\n    return {\n        wasm: `${url}${parameters}.wasm`,\n        zkey: `${url}${parameters}.zkey`,\n    };\n}\n\nconst extractEndPath = (url) => url.split('pse.dev/')[1];\n/**\n * Downloads SNARK artifacts (`wasm` and `zkey`) files if not already present in OS tmp folder.\n * @example\n * ```ts\n * {\n *   wasm: \"/tmp/@zk-kit/semaphore-artifacts@latest/semaphore-3.wasm\",\n *   zkey: \"/tmp/@zk-kit/semaphore-artifacts@latest/semaphore-3.zkey\" .\n * }\n * ```\n * @returns {@link SnarkArtifacts}\n */\nasync function maybeGetSnarkArtifacts(...pars) {\n    const urls = await maybeGetSnarkArtifacts$1(...pars);\n    const outputPath = `${(0,node_os__WEBPACK_IMPORTED_MODULE_3__.tmpdir)()}/snark-artifacts/${extractEndPath(urls.wasm)}`;\n    const [wasm, zkey] = await Promise.all([\n        maybeDownload(urls.wasm, outputPath),\n        maybeDownload(urls.zkey, outputPath.replace(/.wasm$/, '.zkey')),\n    ]);\n    return {\n        wasm,\n        zkey,\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHprLWtpdC9hcnRpZmFjdHMvZGlzdC9pbmRleC5ub2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUN3RDtBQUNmO0FBQ0w7QUFDSDs7QUFFakM7QUFDQSxZQUFZLHVCQUF1QjtBQUNuQztBQUNBLDJDQUEyQyxJQUFJLElBQUksV0FBVztBQUM5RDtBQUNBO0FBQ0EsZ0JBQWdCLGtEQUFPO0FBQ3ZCLFVBQVUsdURBQUssUUFBUSxpQkFBaUI7QUFDeEMsdUJBQXVCLDBEQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLG1EQUFVO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBCQUEwQjtBQUMzQjs7QUFFQTtBQUNBLDRDQUE0QyxTQUFTLEdBQUcsUUFBUSxHQUFHLFFBQVEsR0FBRyxRQUFROztBQUV0Riw2REFBNkQ7QUFDN0Q7QUFDQSxvQ0FBb0MsUUFBUTtBQUM1QztBQUNBO0FBQ0E7QUFDQSxjQUFjLDZCQUE2QjtBQUMzQztBQUNBO0FBQ0EsaUJBQWlCLElBQUksRUFBRSxXQUFXO0FBQ2xDLGlCQUFpQixJQUFJLEVBQUUsV0FBVztBQUNsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwrQ0FBTSxHQUFHLG1CQUFtQiwwQkFBMEI7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU4RSIsInNvdXJjZXMiOlsiL1VzZXJzL2NoYW5jZW1jYWxsaXN0ZXIvUHJvamVjdHMvenVwYXNzaHVudC9ub2RlX21vZHVsZXMvQHprLWtpdC9hcnRpZmFjdHMvZGlzdC9pbmRleC5ub2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1vZHVsZSBAemsta2l0L2FydGlmYWN0c1xuICogQHZlcnNpb24gMS44LjBcbiAqIEBmaWxlIFV0aWxpdGllcyBmb3IgZG93bmxvYWRpbmcgc25hcmsgYXJ0aWZhY3RzXG4gKiBAY29weXJpZ2h0IEV0aGVyZXVtIEZvdW5kYXRpb24gMjAyNFxuICogQGxpY2Vuc2UgTUlUXG4gKiBAc2VlIFtHaXRodWJde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9wcml2YWN5LXNjYWxpbmctZXhwbG9yYXRpb25zL3NuYXJrLWFydGlmYWN0cy90cmVlL21haW4vcGFja2FnZXMvYXJ0aWZhY3RzfVxuKi9cbmltcG9ydCB7IGNyZWF0ZVdyaXRlU3RyZWFtLCBleGlzdHNTeW5jIH0gZnJvbSAnbm9kZTpmcyc7XG5pbXBvcnQgeyBta2RpciB9IGZyb20gJ25vZGU6ZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHsgZGlybmFtZSB9IGZyb20gJ25vZGU6cGF0aCc7XG5pbXBvcnQgeyB0bXBkaXIgfSBmcm9tICdub2RlOm9zJztcblxuYXN5bmMgZnVuY3Rpb24gZG93bmxvYWQodXJsLCBvdXRwdXRQYXRoKSB7XG4gICAgY29uc3QgeyBib2R5LCBvaywgc3RhdHVzVGV4dCB9ID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgICBpZiAoIW9rKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCAke3VybH06ICR7c3RhdHVzVGV4dH1gKTtcbiAgICBpZiAoIWJvZHkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdldCByZXNwb25zZSBib2R5Jyk7XG4gICAgY29uc3QgZGlyID0gZGlybmFtZShvdXRwdXRQYXRoKTtcbiAgICBhd2FpdCBta2RpcihkaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIGNvbnN0IGZpbGVTdHJlYW0gPSBjcmVhdGVXcml0ZVN0cmVhbShvdXRwdXRQYXRoKTtcbiAgICBjb25zdCByZWFkZXIgPSBib2R5LmdldFJlYWRlcigpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHB1bXAgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICBmaWxlU3RyZWFtLmVuZCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbGVTdHJlYW0ud3JpdGUoQnVmZmVyLmZyb20odmFsdWUpKTtcbiAgICAgICAgICAgIGF3YWl0IHB1bXAoKTtcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgcHVtcCgpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZmlsZVN0cmVhbS5jbG9zZSgpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBtYXliZURvd25sb2FkKHVybCwgb3V0cHV0UGF0aCkge1xuICAgIGlmICghZXhpc3RzU3luYyhvdXRwdXRQYXRoKSlcbiAgICAgICAgYXdhaXQgZG93bmxvYWQodXJsLCBvdXRwdXRQYXRoKTtcbiAgICByZXR1cm4gb3V0cHV0UGF0aDtcbn1cblxudmFyIFByb2plY3Q7XG4oZnVuY3Rpb24gKFByb2plY3QpIHtcbiAgICBQcm9qZWN0W1wiU0VNQVBIT1JFX0lERU5USVRZXCJdID0gXCJzZW1hcGhvcmUtaWRlbnRpdHlcIjtcbiAgICBQcm9qZWN0W1wiUE9TRUlET05cIl0gPSBcInBvc2VpZG9uXCI7XG4gICAgLy8gUkxOID0gJ3JsbicsXG4gICAgUHJvamVjdFtcIlNFTUFQSE9SRVwiXSA9IFwic2VtYXBob3JlXCI7XG59KShQcm9qZWN0IHx8IChQcm9qZWN0ID0ge30pKTtcbmNvbnN0IHByb2plY3RzID0gT2JqZWN0LnZhbHVlcyhQcm9qZWN0KTtcblxuY29uc3QgQkFTRV9VUkwgPSAnaHR0cHM6Ly9zbmFyay1hcnRpZmFjdHMucHNlLmRldic7XG5jb25zdCBnZXRCYXNlVXJsID0gKHByb2plY3QsIHZlcnNpb24pID0+IGAke0JBU0VfVVJMfS8ke3Byb2plY3R9LyR7dmVyc2lvbn0vJHtwcm9qZWN0fWA7XG5cbmFzeW5jIGZ1bmN0aW9uIG1heWJlR2V0U25hcmtBcnRpZmFjdHMkMShwcm9qZWN0LCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAoIXByb2plY3RzLmluY2x1ZGVzKHByb2plY3QpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb2plY3QgJyR7cHJvamVjdH0nIGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgICBvcHRpb25zLnZlcnNpb24gPz89ICdsYXRlc3QnO1xuICAgIGNvbnN0IHVybCA9IGdldEJhc2VVcmwocHJvamVjdCwgb3B0aW9ucy52ZXJzaW9uKTtcbiAgICBjb25zdCBwYXJhbWV0ZXJzID0gb3B0aW9ucy5wYXJhbWV0ZXJzXG4gICAgICAgID8gYC0ke29wdGlvbnMucGFyYW1ldGVycy5qb2luKCctJyl9YFxuICAgICAgICA6ICcnO1xuICAgIHJldHVybiB7XG4gICAgICAgIHdhc206IGAke3VybH0ke3BhcmFtZXRlcnN9Lndhc21gLFxuICAgICAgICB6a2V5OiBgJHt1cmx9JHtwYXJhbWV0ZXJzfS56a2V5YCxcbiAgICB9O1xufVxuXG5jb25zdCBleHRyYWN0RW5kUGF0aCA9ICh1cmwpID0+IHVybC5zcGxpdCgncHNlLmRldi8nKVsxXTtcbi8qKlxuICogRG93bmxvYWRzIFNOQVJLIGFydGlmYWN0cyAoYHdhc21gIGFuZCBgemtleWApIGZpbGVzIGlmIG5vdCBhbHJlYWR5IHByZXNlbnQgaW4gT1MgdG1wIGZvbGRlci5cbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICoge1xuICogICB3YXNtOiBcIi90bXAvQHprLWtpdC9zZW1hcGhvcmUtYXJ0aWZhY3RzQGxhdGVzdC9zZW1hcGhvcmUtMy53YXNtXCIsXG4gKiAgIHprZXk6IFwiL3RtcC9Aemsta2l0L3NlbWFwaG9yZS1hcnRpZmFjdHNAbGF0ZXN0L3NlbWFwaG9yZS0zLnprZXlcIiAuXG4gKiB9XG4gKiBgYGBcbiAqIEByZXR1cm5zIHtAbGluayBTbmFya0FydGlmYWN0c31cbiAqL1xuYXN5bmMgZnVuY3Rpb24gbWF5YmVHZXRTbmFya0FydGlmYWN0cyguLi5wYXJzKSB7XG4gICAgY29uc3QgdXJscyA9IGF3YWl0IG1heWJlR2V0U25hcmtBcnRpZmFjdHMkMSguLi5wYXJzKTtcbiAgICBjb25zdCBvdXRwdXRQYXRoID0gYCR7dG1wZGlyKCl9L3NuYXJrLWFydGlmYWN0cy8ke2V4dHJhY3RFbmRQYXRoKHVybHMud2FzbSl9YDtcbiAgICBjb25zdCBbd2FzbSwgemtleV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIG1heWJlRG93bmxvYWQodXJscy53YXNtLCBvdXRwdXRQYXRoKSxcbiAgICAgICAgbWF5YmVEb3dubG9hZCh1cmxzLnprZXksIG91dHB1dFBhdGgucmVwbGFjZSgvLndhc20kLywgJy56a2V5JykpLFxuICAgIF0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHdhc20sXG4gICAgICAgIHprZXksXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgUHJvamVjdCwgZG93bmxvYWQsIG1heWJlRG93bmxvYWQsIG1heWJlR2V0U25hcmtBcnRpZmFjdHMsIHByb2plY3RzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/artifacts/dist/index.node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/baby-jubjub/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@zk-kit/baby-jubjub/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base8: () => (/* binding */ Base8),\n/* harmony export */   Fr: () => (/* binding */ Fr),\n/* harmony export */   addPoint: () => (/* binding */ addPoint),\n/* harmony export */   inCurve: () => (/* binding */ inCurve),\n/* harmony export */   mulPointEscalar: () => (/* binding */ mulPointEscalar),\n/* harmony export */   order: () => (/* binding */ order),\n/* harmony export */   packPoint: () => (/* binding */ packPoint),\n/* harmony export */   r: () => (/* binding */ r),\n/* harmony export */   subOrder: () => (/* binding */ subOrder),\n/* harmony export */   unpackPoint: () => (/* binding */ unpackPoint)\n/* harmony export */ });\n/* harmony import */ var _zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zk-kit/utils/conversions */ \"(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/conversions.js\");\n/* harmony import */ var _zk_kit_utils_f1_field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zk-kit/utils/f1-field */ \"(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/f1-field.js\");\n/* harmony import */ var _zk_kit_utils_scalar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @zk-kit/utils/scalar */ \"(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/scalar.js\");\n/**\n * @module @zk-kit/baby-jubjub\n * @version 1.0.3\n * @file A JavaScript library for adding points to the curve.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/baby-jubjub}\n*/\n\n\n\n\n/**\n * The following is a sqrt function (i.e. tonelliShanks) with some pre-computed\n * constants and it only works with 'r'.\n * See {@link https://eprint.iacr.org/2012/685.pdf} and\n * {@link https://github.com/iden3/ffjavascript/blob/6f37a93fabddf45100bf221de6a1399599497e5d/src/fsqrt.js#L38}\n * for more.\n * @param n The number for which to calculate the square root.\n * @returns The square root.\n */\n// eslint-disable-next-line import/prefer-default-export\nfunction tonelliShanks(n, order) {\n    const Fr = new _zk_kit_utils_f1_field__WEBPACK_IMPORTED_MODULE_1__[\"default\"](order);\n    const sqrt_s = 28;\n    const sqrt_z = BigInt(\"5978345932401256595026418116861078668372907927053715034645334559810731495452\");\n    const sqrt_tm1d2 = BigInt(\"40770029410420498293352137776570907027550720424234931066070132305055\");\n    if (Fr.isZero(n))\n        return Fr.zero;\n    let w = Fr.pow(n, sqrt_tm1d2);\n    const a0 = Fr.pow(Fr.mul(Fr.square(w), n), BigInt(2 ** (sqrt_s - 1)));\n    if (Fr.eq(a0, Fr._negone)) {\n        return null;\n    }\n    let v = sqrt_s;\n    let x = Fr.mul(n, w);\n    let b = Fr.mul(x, w);\n    let z = sqrt_z;\n    while (!Fr.eq(b, Fr.one)) {\n        let b2k = Fr.square(b);\n        let k = 1;\n        while (!Fr.eq(b2k, Fr.one)) {\n            b2k = Fr.square(b2k);\n            k += 1;\n        }\n        w = z;\n        for (let i = 0; i < v - k - 1; i += 1) {\n            w = Fr.square(w);\n        }\n        z = Fr.square(w);\n        b = Fr.mul(b, z);\n        x = Fr.mul(x, w);\n        v = k;\n    }\n    return Fr.geq(x, Fr.zero) ? x : Fr.neg(x);\n}\n\n/**\n * Constants and curve parameters for BabyJubJub elliptic curve operations.\n * See: {@link https://eips.ethereum.org/EIPS/eip-2494}\n */\n// Prime order of the alt_bn128 curve.\nconst r = BigInt(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\");\n// Prime finite field 'F' with r elements (F_r).\nconst Fr = new _zk_kit_utils_f1_field__WEBPACK_IMPORTED_MODULE_1__[\"default\"](r);\n// Base point for generating other points on the Baby Jubjub curve.\nconst Base8 = [\n    Fr.e(BigInt(\"5299619240641551281634865583518297030282874472190772894086521144482721001553\")),\n    Fr.e(BigInt(\"16950150798460657717958625567821834550301663161624707787222815936182638968203\"))\n];\n// Curve parameters from the equation 'ax^2 + y^2 = 1 + dx^2y^2',\n// representing a Twisted Edwards Elliptic Curve E defined over 'F_r'.\nconst a = Fr.e(BigInt(\"168700\"));\nconst d = Fr.e(BigInt(\"168696\"));\n// The Baby JubJub curve 'E(F_r)' is equal to the subgroup of 'F_r'-rational points of 'E'.\nconst order = BigInt(\"21888242871839275222246405745257275088614511777268538073601725287587578984328\");\nconst subOrder = _zk_kit_utils_scalar__WEBPACK_IMPORTED_MODULE_2__.shiftRight(order, BigInt(3));\n/**\n * Performs point addition on the Baby Jubjub elliptic curve,\n * calculating a third point from two given points.\n * Let P1 = (x1, y1) and P2 = (x2, y2) be two arbitrary points of the curve.\n * Then P1 + P2 = (x3, y3) is calculated in the following way:\n * x3 = (x1*y2 + y1*x2)/(1 + d*x1*x2*y1*y2)\n * y3 = (y1*y2 - a*x1*x2)/(1 - d*x1*x2*y1*y2)\n * @param p1 First point on the curve.\n * @param p2 Second point on the curve.\n * @returns Resultant third point on the curve.\n */\nfunction addPoint(p1, p2) {\n    // beta = x1*y2\n    const beta = Fr.mul(p1[0], p2[1]);\n    // gamma = y1*x2\n    const gamma = Fr.mul(p1[1], p2[0]);\n    // delta = (y1-(a*x1))*(x2+y2)\n    const delta = Fr.mul(Fr.sub(p1[1], Fr.mul(a, p1[0])), Fr.add(p2[0], p2[1]));\n    // x1*x2*y1*y2\n    const tau = Fr.mul(beta, gamma);\n    // d*x1*x2*y1*y2\n    const dtau = Fr.mul(d, tau);\n    // x3 = (x1*y2 + y1*x2)/(1 + d*x1*x2*y1*y2)\n    const p3x = Fr.div(Fr.add(beta, gamma), Fr.add(Fr.one, dtau));\n    // y3 = (y1*y2 - a*x1*x2)/(1 - d*x1*x2*y1*y2)\n    const p3y = Fr.div(Fr.add(delta, Fr.sub(Fr.mul(a, beta), gamma)), Fr.sub(Fr.one, dtau));\n    return [p3x, p3y];\n}\n/**\n * Performs a scalar multiplication by starting from the 'base' point and 'adding'\n * it to itself 'e' times.\n * @param base The base point used as a starting point.\n * @param e A secret number representing the private key.\n * @returns The resulting point representing the public key.\n */\nfunction mulPointEscalar(base, e) {\n    let res = [Fr.e(BigInt(0)), Fr.e(BigInt(1))];\n    let rem = e;\n    let exp = base;\n    while (!_zk_kit_utils_scalar__WEBPACK_IMPORTED_MODULE_2__.isZero(rem)) {\n        if (_zk_kit_utils_scalar__WEBPACK_IMPORTED_MODULE_2__.isOdd(rem)) {\n            res = addPoint(res, exp);\n        }\n        exp = addPoint(exp, exp);\n        rem = _zk_kit_utils_scalar__WEBPACK_IMPORTED_MODULE_2__.shiftRight(rem, BigInt(1));\n    }\n    return res;\n}\n/**\n * Determines if a given point lies on the Baby Jubjub elliptic curve by verifying the curve equation.\n * This function checks if the point satisfies the curve equation `ax^2 + y^2 = 1 + dx^2y^2`.\n * @param p The point to check, represented as a pair of bigint values.\n * @returns True if the point is on the curve, otherwise false.\n */\nfunction inCurve(p) {\n    const x1 = BigInt(p[0]);\n    const y1 = BigInt(p[1]);\n    const x2 = Fr.square(x1);\n    const y2 = Fr.square(y1);\n    return Fr.eq(Fr.add(Fr.mul(a, x2), y2), Fr.add(Fr.one, Fr.mul(Fr.mul(x2, y2), d)));\n}\n/**\n * Packs a point on the Baby Jubjub elliptic curve into a bigint.\n * This process involves converting the y-coordinate to a buffer and conditionally modifying the last byte\n * to encode the sign of the x-coordinate, following a specific compact representation format.\n * @param unpackedPoint The point to be packed, consisting of x and y coordinates.\n * @returns The packed representation of the point as a bigint.\n */\nfunction packPoint(unpackedPoint) {\n    const buffer = (0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_0__.leBigIntToBuffer)(unpackedPoint[1], 32);\n    if (Fr.lt(unpackedPoint[0], Fr.zero)) {\n        buffer[31] |= 0x80;\n    }\n    return (0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_0__.leBufferToBigInt)(buffer);\n}\n/**\n * Unpacks a bigint back into a point on the Baby Jubjub elliptic curve, reversing the packing process.\n * This involves interpreting the bigint as the y-coordinate and extracting the sign of the x-coordinate\n * from the encoded format. The function then calculates the x-coordinate using the curve equation.\n * @param packedPoint The packed point as a bigint.\n * @returns The unpacked point as a pair of bigint values, or null if the point is invalid.\n */\nfunction unpackPoint(packedPoint) {\n    const buffer = (0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_0__.leBigIntToBuffer)(packedPoint);\n    const unpackedPoint = new Array(2);\n    let sign = false;\n    if (buffer[31] & 0x80) {\n        sign = true;\n        buffer[31] &= 0x7f;\n    }\n    unpackedPoint[1] = (0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_0__.leBufferToBigInt)(buffer);\n    if (_zk_kit_utils_scalar__WEBPACK_IMPORTED_MODULE_2__.gt(unpackedPoint[1], r)) {\n        return null;\n    }\n    const y2 = Fr.square(unpackedPoint[1]);\n    let x = tonelliShanks(Fr.div(Fr.sub(Fr.one, y2), Fr.sub(a, Fr.mul(d, y2))), r);\n    if (x == null) {\n        return null;\n    }\n    if (sign) {\n        x = Fr.neg(x);\n    }\n    unpackedPoint[0] = x;\n    return unpackedPoint;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/baby-jubjub/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/conversions.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/conversions.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToBuffer: () => (/* binding */ base64ToBuffer),\n/* harmony export */   base64ToText: () => (/* binding */ base64ToText),\n/* harmony export */   beBigIntToBuffer: () => (/* binding */ beBigIntToBuffer),\n/* harmony export */   beBufferToBigInt: () => (/* binding */ beBufferToBigInt),\n/* harmony export */   bigIntToBuffer: () => (/* binding */ bigIntToBuffer),\n/* harmony export */   bigIntToHexadecimal: () => (/* binding */ bigIntToHexadecimal),\n/* harmony export */   bigNumberishToBigInt: () => (/* binding */ bigNumberishToBigInt),\n/* harmony export */   bigNumberishToBuffer: () => (/* binding */ bigNumberishToBuffer),\n/* harmony export */   bufferToBase64: () => (/* binding */ bufferToBase64),\n/* harmony export */   bufferToBigInt: () => (/* binding */ bufferToBigInt),\n/* harmony export */   bufferToHexadecimal: () => (/* binding */ bufferToHexadecimal),\n/* harmony export */   hexadecimalToBigInt: () => (/* binding */ hexadecimalToBigInt),\n/* harmony export */   hexadecimalToBuffer: () => (/* binding */ hexadecimalToBuffer),\n/* harmony export */   leBigIntToBuffer: () => (/* binding */ leBigIntToBuffer),\n/* harmony export */   leBufferToBigInt: () => (/* binding */ leBufferToBigInt),\n/* harmony export */   textToBase64: () => (/* binding */ textToBase64)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var _error_handlers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error-handlers.js */ \"(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js\");\n/* harmony import */ var _type_checks_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-checks.js */ \"(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js\");\n/**\n * @module @zk-kit/utils\n * @version 1.2.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n\n\n/**\n * @module Conversions\n * This module provides a collection of utility functions for converting\n * between different numerical formats, particularly focusing on\n * conversions involving bigints, hexadecimals and buffers.\n * The module is structured with clear function naming to indicate\n * the conversion direction (e.g., `bigIntToHexadecimal` for BigInt\n * to hexadecimal, `bufferToBigInt` for buffer to bigint) and employs\n * type checks to ensure the correct handling of various input types.\n * It also includes variations for both big-endian (`be`) and little-endian\n * (`le`) conversions. It is important to note that when there is no prefix,\n * the order of bytes is always big-endian.\n */\n/**\n * Converts a bigint to a hexadecimal string.\n * @param value The bigint value to convert.\n * @returns The hexadecimal representation of the bigint.\n */\nfunction bigIntToHexadecimal(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireBigInt)(value, \"value\");\n    let hex = value.toString(16);\n    // Ensure even length.\n    if (hex.length % 2 !== 0) {\n        hex = `0${hex}`;\n    }\n    return hex;\n}\n/**\n * Converts a hexadecimal string to a bigint. The input is interpreted as hexadecimal\n * with or without a '0x' prefix. It uses big-endian byte order.\n * @param value The hexadecimal string to convert.\n * @returns The bigint representation of the hexadecimal string.\n */\nfunction hexadecimalToBigInt(value) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isHexadecimal)(value) && !(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isHexadecimal)(value, false)) {\n        throw new TypeError(`Parameter 'value' is not a hexadecimal string`);\n    }\n    // Ensure the hex string starts with '0x'.\n    const formattedHexString = value.startsWith(\"0x\") ? value : `0x${value}`;\n    return BigInt(formattedHexString);\n}\n/**\n * Converts a buffer of bytes to a bigint using big-endian byte order.\n * It accepts 'Buffer' or 'Uint8Array'.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents.\n */\nfunction beBufferToBigInt(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireTypes)(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return BigInt(`0x${buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"hex\")}`);\n}\n/**\n * Converts a buffer to a bigint using little-endian byte order.\n * It accepts 'Buffer' or 'Uint8Array'.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents in little-endian.\n */\nfunction leBufferToBigInt(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireTypes)(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return BigInt(`0x${buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).reverse().toString(\"hex\")}`);\n}\n/**\n * Converts a buffer to a bigint. Alias for beBufferToBigInt.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents.\n */\nfunction bufferToBigInt(value) {\n    return beBufferToBigInt(value);\n}\n/**\n * Converts a bigint to a buffer and fills with zeros if a valid\n * size (i.e. number of bytes) is specified. If the size is not defined,\n * it gets the size from the given bigint. If the specified size is smaller than\n * the size of the bigint (i.e. `minSize`), an error is thrown.\n * It uses big-endian byte order.\n * @param value The bigint to convert.\n * @param size The number of bytes of the buffer to return.\n * @returns The buffer representation of the bigint.\n */\nfunction beBigIntToBuffer(value, size) {\n    const hex = bigIntToHexadecimal(value);\n    // Calculate the minimum buffer size required to represent 'n' in bytes.\n    // Each hexadecimal character represents 4 bits, so 2 characters are 1 byte.\n    const minSize = Math.ceil(hex.length / 2);\n    if (!size) {\n        size = minSize;\n    }\n    else if (size < minSize) {\n        throw Error(`Size ${size} is too small, need at least ${minSize} bytes`);\n    }\n    // Allocate buffer of the desired size, filled with zeros.\n    const buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(size, 0);\n    const fromHex = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex, \"hex\");\n    fromHex.copy(buffer, size - fromHex.length);\n    return buffer;\n}\n/**\n * Converts a bigint to a buffer and fills with zeros if a valid\n * size (i.e. number of bytes) is specified. If the size is not defined,\n * it gets the size from the given bigint. If the specified size is smaller than\n * the size of the bigint (i.e. `minSize`), an error is thrown.\n * It uses little-endian byte order.\n * @param value The bigint to convert.\n * @param size The number of bytes of the buffer to return.\n * @returns The buffer representation of the bigint in little-endian.\n */\nfunction leBigIntToBuffer(value, size) {\n    const hex = bigIntToHexadecimal(value);\n    // Calculate the minimum buffer size required to represent 'n' in bytes.\n    // Each hexadecimal character represents 4 bits, so 2 characters are 1 byte.\n    const minSize = Math.ceil(hex.length / 2);\n    if (!size) {\n        size = minSize;\n    }\n    else if (size < minSize) {\n        throw Error(`Size ${size} is too small, need at least ${minSize} bytes`);\n    }\n    // Allocate buffer of the desired size, filled with zeros.\n    const buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(size, 0);\n    const fromHex = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex, \"hex\").reverse();\n    fromHex.copy(buffer, 0);\n    return buffer;\n}\n/**\n * Converts a bigint to a buffer. Alias for beBigIntToBuffer.\n * @param value The bigint to convert.\n * @returns The buffer representation of the bigint.\n */\nfunction bigIntToBuffer(value) {\n    return beBigIntToBuffer(value);\n}\n/**\n * Converts a BigNumberish type to a bigint. If the input is already a bigint,\n * the return value will be the bigint itself, otherwise it will be converted\n * to a bigint using big-endian byte order.\n * @param value The BigNumberish value to convert.\n * @returns The bigint representation of the BigNumberish value.\n */\nfunction bigNumberishToBigInt(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireBigNumberish)(value, \"value\");\n    if ((0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isBuffer)(value) || (0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isUint8Array)(value)) {\n        return bufferToBigInt(value);\n    }\n    return BigInt(value);\n}\n/**\n * Converts a BigNumberish type to a buffer. If the input is already a buffer,\n * the return value will be the buffer itself, otherwise it will be converted\n * to a buffer using big-endian byte order.\n * @param value The BigNumberish value to convert.\n * @returns The buffer representation of the BigNumberish value.\n */\nfunction bigNumberishToBuffer(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireBigNumberish)(value, \"value\");\n    if ((0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isBuffer)(value) || (0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isUint8Array)(value)) {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value);\n    }\n    return bigIntToBuffer(bigNumberishToBigInt(value));\n}\n/**\n * Converts an hexadecimal string to a buffer. The hexadecimal string\n * should not start with '0x' or '0X'. It keeps the bytes in the same order.\n * @param value The hexadecimal string to convert.\n * @returns The buffer representation of the hexadecimal string.\n */\nfunction hexadecimalToBuffer(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireHexadecimal)(value, \"value\", false);\n    // Ensure even length before converting to buffer.\n    if (value.length % 2 !== 0) {\n        value = `0${value}`;\n    }\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"hex\");\n}\n/**\n * Converts a buffer to a hexadecimal string. It accepts 'Buffer' or 'Uint8Array'.\n * The hexadecimal string will not start with '0x' or '0X'. It keeps the bytes in the same order.\n * @param value The buffer to convert.\n * @returns The converted hexadecimal string.\n */\nfunction bufferToHexadecimal(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireTypes)(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"hex\");\n}\n/**\n * Converts bytes to a base64 string. It accepts 'Buffer' or 'Uint8Array'.\n * @param value The bytes to convert.\n * @returns The converted base64 string.\n */\nfunction bufferToBase64(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireTypes)(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"base64\");\n}\n/**\n * Converts a base64 string to bytes (i.e. a buffer). This function does not check\n * if the input value is a valid base64 string. If there are unsupported characters\n * they will be ignored.\n * @param value The base64 string to convert.\n * @returns The converted buffer.\n */\nfunction base64ToBuffer(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireString)(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"base64\");\n}\n/**\n * Converts text (utf8) to a base64 string.\n * @param value The text to convert.\n * @returns The converted base64 string.\n */\nfunction textToBase64(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireString)(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"utf8\").toString(\"base64\");\n}\n/**\n * Converts a base64 string to text (utf8). This function does not check\n * if the input value is a valid base64 string. If there are unsupported characters\n * they could be ignored and the result may be unexpected.\n * @param value The base64 string to convert.\n * @returns The converted text.\n */\nfunction base64ToText(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireString)(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"base64\").toString(\"utf8\");\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/conversions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requireArray: () => (/* binding */ requireArray),\n/* harmony export */   requireBigInt: () => (/* binding */ requireBigInt),\n/* harmony export */   requireBigNumber: () => (/* binding */ requireBigNumber),\n/* harmony export */   requireBigNumberish: () => (/* binding */ requireBigNumberish),\n/* harmony export */   requireBuffer: () => (/* binding */ requireBuffer),\n/* harmony export */   requireDefined: () => (/* binding */ requireDefined),\n/* harmony export */   requireFunction: () => (/* binding */ requireFunction),\n/* harmony export */   requireHexadecimal: () => (/* binding */ requireHexadecimal),\n/* harmony export */   requireNumber: () => (/* binding */ requireNumber),\n/* harmony export */   requireObject: () => (/* binding */ requireObject),\n/* harmony export */   requireString: () => (/* binding */ requireString),\n/* harmony export */   requireStringifiedBigInt: () => (/* binding */ requireStringifiedBigInt),\n/* harmony export */   requireTypes: () => (/* binding */ requireTypes),\n/* harmony export */   requireUint8Array: () => (/* binding */ requireUint8Array)\n/* harmony export */ });\n/* harmony import */ var _type_checks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./type-checks.js */ \"(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js\");\n/**\n * @module @zk-kit/utils\n * @version 1.2.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n/**\n * @module ErrorHandlers\n * This module is designed to provide utility functions for validating\n * function parameters. It includes functions that throw type errors if\n * the parameters do not meet specified criteria, such as being defined,\n * a number, a string, a function, or an array. This module helps ensure\n * that functions receive the correct types of inputs, enhancing code\n * reliability and reducing runtime errors.\n */\n/**\n * @throws Throws a type error if the parameter value has not been defined.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireDefined(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not defined`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a number.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireNumber(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a number, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a string.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireString(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isString)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a string, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a function.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireFunction(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a function, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not an Array.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireArray(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not an Array instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a Uint8Array.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireUint8Array(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isUint8Array)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a Uint8Array instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a Buffer.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBuffer(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBuffer)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a Buffer instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not an object.\n * Please, note that arrays are also objects in JavaScript.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireObject(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not an object, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bigint.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigInt(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBigInt)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bigint, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a stringified bigint.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireStringifiedBigInt(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isStringifiedBigInt)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a stringified bigint`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a hexadecimal string.\n * If 'prefix' is 'true', the string must start with '0x' or '0X' followed by one or more\n * hexadecimal digits (0-9, a-f, A-F), otherwise no prefix is expected. 'prefix' is optional and\n * if its value it is not explicitly defined it will be set to 'true' by default.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n * @param prefix A boolean to include or not a '0x' or '0X' prefix.\n */\nfunction requireHexadecimal(parameterValue, parameterName, prefix = true) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isHexadecimal)(parameterValue, prefix)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a hexadecimal string`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bignumber.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigNumber(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBigNumber)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bignumber`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bignumber-ish.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigNumberish(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBigNumberish)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bignumber-ish`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value type is not part of the list of types.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireTypes(parameterValue, parameterName, types) {\n    for (const type of types) {\n        if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isSupportedType)(type)) {\n            throw new Error(`Type '${type}' is not supported`);\n        }\n    }\n    for (const type of types) {\n        if ((0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isType)(parameterValue, type)) {\n            return;\n        }\n    }\n    throw new TypeError(`Parameter '${parameterName}' is none of the following types: ${types.join(\", \")}`);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHprLWtpdC9iYWJ5LWp1Ymp1Yi9ub2RlX21vZHVsZXMvQHprLWtpdC91dGlscy9kaXN0L2xpYi5lc20vZXJyb3ItaGFuZGxlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQzROOztBQUU1TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDBEQUFTO0FBQ2xCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHlEQUFRO0FBQ2pCLDBDQUEwQyxjQUFjLG9DQUFvQyxzQkFBc0I7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMseURBQVE7QUFDakIsMENBQTBDLGNBQWMsb0NBQW9DLHNCQUFzQjtBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywyREFBVTtBQUNuQiwwQ0FBMEMsY0FBYyxzQ0FBc0Msc0JBQXNCO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHdEQUFPO0FBQ2hCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDZEQUFZO0FBQ3JCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHlEQUFRO0FBQ2pCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMseURBQVE7QUFDakIsMENBQTBDLGNBQWMscUNBQXFDLHNCQUFzQjtBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx5REFBUTtBQUNqQiwwQ0FBMEMsY0FBYyxvQ0FBb0Msc0JBQXNCO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLG9FQUFtQjtBQUM1QiwwQ0FBMEMsY0FBYztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDhEQUFhO0FBQ3RCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDREQUFXO0FBQ3BCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLCtEQUFjO0FBQ3ZCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0VBQWU7QUFDNUIscUNBQXFDLEtBQUs7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsWUFBWSx1REFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsY0FBYyxvQ0FBb0MsaUJBQWlCO0FBQ3pHOztBQUUwUCIsInNvdXJjZXMiOlsiL1VzZXJzL2NoYW5jZW1jYWxsaXN0ZXIvUHJvamVjdHMvenVwYXNzaHVudC9ub2RlX21vZHVsZXMvQHprLWtpdC9iYWJ5LWp1Ymp1Yi9ub2RlX21vZHVsZXMvQHprLWtpdC91dGlscy9kaXN0L2xpYi5lc20vZXJyb3ItaGFuZGxlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIEB6ay1raXQvdXRpbHNcbiAqIEB2ZXJzaW9uIDEuMi4xXG4gKiBAZmlsZSBFc3NlbnRpYWwgemVyby1rbm93bGVkZ2UgdXRpbGl0eSBsaWJyYXJ5IGZvciBKYXZhU2NyaXB0IGRldmVsb3BlcnMuXG4gKiBAY29weXJpZ2h0IEV0aGVyZXVtIEZvdW5kYXRpb24gMjAyNFxuICogQGxpY2Vuc2UgTUlUXG4gKiBAc2VlIFtHaXRodWJde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9wcml2YWN5LXNjYWxpbmctZXhwbG9yYXRpb25zL3prLWtpdC90cmVlL21haW4vcGFja2FnZXMvdXRpbHN9XG4qL1xuaW1wb3J0IHsgaXNEZWZpbmVkLCBpc051bWJlciwgaXNTdHJpbmcsIGlzRnVuY3Rpb24sIGlzQXJyYXksIGlzVWludDhBcnJheSwgaXNCdWZmZXIsIGlzT2JqZWN0LCBpc0JpZ0ludCwgaXNTdHJpbmdpZmllZEJpZ0ludCwgaXNIZXhhZGVjaW1hbCwgaXNCaWdOdW1iZXIsIGlzQmlnTnVtYmVyaXNoLCBpc1N1cHBvcnRlZFR5cGUsIGlzVHlwZSB9IGZyb20gJy4vdHlwZS1jaGVja3MuanMnO1xuXG4vKipcbiAqIEBtb2R1bGUgRXJyb3JIYW5kbGVyc1xuICogVGhpcyBtb2R1bGUgaXMgZGVzaWduZWQgdG8gcHJvdmlkZSB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgdmFsaWRhdGluZ1xuICogZnVuY3Rpb24gcGFyYW1ldGVycy4gSXQgaW5jbHVkZXMgZnVuY3Rpb25zIHRoYXQgdGhyb3cgdHlwZSBlcnJvcnMgaWZcbiAqIHRoZSBwYXJhbWV0ZXJzIGRvIG5vdCBtZWV0IHNwZWNpZmllZCBjcml0ZXJpYSwgc3VjaCBhcyBiZWluZyBkZWZpbmVkLFxuICogYSBudW1iZXIsIGEgc3RyaW5nLCBhIGZ1bmN0aW9uLCBvciBhbiBhcnJheS4gVGhpcyBtb2R1bGUgaGVscHMgZW5zdXJlXG4gKiB0aGF0IGZ1bmN0aW9ucyByZWNlaXZlIHRoZSBjb3JyZWN0IHR5cGVzIG9mIGlucHV0cywgZW5oYW5jaW5nIGNvZGVcbiAqIHJlbGlhYmlsaXR5IGFuZCByZWR1Y2luZyBydW50aW1lIGVycm9ycy5cbiAqL1xuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBoYXMgbm90IGJlZW4gZGVmaW5lZC5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlRGVmaW5lZChwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNEZWZpbmVkKHBhcmFtZXRlclZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vdCBkZWZpbmVkYCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBub3QgYSBudW1iZXIuXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZU51bWJlcihwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNOdW1iZXIocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgbnVtYmVyLCByZWNlaXZlZCB0eXBlOiAke3R5cGVvZiBwYXJhbWV0ZXJWYWx1ZX1gKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIHN0cmluZy5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlU3RyaW5nKHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc1N0cmluZyhwYXJhbWV0ZXJWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYSBzdHJpbmcsIHJlY2VpdmVkIHR5cGU6ICR7dHlwZW9mIHBhcmFtZXRlclZhbHVlfWApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGEgZnVuY3Rpb24uXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZUZ1bmN0aW9uKHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc0Z1bmN0aW9uKHBhcmFtZXRlclZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vdCBhIGZ1bmN0aW9uLCByZWNlaXZlZCB0eXBlOiAke3R5cGVvZiBwYXJhbWV0ZXJWYWx1ZX1gKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhbiBBcnJheS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlQXJyYXkocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUpIHtcbiAgICBpZiAoIWlzQXJyYXkocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGFuIEFycmF5IGluc3RhbmNlYCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBub3QgYSBVaW50OEFycmF5LlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlIFRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyTmFtZSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVVaW50OEFycmF5KHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc1VpbnQ4QXJyYXkocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgVWludDhBcnJheSBpbnN0YW5jZWApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGEgQnVmZmVyLlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlIFRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyTmFtZSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVCdWZmZXIocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUpIHtcbiAgICBpZiAoIWlzQnVmZmVyKHBhcmFtZXRlclZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vdCBhIEJ1ZmZlciBpbnN0YW5jZWApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGFuIG9iamVjdC5cbiAqIFBsZWFzZSwgbm90ZSB0aGF0IGFycmF5cyBhcmUgYWxzbyBvYmplY3RzIGluIEphdmFTY3JpcHQuXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZU9iamVjdChwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNPYmplY3QocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGFuIG9iamVjdCwgcmVjZWl2ZWQgdHlwZTogJHt0eXBlb2YgcGFyYW1ldGVyVmFsdWV9YCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBub3QgYSBiaWdpbnQuXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZUJpZ0ludChwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNCaWdJbnQocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgYmlnaW50LCByZWNlaXZlZCB0eXBlOiAke3R5cGVvZiBwYXJhbWV0ZXJWYWx1ZX1gKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIHN0cmluZ2lmaWVkIGJpZ2ludC5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlU3RyaW5naWZpZWRCaWdJbnQocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUpIHtcbiAgICBpZiAoIWlzU3RyaW5naWZpZWRCaWdJbnQocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgc3RyaW5naWZpZWQgYmlnaW50YCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBub3QgYSBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKiBJZiAncHJlZml4JyBpcyAndHJ1ZScsIHRoZSBzdHJpbmcgbXVzdCBzdGFydCB3aXRoICcweCcgb3IgJzBYJyBmb2xsb3dlZCBieSBvbmUgb3IgbW9yZVxuICogaGV4YWRlY2ltYWwgZGlnaXRzICgwLTksIGEtZiwgQS1GKSwgb3RoZXJ3aXNlIG5vIHByZWZpeCBpcyBleHBlY3RlZC4gJ3ByZWZpeCcgaXMgb3B0aW9uYWwgYW5kXG4gKiBpZiBpdHMgdmFsdWUgaXQgaXMgbm90IGV4cGxpY2l0bHkgZGVmaW5lZCBpdCB3aWxsIGJlIHNldCB0byAndHJ1ZScgYnkgZGVmYXVsdC5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICogQHBhcmFtIHByZWZpeCBBIGJvb2xlYW4gdG8gaW5jbHVkZSBvciBub3QgYSAnMHgnIG9yICcwWCcgcHJlZml4LlxuICovXG5mdW5jdGlvbiByZXF1aXJlSGV4YWRlY2ltYWwocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUsIHByZWZpeCA9IHRydWUpIHtcbiAgICBpZiAoIWlzSGV4YWRlY2ltYWwocGFyYW1ldGVyVmFsdWUsIHByZWZpeCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYSBoZXhhZGVjaW1hbCBzdHJpbmdgKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIGJpZ251bWJlci5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlQmlnTnVtYmVyKHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc0JpZ051bWJlcihwYXJhbWV0ZXJWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYSBiaWdudW1iZXJgKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIGJpZ251bWJlci1pc2guXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZUJpZ051bWJlcmlzaChwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNCaWdOdW1iZXJpc2gocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgYmlnbnVtYmVyLWlzaGApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgdHlwZSBpcyBub3QgcGFydCBvZiB0aGUgbGlzdCBvZiB0eXBlcy5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlVHlwZXMocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUsIHR5cGVzKSB7XG4gICAgZm9yIChjb25zdCB0eXBlIG9mIHR5cGVzKSB7XG4gICAgICAgIGlmICghaXNTdXBwb3J0ZWRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFR5cGUgJyR7dHlwZX0nIGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdHlwZXMpIHtcbiAgICAgICAgaWYgKGlzVHlwZShwYXJhbWV0ZXJWYWx1ZSwgdHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vbmUgb2YgdGhlIGZvbGxvd2luZyB0eXBlczogJHt0eXBlcy5qb2luKFwiLCBcIil9YCk7XG59XG5cbmV4cG9ydCB7IHJlcXVpcmVBcnJheSwgcmVxdWlyZUJpZ0ludCwgcmVxdWlyZUJpZ051bWJlciwgcmVxdWlyZUJpZ051bWJlcmlzaCwgcmVxdWlyZUJ1ZmZlciwgcmVxdWlyZURlZmluZWQsIHJlcXVpcmVGdW5jdGlvbiwgcmVxdWlyZUhleGFkZWNpbWFsLCByZXF1aXJlTnVtYmVyLCByZXF1aXJlT2JqZWN0LCByZXF1aXJlU3RyaW5nLCByZXF1aXJlU3RyaW5naWZpZWRCaWdJbnQsIHJlcXVpcmVUeXBlcywgcmVxdWlyZVVpbnQ4QXJyYXkgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/f1-field.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/f1-field.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ F1Field)\n/* harmony export */ });\n/* harmony import */ var _scalar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scalar.js */ \"(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/scalar.js\");\n/**\n * @module @zk-kit/utils\n * @version 1.2.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n/**\n * @class F1Field\n * Represents a finite field of order 'order' providing arithmetic operations under modulus.\n * This class includes operations such as addition, subtraction, multiplication, division,\n * and inversion, all performed modulo the field's order. It's designed to work with bigints,\n * supporting large numbers for cryptographic purposes and other applications requiring\n * modular arithmetic.\n * Note that the outputs of the functions will always be within the field if and only if\n * the input values are within the field. Devs need to make sure of that.\n *\n * @property one Represents the scalar value 1 in the field.\n * @property zero Represents the scalar value 0 in the field.\n * @property _order The order of the finite field (i.e., the modulus).\n * @property _half Half the order of the field, used for certain comparisons.\n * @property _negone The scalar value -1 in the field, represented positively.\n */\nclass F1Field {\n    constructor(order) {\n        this.one = 1n;\n        this.zero = 0n;\n        this._order = order;\n        this._half = order >> this.one;\n        this._negone = this._order - this.one;\n    }\n    /**\n     * Ensures a given result falls within the field by applying modular reduction.\n     * This method also handles negative inputs, correctly mapping them into the field.\n     * @param res The result to be normalized to the field.\n     * @returns The equivalent value within the field.\n     */\n    e(res) {\n        res %= this._order;\n        return res < 0 ? res + this._order : res;\n    }\n    /**\n     * Performs modular multiplication of two bigint values within the field.\n     * @param a The first value.\n     * @param b The second value.\n     * @returns The product of 'a' and 'b' modulo the field's order.\n     */\n    mul(a, b) {\n        return (a * b) % this._order;\n    }\n    /**\n     * Subtracts one bigint from another under modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value from which to subtract.\n     * @param b The value to be subtracted.\n     * @returns The difference of 'a' and 'b' modulo the field's order.\n     */\n    sub(a, b) {\n        return a >= b ? a - b : this._order - b + a;\n    }\n    /**\n     * Adds two bigint values together under modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value.\n     * @param b The second value.\n     * @returns The sum of 'a' and 'b' modulo the field's order.\n     */\n    add(a, b) {\n        const res = a + b;\n        return res >= this._order ? res - this._order : res;\n    }\n    /**\n     * Computes the multiplicative inverse of a given value within the field.\n     * This method uses the Extended Euclidean Algorithm to find the inverse,\n     * ensuring the result is always a positive value less than the field's order.\n     * If the input value is zero, which has no inverse, an error is thrown.\n     * @param a The value for which to compute the inverse.\n     * @returns The multiplicative inverse of 'a' modulo the field's order.\n     * @throws if 'a' is zero.\n     */\n    inv(a) {\n        if (a === this.zero) {\n            throw new Error(\"Zero has no inverse\");\n        }\n        let t = this.zero;\n        let r = this._order;\n        let newt = this.one;\n        let newr = a % this._order;\n        while (newr) {\n            const q = r / newr;\n            [t, newt] = [newt, t - q * newt];\n            [r, newr] = [newr, r - q * newr];\n        }\n        if (t < this.zero) {\n            t += this._order;\n        }\n        return t;\n    }\n    /**\n     * Divides one bigint by another within the field by multiplying the first value\n     * by the multiplicative inverse of the second.\n     * @param a The dividend.\n     * @param b The divisor.\n     * @returns The result of the division of 'a' by 'b' modulo the field's order.\n     */\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n    /**\n     * Checks if two bigint values are equal within the context of the field.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' equals 'b', false otherwise.\n     */\n    eq(a, b) {\n        return a === b;\n    }\n    /**\n     * Squares a bigint value within the field.\n     * This is a specific case of multiplication where the value is multiplied by itself,\n     * optimized for performance where applicable.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value to square.\n     * @returns The square of 'a' modulo the field's order.\n     */\n    square(a) {\n        return (a * a) % this._order;\n    }\n    /**\n     * Compares two bigint values to determine if the first is less than the second,\n     * taking into account the field's order for modular comparison.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' is less than 'b', false otherwise.\n     */\n    lt(a, b) {\n        const aa = a > this._half ? a - this._order : a;\n        const bb = b > this._half ? b - this._order : b;\n        return aa < bb;\n    }\n    /**\n     * Compares two bigint values to determine if the first is greater than or equal to the second,\n     * considering the field's modular context.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' is greater than or equal to 'b', false otherwise.\n     */\n    geq(a, b) {\n        const aa = a > this._half ? a - this._order : a;\n        const bb = b > this._half ? b - this._order : b;\n        return aa >= bb;\n    }\n    /**\n     * Computes the negation of a bigint value within the field.\n     * The result is the modular additive inverse that, when added to the original value,\n     * yields zero in the field's modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value to negate.\n     * @returns The negation of 'a' modulo the field's order.\n     */\n    neg(a) {\n        return a ? this._order - a : a;\n    }\n    /**\n     * Checks if a bigint value is zero within the context of the field.\n     * @param a The value to check.\n     * @returns True if 'a' is zero, false otherwise.\n     */\n    isZero(a) {\n        return a === this.zero;\n    }\n    /**\n     * Raises a base to an exponent within the field, efficiently computing\n     * scalar exponentiation using the square-and-multiply algorithm.\n     * Supports both positive and negative exponents through the use of the `inv` method for negatives.\n     * @param base The base to be exponentiated.\n     * @param e The exponent.\n     * @returns The result of raising 'base' to the power 'e' modulo the field's order.\n     */\n    pow(base, e) {\n        if ((0,_scalar_js__WEBPACK_IMPORTED_MODULE_0__.isZero)(e)) {\n            return this.one;\n        }\n        if (e < 0n) {\n            base = this.inv(base);\n            e = -e;\n        }\n        const n = (0,_scalar_js__WEBPACK_IMPORTED_MODULE_0__.bits)(e);\n        if (n.length === 0) {\n            return this.one;\n        }\n        let res = base;\n        for (let i = n.length - 2; i >= 0; i -= 1) {\n            res = this.square(res);\n            if (n[i]) {\n                res = this.mul(res, base);\n            }\n        }\n        return res;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/f1-field.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/scalar.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/scalar.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bits: () => (/* binding */ bits),\n/* harmony export */   gt: () => (/* binding */ gt),\n/* harmony export */   isOdd: () => (/* binding */ isOdd),\n/* harmony export */   isZero: () => (/* binding */ isZero),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   shiftRight: () => (/* binding */ shiftRight)\n/* harmony export */ });\n/**\n * @module @zk-kit/utils\n * @version 1.2.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n/**\n * @module Scalar\n * This module provides utility functions for performing scalar operations\n * within a field, especially designed to handle operations on bigints.\n * The operations include scalar inversion (`inv`), scalar exponentiation (`pow`),\n * and modular reduction. Functions are carefully implemented to ensure\n * mathematical correctness and efficiency, supporting both positive and\n * negative bigint values. The module aims to provide robust tools for\n * cryptographic calculations and other applications requiring high-precision\n * arithmetic in fields.\n */\n/**\n * Checks if a bigint scalar value is zero.\n * @param a The bigint scalar value to check.\n * @returns True if 'a' is zero, false otherwise.\n */\nfunction isZero(a) {\n    return !a;\n}\n/**\n * Determines whether a bigint scalar value is odd.\n * @param a The bigint scalar value to check.\n * @returns True if 'a' is odd, false if it is even.\n */\nfunction isOdd(a) {\n    return (a & BigInt(1)) === BigInt(1);\n}\n/**\n * Performs a bitwise right shift on a bigint scalar value.\n * This operation is equivalent to dividing by 2^n, but it operates directly\n * on the binary representation, making it efficient for certain types of calculations.\n * @param a The bigint scalar value to shift.\n * @param n The number of bits to shift 'a' by.\n * @returns The result of shifting 'a' right by 'n' bits.\n */\nfunction shiftRight(a, n) {\n    return a >> n;\n}\n/**\n * Multiplies two bigint scalar values.\n * @param a The first bigint scalar value.\n * @param b The second bigint scalar value.\n * @returns The product of 'a' and 'b'.\n */\nfunction mul(a, b) {\n    return a * b;\n}\n/**\n * Compares two bigint scalar values to determine if the first is greater than the second.\n * @param a The first bigint scalar value to compare.\n * @param b The second bigint scalar value to compare.\n * @returns True if 'a' is greater than 'b', false otherwise.\n */\nfunction gt(a, b) {\n    return a > b;\n}\n/**\n * Converts a bigint scalar value into an array of bits, represented as numbers.\n * This function is particularly useful for examining the binary structure of bigints,\n * which can be necessary for bit manipulation and understanding the representation\n * of numbers at a lower level.\n * @param n The bigint scalar value to convert into bits.\n * @returns An array of numbers representing the bits of 'n', starting from the least significant bit.\n */\nfunction bits(n) {\n    const res = [];\n    let E = n;\n    while (E) {\n        if (E & BigInt(1)) {\n            res.push(1);\n        }\n        else {\n            res.push(0);\n        }\n        E >>= BigInt(1);\n    }\n    return res;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHprLWtpdC9iYWJ5LWp1Ymp1Yi9ub2RlX21vZHVsZXMvQHprLWtpdC91dGlscy9kaXN0L2xpYi5lc20vc2NhbGFyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFb0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jaGFuY2VtY2FsbGlzdGVyL1Byb2plY3RzL3p1cGFzc2h1bnQvbm9kZV9tb2R1bGVzL0B6ay1raXQvYmFieS1qdWJqdWIvbm9kZV9tb2R1bGVzL0B6ay1raXQvdXRpbHMvZGlzdC9saWIuZXNtL3NjYWxhci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgQHprLWtpdC91dGlsc1xuICogQHZlcnNpb24gMS4yLjFcbiAqIEBmaWxlIEVzc2VudGlhbCB6ZXJvLWtub3dsZWRnZSB1dGlsaXR5IGxpYnJhcnkgZm9yIEphdmFTY3JpcHQgZGV2ZWxvcGVycy5cbiAqIEBjb3B5cmlnaHQgRXRoZXJldW0gRm91bmRhdGlvbiAyMDI0XG4gKiBAbGljZW5zZSBNSVRcbiAqIEBzZWUgW0dpdGh1Yl17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3ByaXZhY3ktc2NhbGluZy1leHBsb3JhdGlvbnMvemsta2l0L3RyZWUvbWFpbi9wYWNrYWdlcy91dGlsc31cbiovXG4vKipcbiAqIEBtb2R1bGUgU2NhbGFyXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgcGVyZm9ybWluZyBzY2FsYXIgb3BlcmF0aW9uc1xuICogd2l0aGluIGEgZmllbGQsIGVzcGVjaWFsbHkgZGVzaWduZWQgdG8gaGFuZGxlIG9wZXJhdGlvbnMgb24gYmlnaW50cy5cbiAqIFRoZSBvcGVyYXRpb25zIGluY2x1ZGUgc2NhbGFyIGludmVyc2lvbiAoYGludmApLCBzY2FsYXIgZXhwb25lbnRpYXRpb24gKGBwb3dgKSxcbiAqIGFuZCBtb2R1bGFyIHJlZHVjdGlvbi4gRnVuY3Rpb25zIGFyZSBjYXJlZnVsbHkgaW1wbGVtZW50ZWQgdG8gZW5zdXJlXG4gKiBtYXRoZW1hdGljYWwgY29ycmVjdG5lc3MgYW5kIGVmZmljaWVuY3ksIHN1cHBvcnRpbmcgYm90aCBwb3NpdGl2ZSBhbmRcbiAqIG5lZ2F0aXZlIGJpZ2ludCB2YWx1ZXMuIFRoZSBtb2R1bGUgYWltcyB0byBwcm92aWRlIHJvYnVzdCB0b29scyBmb3JcbiAqIGNyeXB0b2dyYXBoaWMgY2FsY3VsYXRpb25zIGFuZCBvdGhlciBhcHBsaWNhdGlvbnMgcmVxdWlyaW5nIGhpZ2gtcHJlY2lzaW9uXG4gKiBhcml0aG1ldGljIGluIGZpZWxkcy5cbiAqL1xuLyoqXG4gKiBDaGVja3MgaWYgYSBiaWdpbnQgc2NhbGFyIHZhbHVlIGlzIHplcm8uXG4gKiBAcGFyYW0gYSBUaGUgYmlnaW50IHNjYWxhciB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIFRydWUgaWYgJ2EnIGlzIHplcm8sIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNaZXJvKGEpIHtcbiAgICByZXR1cm4gIWE7XG59XG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIGJpZ2ludCBzY2FsYXIgdmFsdWUgaXMgb2RkLlxuICogQHBhcmFtIGEgVGhlIGJpZ2ludCBzY2FsYXIgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBUcnVlIGlmICdhJyBpcyBvZGQsIGZhbHNlIGlmIGl0IGlzIGV2ZW4uXG4gKi9cbmZ1bmN0aW9uIGlzT2RkKGEpIHtcbiAgICByZXR1cm4gKGEgJiBCaWdJbnQoMSkpID09PSBCaWdJbnQoMSk7XG59XG4vKipcbiAqIFBlcmZvcm1zIGEgYml0d2lzZSByaWdodCBzaGlmdCBvbiBhIGJpZ2ludCBzY2FsYXIgdmFsdWUuXG4gKiBUaGlzIG9wZXJhdGlvbiBpcyBlcXVpdmFsZW50IHRvIGRpdmlkaW5nIGJ5IDJebiwgYnV0IGl0IG9wZXJhdGVzIGRpcmVjdGx5XG4gKiBvbiB0aGUgYmluYXJ5IHJlcHJlc2VudGF0aW9uLCBtYWtpbmcgaXQgZWZmaWNpZW50IGZvciBjZXJ0YWluIHR5cGVzIG9mIGNhbGN1bGF0aW9ucy5cbiAqIEBwYXJhbSBhIFRoZSBiaWdpbnQgc2NhbGFyIHZhbHVlIHRvIHNoaWZ0LlxuICogQHBhcmFtIG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0ICdhJyBieS5cbiAqIEByZXR1cm5zIFRoZSByZXN1bHQgb2Ygc2hpZnRpbmcgJ2EnIHJpZ2h0IGJ5ICduJyBiaXRzLlxuICovXG5mdW5jdGlvbiBzaGlmdFJpZ2h0KGEsIG4pIHtcbiAgICByZXR1cm4gYSA+PiBuO1xufVxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBiaWdpbnQgc2NhbGFyIHZhbHVlcy5cbiAqIEBwYXJhbSBhIFRoZSBmaXJzdCBiaWdpbnQgc2NhbGFyIHZhbHVlLlxuICogQHBhcmFtIGIgVGhlIHNlY29uZCBiaWdpbnQgc2NhbGFyIHZhbHVlLlxuICogQHJldHVybnMgVGhlIHByb2R1Y3Qgb2YgJ2EnIGFuZCAnYicuXG4gKi9cbmZ1bmN0aW9uIG11bChhLCBiKSB7XG4gICAgcmV0dXJuIGEgKiBiO1xufVxuLyoqXG4gKiBDb21wYXJlcyB0d28gYmlnaW50IHNjYWxhciB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZSBmaXJzdCBpcyBncmVhdGVyIHRoYW4gdGhlIHNlY29uZC5cbiAqIEBwYXJhbSBhIFRoZSBmaXJzdCBiaWdpbnQgc2NhbGFyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0gYiBUaGUgc2Vjb25kIGJpZ2ludCBzY2FsYXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIFRydWUgaWYgJ2EnIGlzIGdyZWF0ZXIgdGhhbiAnYicsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gZ3QoYSwgYikge1xuICAgIHJldHVybiBhID4gYjtcbn1cbi8qKlxuICogQ29udmVydHMgYSBiaWdpbnQgc2NhbGFyIHZhbHVlIGludG8gYW4gYXJyYXkgb2YgYml0cywgcmVwcmVzZW50ZWQgYXMgbnVtYmVycy5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3IgZXhhbWluaW5nIHRoZSBiaW5hcnkgc3RydWN0dXJlIG9mIGJpZ2ludHMsXG4gKiB3aGljaCBjYW4gYmUgbmVjZXNzYXJ5IGZvciBiaXQgbWFuaXB1bGF0aW9uIGFuZCB1bmRlcnN0YW5kaW5nIHRoZSByZXByZXNlbnRhdGlvblxuICogb2YgbnVtYmVycyBhdCBhIGxvd2VyIGxldmVsLlxuICogQHBhcmFtIG4gVGhlIGJpZ2ludCBzY2FsYXIgdmFsdWUgdG8gY29udmVydCBpbnRvIGJpdHMuXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZyB0aGUgYml0cyBvZiAnbicsIHN0YXJ0aW5nIGZyb20gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC5cbiAqL1xuZnVuY3Rpb24gYml0cyhuKSB7XG4gICAgY29uc3QgcmVzID0gW107XG4gICAgbGV0IEUgPSBuO1xuICAgIHdoaWxlIChFKSB7XG4gICAgICAgIGlmIChFICYgQmlnSW50KDEpKSB7XG4gICAgICAgICAgICByZXMucHVzaCgxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKDApO1xuICAgICAgICB9XG4gICAgICAgIEUgPj49IEJpZ0ludCgxKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHsgYml0cywgZ3QsIGlzT2RkLCBpc1plcm8sIG11bCwgc2hpZnRSaWdodCB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/scalar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBigInt: () => (/* binding */ isBigInt),\n/* harmony export */   isBigNumber: () => (/* binding */ isBigNumber),\n/* harmony export */   isBigNumberish: () => (/* binding */ isBigNumberish),\n/* harmony export */   isBuffer: () => (/* binding */ isBuffer),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isHexadecimal: () => (/* binding */ isHexadecimal),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isStringifiedBigInt: () => (/* binding */ isStringifiedBigInt),\n/* harmony export */   isSupportedType: () => (/* binding */ isSupportedType),\n/* harmony export */   isType: () => (/* binding */ isType),\n/* harmony export */   isUint8Array: () => (/* binding */ isUint8Array),\n/* harmony export */   supportedTypes: () => (/* binding */ supportedTypes)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/**\n * @module @zk-kit/utils\n * @version 1.2.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n/**\n * @module TypeChecks\n * This module provides utility functions to check data types.\n * It defines a set of supported types and includes functions to check if\n * a value is defined and if it matches a supported type. These functions\n * are useful for type checking and validation in the other libraries,\n * enhancing code robustness and reliability.\n */\n/** @internal */\nconst supportedTypes = [\n    \"number\",\n    \"string\",\n    \"function\",\n    \"Array\",\n    \"Uint8Array\",\n    \"Buffer\",\n    \"object\",\n    \"bigint\",\n    \"stringified-bigint\",\n    \"hexadecimal\",\n    \"bignumber\",\n    \"bignumberish\"\n];\n/**\n * Returns true if the value is defined, false otherwise.\n * @param value The value to be checked.\n */\nfunction isDefined(value) {\n    return typeof value !== \"undefined\";\n}\n/**\n * Returns true if the value is a number, false otherwise.\n * @param value The value to be checked.\n */\nfunction isNumber(value) {\n    return typeof value === \"number\";\n}\n/**\n * Returns true if the value is a string, false otherwise.\n * @param value The value to be checked.\n */\nfunction isString(value) {\n    return typeof value === \"string\";\n}\n/**\n * Returns true if the value is a function, false otherwise.\n * @param value The value to be checked.\n */\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\n/**\n * Returns true if the value is an object, false otherwise.\n * Please, note that arrays are also objects in JavaScript.\n * @param value The value to be checked.\n */\nfunction isObject(value) {\n    return typeof value === \"object\";\n}\n/**\n * Returns true if the value is an Array instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isArray(value) {\n    return isObject(value) && Array.isArray(value);\n}\n/**\n * Returns true if the value is a Uint8Array instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isUint8Array(value) {\n    return value instanceof Uint8Array;\n}\n/**\n * Returns true if the value is a Buffer instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBuffer(value) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(value);\n}\n/**\n * Returns true if the value is a bigint, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBigInt(value) {\n    return typeof value === \"bigint\";\n}\n/**\n * Checks if the given value is a string that represents a valid bigint.\n * @param value The value to be checked if it's a stringified bigint.\n */\nfunction isStringifiedBigInt(value) {\n    // Check if value is a string first.\n    if (!isString(value)) {\n        return false;\n    }\n    try {\n        // Attempt to convert the string to BigInt.\n        BigInt(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Checks if a string is a valid hexadecimal string representation.\n * If 'prefix' is 'true', the string must start with '0x' or '0X' followed by one or more\n * hexadecimal digits (0-9, a-f, A-F), otherwise no prefix is expected. 'prefix' is optional and\n * if its value it is not explicitly defined it will be set to 'true' by default.\n * @param value The string to be tested.\n * @param prefix A boolean to include or not a '0x' or '0X' prefix.\n */\nfunction isHexadecimal(value, prefix = true) {\n    if (!isString(value)) {\n        return false;\n    }\n    if (prefix) {\n        return /^(0x|0X)[0-9a-fA-F]+$/.test(value);\n    }\n    return /^[0-9a-fA-F]+$/.test(value);\n}\n/**\n * Checks if the given value can be considered as BigNumber.\n * A value is considered a BigNumber if it is a bigint or a string\n * that can be converted to a bigint (via `Bigint(s)`).\n * @param value The value to check.\n */\nfunction isBigNumber(value) {\n    return isBigInt(value) || isStringifiedBigInt(value);\n}\n/**\n * Checks if the given value can be considered as BigNumberish.\n * A value is considered BigNumberish if it meets\n * any of the following conditions: it's a number, a bigint, a string\n * that can be converted to a bigint, a hexadecimal\n * string, or a Buffer object.\n * @param value The value to check.\n */\nfunction isBigNumberish(value) {\n    return (isNumber(value) ||\n        isBigInt(value) ||\n        isStringifiedBigInt(value) ||\n        isHexadecimal(value) ||\n        isBuffer(value) ||\n        isUint8Array(value));\n}\n/**\n * Returns true if the value type is the same as the type passed\n * as the second parameter, false otherwise.\n * @param value\n * @param type The expected type.\n */\nfunction isType(value, type) {\n    switch (type) {\n        case \"number\":\n            return isNumber(value);\n        case \"string\":\n            return isString(value);\n        case \"function\":\n            return isFunction(value);\n        case \"Array\":\n            return isArray(value);\n        case \"Uint8Array\":\n            return isUint8Array(value);\n        case \"Buffer\":\n            return isBuffer(value);\n        case \"object\":\n            return isObject(value);\n        case \"bigint\":\n            return isBigInt(value);\n        case \"stringified-bigint\":\n            return isStringifiedBigInt(value);\n        case \"hexadecimal\":\n            return isHexadecimal(value);\n        case \"bignumber\":\n            return isBigNumber(value);\n        case \"bignumberish\":\n            return isBigNumberish(value);\n        default:\n            return false;\n    }\n}\n/**\n * Returns true if the type is being supported by this utility\n * functions, false otherwise.\n * @param type The type to be checked.\n */\nfunction isSupportedType(type) {\n    return supportedTypes.includes(type);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/baby-jubjub/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/eddsa-poseidon/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@zk-kit/eddsa-poseidon/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EdDSAPoseidon: () => (/* binding */ EdDSAPoseidon),\n/* harmony export */   derivePublicKey: () => (/* binding */ derivePublicKey),\n/* harmony export */   deriveSecretScalar: () => (/* binding */ deriveSecretScalar),\n/* harmony export */   packPublicKey: () => (/* binding */ packPublicKey),\n/* harmony export */   packSignature: () => (/* binding */ packSignature),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   unpackPublicKey: () => (/* binding */ unpackPublicKey),\n/* harmony export */   unpackSignature: () => (/* binding */ unpackSignature),\n/* harmony export */   verifySignature: () => (/* binding */ verifySignature)\n/* harmony export */ });\n/* harmony import */ var _zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zk-kit/baby-jubjub */ \"(ssr)/./node_modules/@zk-kit/baby-jubjub/dist/index.js\");\n/* harmony import */ var _zk_kit_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zk-kit/utils */ \"(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/index.node.js\");\n/* harmony import */ var _zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @zk-kit/utils/conversions */ \"(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/conversions.js\");\n/* harmony import */ var _zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @zk-kit/utils/error-handlers */ \"(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js\");\n/* harmony import */ var _zk_kit_utils_f1_field__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @zk-kit/utils/f1-field */ \"(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/f1-field.js\");\n/* harmony import */ var _zk_kit_utils_scalar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @zk-kit/utils/scalar */ \"(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/scalar.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var poseidon_lite_poseidon5__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! poseidon-lite/poseidon5 */ \"(ssr)/./node_modules/poseidon-lite/poseidon5.js\");\n/* harmony import */ var _zk_kit_utils_type_checks__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @zk-kit/utils/type-checks */ \"(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js\");\n/**\n * @module @zk-kit/eddsa-poseidon\n * @version 1.0.4\n * @file A JavaScript EdDSA library for secure signing and verification using Poseidon the Baby Jubjub elliptic curve.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/eddsa-poseidon}\n*/\n\n\n\n\n\n\n\n\n\n\n/**\n * Copyright\n * This code is a TypeScript adaptation of the 'blake-hash' library code (https://www.npmjs.com/package/blake-hash)\n * using the 'buffer' npm package (https://www.npmjs.com/package/buffer).\n * The 'js-crypto' library (https://github.com/iden3/js-crypto/blob/main/src/blake.ts) from Iden3 was used as a reference\n * for this work, specifically for types and adaptation.\n */\n/**\n * @module Blake\n * Implements the Blake-512 cryptographic hash function.\n * Blake-512 is part of the BLAKE family of cryptographic hash functions, known\n * for its speed and security. This module offers functionality to compute Blake-512\n * hashes of input data, providing both one-time hashing capabilities and incremental\n * hashing to process large or streaming data.\n *\n * This code is adapted from the \"blake-hash\" JavaScript library, ensuring compatibility\n * and performance in TypeScript environments. It supports hashing with optional\n * salt for enhanced security in certain contexts.\n */\nconst zo = buffer__WEBPACK_IMPORTED_MODULE_6__.Buffer.from([0x01]);\nconst oo = buffer__WEBPACK_IMPORTED_MODULE_6__.Buffer.from([0x81]);\n// Static properties for sigma, u256, u512, and padding are defined here below\nconst sigma = [\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],\n    [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4],\n    [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8],\n    [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13],\n    [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9],\n    [12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11],\n    [13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10],\n    [6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5],\n    [10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0],\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],\n    [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4],\n    [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8],\n    [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13],\n    [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]\n];\nconst u512 = [\n    0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6,\n    0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b,\n    0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947,\n    0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69\n];\nconst padding = buffer__WEBPACK_IMPORTED_MODULE_6__.Buffer.from([\n    0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n]);\n/**\n * Performs a bitwise rotation on the values of two elements in an array.\n * This operation is a key component of the Blake-512 algorithm, enabling\n * the mixing of bits in a non-linear fashion.\n * @param v The array containing values to rotate.\n * @param i The index of the first element to rotate.\n * @param j The index of the second element to rotate.\n * @param n The number of bits to rotate by.\n */\nfunction rot(v, i, j, n) {\n    let hi = v[i * 2] ^ v[j * 2];\n    let lo = v[i * 2 + 1] ^ v[j * 2 + 1];\n    if (n >= 32) {\n        lo ^= hi;\n        hi ^= lo;\n        lo ^= hi;\n        n -= 32;\n    }\n    if (n === 0) {\n        v[i * 2] = hi >>> 0;\n        v[i * 2 + 1] = lo >>> 0;\n    }\n    else {\n        v[i * 2] = ((hi >>> n) | (lo << (32 - n))) >>> 0;\n        v[i * 2 + 1] = ((lo >>> n) | (hi << (32 - n))) >>> 0;\n    }\n}\n/**\n * The G function is one of the core operations in the Blake-512 compression function.\n * It mixes the input values based on the message block and the round constants,\n * contributing to the diffusion and confusion properties of the hash function.\n * @param v The working vector, part of the state being updated.\n * @param m - The message block being processed.\n * @param i The current round index.\n * @param a, b, c, d Indices within the working vector to mix.\n * @param e Index within the message block and round constants.\n */\nfunction g(v, m, i, a, b, c, d, e) {\n    let lo;\n    // v[a] += (m[sigma[i][e]] ^ u512[sigma[i][e+1]]) + v[b];\n    lo = v[a * 2 + 1] + ((m[sigma[i][e] * 2 + 1] ^ u512[sigma[i][e + 1] * 2 + 1]) >>> 0) + v[b * 2 + 1];\n    v[a * 2] =\n        (v[a * 2] + ((m[sigma[i][e] * 2] ^ u512[sigma[i][e + 1] * 2]) >>> 0) + v[b * 2] + ~~(lo / 0x0100000000)) >>> 0;\n    v[a * 2 + 1] = lo >>> 0;\n    // v[d] = ROT( v[d] ^ v[a],32);\n    rot(v, d, a, 32);\n    // v[c] += v[d];\n    lo = v[c * 2 + 1] + v[d * 2 + 1];\n    v[c * 2] = (v[c * 2] + v[d * 2] + ~~(lo / 0x0100000000)) >>> 0;\n    v[c * 2 + 1] = lo >>> 0;\n    // v[b] = ROT( v[b] ^ v[c],25);\n    rot(v, b, c, 25);\n    // v[a] += (m[sigma[i][e+1]] ^ u512[sigma[i][e]])+v[b];\n    lo = v[a * 2 + 1] + ((m[sigma[i][e + 1] * 2 + 1] ^ u512[sigma[i][e] * 2 + 1]) >>> 0) + v[b * 2 + 1];\n    v[a * 2] =\n        (v[a * 2] + ((m[sigma[i][e + 1] * 2] ^ u512[sigma[i][e] * 2]) >>> 0) + v[b * 2] + ~~(lo / 0x0100000000)) >>> 0;\n    v[a * 2 + 1] = lo >>> 0;\n    // v[d] = ROT( v[d] ^ v[a],16);\n    rot(v, d, a, 16);\n    // v[c] += v[d];\n    lo = v[c * 2 + 1] + v[d * 2 + 1];\n    v[c * 2] = (v[c * 2] + v[d * 2] + ~~(lo / 0x0100000000)) >>> 0;\n    v[c * 2 + 1] = lo >>> 0;\n    // v[b] = ROT( v[b] ^ v[c],11)\n    rot(v, b, c, 11);\n}\n/**\n * Processes the carry for the bit length counter, ensuring it remains\n * within bounds as a 128-bit number.\n * @param arr The array representing the 128-bit counter.\n */\nfunction lengthCarry(arr) {\n    for (let j = 0; j < arr.length; j += 1) {\n        if (arr[j] < 0x0100000000)\n            break;\n        arr[j] -= 0x0100000000;\n        arr[j + 1] += 1;\n    }\n}\n/**\n * Represents a Blake-512 hash computation instance.\n * This class maintains the internal state, buffers, and counters needed to\n * process input data and produce the final hash output. It supports incremental\n * hashing, allowing data to be added in chunks.\n */\n/* eslint-disable import/prefer-default-export */\nclass Blake512 {\n    /**\n     * Initializes a new Blake-512 hash instance with the default parameters.\n     */\n    constructor() {\n        this._h = [\n            0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f,\n            0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179\n        ];\n        this._s = [0, 0, 0, 0, 0, 0, 0, 0];\n        this._block = buffer__WEBPACK_IMPORTED_MODULE_6__.Buffer.alloc(128);\n        this._blockOffset = 0;\n        this._length = [0, 0, 0, 0];\n        this._nullt = false;\n        this._zo = zo;\n        this._oo = oo;\n    }\n    /**\n     * The core compression function for Blake-512. It transforms the internal\n     * state based on the input block and the current hash parameters.\n     */\n    _compress() {\n        const v = new Array(32);\n        const m = new Array(32);\n        let i;\n        for (i = 0; i < 32; i += 1)\n            m[i] = this._block.readUInt32BE(i * 4);\n        for (i = 0; i < 16; i += 1)\n            v[i] = this._h[i] >>> 0;\n        for (i = 16; i < 24; i += 1)\n            v[i] = (this._s[i - 16] ^ u512[i - 16]) >>> 0;\n        for (i = 24; i < 32; i += 1)\n            v[i] = u512[i - 16];\n        if (!this._nullt) {\n            v[24] = (v[24] ^ this._length[1]) >>> 0;\n            v[25] = (v[25] ^ this._length[0]) >>> 0;\n            v[26] = (v[26] ^ this._length[1]) >>> 0;\n            v[27] = (v[27] ^ this._length[0]) >>> 0;\n            v[28] = (v[28] ^ this._length[3]) >>> 0;\n            v[29] = (v[29] ^ this._length[2]) >>> 0;\n            v[30] = (v[30] ^ this._length[3]) >>> 0;\n            v[31] = (v[31] ^ this._length[2]) >>> 0;\n        }\n        for (i = 0; i < 16; i += 1) {\n            /* column step */\n            g(v, m, i, 0, 4, 8, 12, 0);\n            g(v, m, i, 1, 5, 9, 13, 2);\n            g(v, m, i, 2, 6, 10, 14, 4);\n            g(v, m, i, 3, 7, 11, 15, 6);\n            /* diagonal step */\n            g(v, m, i, 0, 5, 10, 15, 8);\n            g(v, m, i, 1, 6, 11, 12, 10);\n            g(v, m, i, 2, 7, 8, 13, 12);\n            g(v, m, i, 3, 4, 9, 14, 14);\n        }\n        for (i = 0; i < 16; i += 1) {\n            this._h[(i % 8) * 2] = (this._h[(i % 8) * 2] ^ v[i * 2]) >>> 0;\n            this._h[(i % 8) * 2 + 1] = (this._h[(i % 8) * 2 + 1] ^ v[i * 2 + 1]) >>> 0;\n        }\n        for (i = 0; i < 8; i += 1) {\n            this._h[i * 2] = (this._h[i * 2] ^ this._s[(i % 4) * 2]) >>> 0;\n            this._h[i * 2 + 1] = (this._h[i * 2 + 1] ^ this._s[(i % 4) * 2 + 1]) >>> 0;\n        }\n    }\n    /**\n     * Adds padding to the message as per the Blake-512 specification, ensuring\n     * the message length is a multiple of the block size.\n     */\n    _padding() {\n        const len = this._length.slice();\n        len[0] += this._blockOffset * 8;\n        lengthCarry(len);\n        const msglen = buffer__WEBPACK_IMPORTED_MODULE_6__.Buffer.alloc(16);\n        for (let i = 0; i < 4; i += 1)\n            msglen.writeUInt32BE(len[3 - i], i * 4);\n        if (this._blockOffset === 111) {\n            this._length[0] -= 8;\n            this.update(this._oo);\n        }\n        else {\n            if (this._blockOffset < 111) {\n                if (this._blockOffset === 0)\n                    this._nullt = true;\n                this._length[0] -= (111 - this._blockOffset) * 8;\n                this.update(padding.subarray(0, 111 - this._blockOffset));\n            }\n            else {\n                this._length[0] -= (128 - this._blockOffset) * 8;\n                this.update(padding.subarray(0, 128 - this._blockOffset));\n                this._length[0] -= 111 * 8;\n                this.update(padding.subarray(1, 1 + 111));\n                this._nullt = true;\n            }\n            this.update(this._zo);\n            this._length[0] -= 8;\n        }\n        this._length[0] -= 128;\n        this.update(msglen);\n    }\n    /**\n     * Completes the hash computation and returns the final hash value.\n     * This method applies the necessary padding, performs the final compression,\n     * and returns the hash output.\n     * @returns The Blake-512 hash of the input data.\n     */\n    digest() {\n        this._padding();\n        const buffer = buffer__WEBPACK_IMPORTED_MODULE_6__.Buffer.alloc(64);\n        for (let i = 0; i < 16; i += 1)\n            buffer.writeUInt32BE(this._h[i], i * 4);\n        return buffer;\n    }\n    /**\n     * Updates the hash with new data. This method can be called multiple\n     * times to incrementally add data to the hash computation.\n     * @param data The data to add to the hash.\n     * @returns This instance, to allow method chaining.\n     */\n    update(data) {\n        const block = this._block;\n        let offset = 0;\n        while (this._blockOffset + data.length - offset >= block.length) {\n            for (let i = this._blockOffset; i < block.length;)\n                /* eslint-disable no-plusplus */\n                block[i++] = data[offset++];\n            this._length[0] += block.length * 8;\n            lengthCarry(this._length);\n            this._compress();\n            this._blockOffset = 0;\n        }\n        while (offset < data.length)\n            /* eslint-disable no-plusplus */\n            block[this._blockOffset++] = data[offset++];\n        return this;\n    }\n}\n\n/**\n * Prunes a buffer to meet the specific requirements for using it as a private key\n * or part of a signature.\n * @param buff The buffer to be pruned.\n * @returns The pruned buffer.\n */\nfunction pruneBuffer(buff) {\n    buff[0] &= 0xf8;\n    buff[31] &= 0x7f;\n    buff[31] |= 0x40;\n    return buff;\n}\n/**\n * Validates if the given object is a valid point on the Baby Jubjub elliptic curve.\n * @param point The point to validate.\n * @returns True if the object is a valid point, false otherwise.\n */\nfunction isPoint(point) {\n    return (0,_zk_kit_utils_type_checks__WEBPACK_IMPORTED_MODULE_8__.isArray)(point) && point.length === 2 && (0,_zk_kit_utils_type_checks__WEBPACK_IMPORTED_MODULE_8__.isBigNumber)(point[0]) && (0,_zk_kit_utils_type_checks__WEBPACK_IMPORTED_MODULE_8__.isBigNumber)(point[1]);\n}\n/**\n * Checks if the provided object conforms to the expected format of a Signature.\n * @param signature The signature to validate.\n * @returns True if the object is a valid Signature, false otherwise.\n */\nfunction isSignature(signature) {\n    return ((0,_zk_kit_utils_type_checks__WEBPACK_IMPORTED_MODULE_8__.isObject)(signature) &&\n        Object.prototype.hasOwnProperty.call(signature, \"R8\") &&\n        Object.prototype.hasOwnProperty.call(signature, \"S\") &&\n        isPoint(signature.R8) &&\n        (0,_zk_kit_utils_type_checks__WEBPACK_IMPORTED_MODULE_8__.isBigNumber)(signature.S));\n}\n/**\n * Validates and converts a BigNumberish private key to a Buffer.\n * @param privateKey The private key to check and convert.\n * @returns The private key as a Buffer.\n */\nfunction checkPrivateKey(privateKey) {\n    (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_3__.requireTypes)(privateKey, \"privateKey\", [\"Buffer\", \"Uint8Array\", \"string\"]);\n    return buffer__WEBPACK_IMPORTED_MODULE_6__.Buffer.from(privateKey);\n}\n/**\n * Validates and converts a BigNumberish message to a bigint.\n * @param message The message to check and convert.\n * @returns The message as a bigint.\n */\nfunction checkMessage(message) {\n    (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_3__.requireTypes)(message, \"message\", [\"bignumberish\", \"string\"]);\n    if ((0,_zk_kit_utils_type_checks__WEBPACK_IMPORTED_MODULE_8__.isBigNumberish)(message)) {\n        return (0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__.bigNumberishToBigInt)(message);\n    }\n    return (0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__.bufferToBigInt)(buffer__WEBPACK_IMPORTED_MODULE_6__.Buffer.from(message));\n}\n/**\n * Computes the Blake512 hash of the input message.\n * Blake512 is a cryptographic hash function that produces a hash value of 512 bits,\n * commonly used for data integrity checks and other cryptographic applications.\n * @param message The input data to hash, provided as a Buffer.\n * @returns A Buffer containing the 512-bit hash result.\n */\nfunction hash(message) {\n    const engine = new Blake512();\n    engine.update(buffer__WEBPACK_IMPORTED_MODULE_6__.Buffer.from(message));\n    return engine.digest();\n}\n\n/**\n * Derives a secret scalar from a given EdDSA private key.\n *\n * This process involves hashing the private key with Blake1, pruning the resulting hash to retain the lower 32 bytes,\n * and converting it into a little-endian integer. The use of the secret scalar streamlines the public key generation\n * process by omitting steps 1, 2, and 3 as outlined in RFC 8032 section 5.1.5, enhancing circuit efficiency and simplicity.\n * This method is crucial for fixed-base scalar multiplication operations within the correspondent cryptographic circuit.\n * For detailed steps, see: {@link https://datatracker.ietf.org/doc/html/rfc8032#section-5.1.5}.\n * For example usage in a circuit, see: {@link https://github.com/semaphore-protocol/semaphore/blob/2c144fc9e55b30ad09474aeafa763c4115338409/packages/circuits/semaphore.circom#L21}\n *\n * The private key must be an instance of Buffer, Uint8Array or a string. The input will be used to\n * generate entropy and there is no limit in size.\n * The string is used as a set of raw bytes (in UTF-8) and is typically used to pass passwords or secret messages.\n * If you want to pass a bigint, a number or a hexadecimal, be sure to convert them to one of the supported types first.\n * The 'conversions' module in @zk-kit/utils provides a set of functions that may be useful in case you need to convert types.\n *\n * @param privateKey The EdDSA private key for generating the associated public key.\n * @returns The derived secret scalar to be used to calculate public key and optimized for circuit calculations.\n */\nfunction deriveSecretScalar(privateKey) {\n    // Convert the private key to buffer.\n    privateKey = checkPrivateKey(privateKey);\n    let hash$1 = hash(privateKey);\n    hash$1 = hash$1.slice(0, 32);\n    hash$1 = pruneBuffer(hash$1);\n    return _zk_kit_utils_scalar__WEBPACK_IMPORTED_MODULE_5__.shiftRight((0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__.leBufferToBigInt)(hash$1), BigInt(3)) % _zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.subOrder;\n}\n/**\n * Derives a public key from a given private key using the\n * {@link https://eips.ethereum.org/EIPS/eip-2494|Baby Jubjub} elliptic curve.\n * This function utilizes the Baby Jubjub elliptic curve for cryptographic operations.\n * The private key should be securely stored and managed, and it should never be exposed\n * or transmitted in an unsecured manner.\n *\n * The private key must be an instance of Buffer, Uint8Array or a string. The input will be used to\n * generate entropy and there is no limit in size.\n * The string is used as a set of raw bytes (in UTF-8) and is typically used to pass passwords or secret messages.\n * If you want to pass a bigint, a number or a hexadecimal, be sure to convert them to one of the supported types first.\n * The 'conversions' module in @zk-kit/utils provides a set of functions that may be useful in case you need to convert types.\n *\n * @param privateKey The private key used for generating the public key.\n * @returns The derived public key.\n */\nfunction derivePublicKey(privateKey) {\n    const s = deriveSecretScalar(privateKey);\n    return (0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.mulPointEscalar)(_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.Base8, s);\n}\n/**\n * Signs a message using the provided private key, employing Poseidon hashing and\n * EdDSA with the Baby Jubjub elliptic curve.\n *\n * The private key must be an instance of Buffer, Uint8Array or a string. The input will be used to\n * generate entropy and there is no limit in size.\n * The string is used as a set of raw bytes (in UTF-8) and is typically used to pass passwords or secret messages.\n * If you want to pass a bigint, a number or a hexadecimal, be sure to convert them to one of the supported types first.\n * The 'conversions' module in @zk-kit/utils provides a set of functions that may be useful in case you need to convert types.\n *\n * @param privateKey The private key used to sign the message.\n * @param message The message to be signed.\n * @returns The signature object, containing properties relevant to EdDSA signatures, such as 'R8' and 'S' values.\n */\nfunction signMessage(privateKey, message) {\n    // Convert the private key to buffer.\n    privateKey = checkPrivateKey(privateKey);\n    // Convert the message to big integer.\n    message = checkMessage(message);\n    const hash$1 = hash(privateKey);\n    const sBuff = pruneBuffer(hash$1.slice(0, 32));\n    const s = (0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__.leBufferToBigInt)(sBuff);\n    const A = (0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.mulPointEscalar)(_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.Base8, _zk_kit_utils_scalar__WEBPACK_IMPORTED_MODULE_5__.shiftRight(s, BigInt(3)));\n    const msgBuff = (0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__.leBigIntToBuffer)(message, 32);\n    const rBuff = hash(buffer__WEBPACK_IMPORTED_MODULE_6__.Buffer.concat([hash$1.slice(32, 64), msgBuff]));\n    const Fr = new _zk_kit_utils_f1_field__WEBPACK_IMPORTED_MODULE_4__[\"default\"](_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.subOrder);\n    const r = Fr.e((0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__.leBufferToBigInt)(rBuff));\n    const R8 = (0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.mulPointEscalar)(_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.Base8, r);\n    const hm = (0,poseidon_lite_poseidon5__WEBPACK_IMPORTED_MODULE_7__.poseidon5)([R8[0], R8[1], A[0], A[1], message]);\n    const S = Fr.add(r, Fr.mul(hm, s));\n    return { R8, S };\n}\n/**\n * Verifies an EdDSA signature using the Baby Jubjub elliptic curve and Poseidon hash function.\n * @param message The original message that was be signed.\n * @param signature The EdDSA signature to be verified.\n * @param publicKey The public key associated with the private key used to sign the message.\n * @returns Returns true if the signature is valid and corresponds to the message and public key, false otherwise.\n */\nfunction verifySignature(message, signature, publicKey) {\n    if (!isPoint(publicKey) ||\n        !isSignature(signature) ||\n        !(0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.inCurve)(signature.R8) ||\n        !(0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.inCurve)(publicKey) ||\n        BigInt(signature.S) >= _zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.subOrder) {\n        return false;\n    }\n    // Convert the message to big integer.\n    message = checkMessage(message);\n    // Convert the signature values to big integers for calculations.\n    const _signature = {\n        R8: [BigInt(signature.R8[0]), BigInt(signature.R8[1])],\n        S: BigInt(signature.S)\n    };\n    // Convert the public key values to big integers for calculations.\n    const _publicKey = [BigInt(publicKey[0]), BigInt(publicKey[1])];\n    const hm = (0,poseidon_lite_poseidon5__WEBPACK_IMPORTED_MODULE_7__.poseidon5)([signature.R8[0], signature.R8[1], publicKey[0], publicKey[1], message]);\n    const pLeft = (0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.mulPointEscalar)(_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.Base8, BigInt(signature.S));\n    let pRight = (0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.mulPointEscalar)(_publicKey, _zk_kit_utils_scalar__WEBPACK_IMPORTED_MODULE_5__.mul(hm, BigInt(8)));\n    pRight = (0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.addPoint)(_signature.R8, pRight);\n    // Return true if the points match.\n    return _zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.Fr.eq(pLeft[0], pRight[0]) && _zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.Fr.eq(pLeft[1], pRight[1]);\n}\n/**\n * Converts a given public key into a packed (compressed) string format for efficient transmission and storage.\n * This method ensures the public key is valid and within the Baby Jubjub curve before packing.\n * @param publicKey The public key to be packed.\n * @returns A string representation of the packed public key.\n */\nfunction packPublicKey(publicKey) {\n    if (!isPoint(publicKey) || !(0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.inCurve)(publicKey)) {\n        throw new Error(\"Invalid public key\");\n    }\n    // Convert the public key values to big integers for calculations.\n    const _publicKey = [BigInt(publicKey[0]), BigInt(publicKey[1])];\n    return (0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.packPoint)(_publicKey);\n}\n/**\n * Unpacks a public key from its packed string representation back to its original point form on the Baby Jubjub curve.\n * This function checks for the validity of the input format before attempting to unpack.\n * @param publicKey The packed public key as a bignumberish.\n * @returns The unpacked public key as a point.\n */\nfunction unpackPublicKey(publicKey) {\n    (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_3__.requireBigNumberish)(publicKey, \"publicKey\");\n    const unpackedPublicKey = (0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.unpackPoint)((0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__.bigNumberishToBigInt)(publicKey));\n    if (unpackedPublicKey === null) {\n        throw new Error(\"Invalid public key\");\n    }\n    return unpackedPublicKey;\n}\n/**\n * Packs an EdDSA signature into a buffer of 64 bytes for efficient storage.\n * Use {@link unpackSignature} to reverse the process without needing to know\n * the details of the format.\n *\n * The buffer contains the R8 point packed int 32 bytes (via\n * {@link packSignature}) followed by the S scalar.  All encodings are\n * little-endian.\n *\n * @param signature the signature to pack\n * @returns a 64 byte buffer containing the packed signature\n */\nfunction packSignature(signature) {\n    if (!isSignature(signature) || !(0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.inCurve)(signature.R8) || BigInt(signature.S) >= _zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.subOrder) {\n        throw new Error(\"Invalid signature\");\n    }\n    const numericSignature = {\n        R8: signature.R8.map((c) => BigInt(c)),\n        S: BigInt(signature.S)\n    };\n    const packedR8 = (0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.packPoint)(numericSignature.R8);\n    const packedBytes = buffer__WEBPACK_IMPORTED_MODULE_6__.Buffer.alloc(64);\n    packedBytes.set((0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__.leBigIntToBuffer)(packedR8, 32), 0);\n    packedBytes.set((0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__.leBigIntToBuffer)(numericSignature.S, 32), 32);\n    return packedBytes;\n}\n/**\n * Unpacks a signature produced by {@link packSignature}.  See that function\n * for the details of the format.\n *\n * @param packedSignature the 64 byte buffer to unpack\n * @returns a Signature with numbers in string form\n */\nfunction unpackSignature(packedSignature) {\n    (0,_zk_kit_utils__WEBPACK_IMPORTED_MODULE_1__.requireBuffer)(packedSignature, \"packedSignature\");\n    if (packedSignature.length !== 64) {\n        throw new Error(\"Packed signature must be 64 bytes\");\n    }\n    const sliceR8 = packedSignature.subarray(0, 32);\n    const sliceS = packedSignature.subarray(32, 64);\n    const unpackedR8 = (0,_zk_kit_baby_jubjub__WEBPACK_IMPORTED_MODULE_0__.unpackPoint)((0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__.leBufferToBigInt)(sliceR8));\n    if (unpackedR8 === null) {\n        throw new Error(`Invalid packed signature point ${sliceS.toString(\"hex\")}.`);\n    }\n    return {\n        R8: unpackedR8,\n        S: (0,_zk_kit_utils_conversions__WEBPACK_IMPORTED_MODULE_2__.leBufferToBigInt)(sliceS)\n    };\n}\n/**\n * Represents a cryptographic entity capable of signing messages and verifying signatures\n * using the EdDSA scheme with Poseidon hash and the Baby Jubjub elliptic curve.\n */\nclass EdDSAPoseidon {\n    /**\n     * Initializes a new instance, deriving necessary cryptographic parameters from the provided private key.\n     * If the private key is not passed as a parameter, a random 32-byte hexadecimal key is generated.\n     *\n     * The private key must be an instance of Buffer, Uint8Array or a string. The input will be used to\n     * generate entropy and there is no limit in size.\n     * The string is used as a set of raw bytes (in UTF-8) and is typically used to pass passwords or secret messages.\n     * If you want to pass a bigint, a number or a hexadecimal, be sure to convert them to one of the supported types first.\n     * The 'conversions' module in @zk-kit/utils provides a set of functions that may be useful in case you need to convert types.\n     *\n     * @param privateKey The private key used for signing and public key derivation.\n     */\n    constructor(privateKey = _zk_kit_utils__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues(32)) {\n        this.privateKey = privateKey;\n        this.secretScalar = deriveSecretScalar(privateKey);\n        this.publicKey = derivePublicKey(privateKey);\n        this.packedPublicKey = packPublicKey(this.publicKey);\n    }\n    /**\n     * Signs a given message using the private key and returns the signature.\n     * @param message The message to be signed.\n     * @returns The signature of the message.\n     */\n    signMessage(message) {\n        return signMessage(this.privateKey, message);\n    }\n    /**\n     * Verifies a signature against a message and the public key stored in this instance.\n     * @param message The message whose signature is to be verified.\n     * @param signature The signature to be verified.\n     * @returns True if the signature is valid for the message and public key, false otherwise.\n     */\n    verifySignature(message, signature) {\n        return verifySignature(message, signature, this.publicKey);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/eddsa-poseidon/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/index.node.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/index.node.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Buffer: () => (/* reexport safe */ buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer),\n/* harmony export */   F1Field: () => (/* binding */ F1Field),\n/* harmony export */   base64ToBuffer: () => (/* binding */ base64ToBuffer),\n/* harmony export */   base64ToText: () => (/* binding */ base64ToText),\n/* harmony export */   beBigIntToBuffer: () => (/* binding */ beBigIntToBuffer),\n/* harmony export */   beBufferToBigInt: () => (/* binding */ beBufferToBigInt),\n/* harmony export */   bigIntToBuffer: () => (/* binding */ bigIntToBuffer),\n/* harmony export */   bigIntToHexadecimal: () => (/* binding */ bigIntToHexadecimal),\n/* harmony export */   bigNumberishToBigInt: () => (/* binding */ bigNumberishToBigInt),\n/* harmony export */   bigNumberishToBuffer: () => (/* binding */ bigNumberishToBuffer),\n/* harmony export */   bufferToBase64: () => (/* binding */ bufferToBase64),\n/* harmony export */   bufferToBigInt: () => (/* binding */ bufferToBigInt),\n/* harmony export */   bufferToHexadecimal: () => (/* binding */ bufferToHexadecimal),\n/* harmony export */   conversions: () => (/* binding */ conversions),\n/* harmony export */   crypto: () => (/* binding */ crypto_node),\n/* harmony export */   errorHandlers: () => (/* binding */ errorHandlers),\n/* harmony export */   hexadecimalToBigInt: () => (/* binding */ hexadecimalToBigInt),\n/* harmony export */   hexadecimalToBuffer: () => (/* binding */ hexadecimalToBuffer),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBigInt: () => (/* binding */ isBigInt),\n/* harmony export */   isBigNumber: () => (/* binding */ isBigNumber),\n/* harmony export */   isBigNumberish: () => (/* binding */ isBigNumberish),\n/* harmony export */   isBuffer: () => (/* binding */ isBuffer),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isHexadecimal: () => (/* binding */ isHexadecimal),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isStringifiedBigInt: () => (/* binding */ isStringifiedBigInt),\n/* harmony export */   isSupportedType: () => (/* binding */ isSupportedType),\n/* harmony export */   isType: () => (/* binding */ isType),\n/* harmony export */   isUint8Array: () => (/* binding */ isUint8Array),\n/* harmony export */   leBigIntToBuffer: () => (/* binding */ leBigIntToBuffer),\n/* harmony export */   leBufferToBigInt: () => (/* binding */ leBufferToBigInt),\n/* harmony export */   packGroth16Proof: () => (/* binding */ packGroth16Proof),\n/* harmony export */   packing: () => (/* binding */ proofPacking),\n/* harmony export */   requireArray: () => (/* binding */ requireArray),\n/* harmony export */   requireBigInt: () => (/* binding */ requireBigInt),\n/* harmony export */   requireBigNumber: () => (/* binding */ requireBigNumber),\n/* harmony export */   requireBigNumberish: () => (/* binding */ requireBigNumberish),\n/* harmony export */   requireBuffer: () => (/* binding */ requireBuffer),\n/* harmony export */   requireDefined: () => (/* binding */ requireDefined),\n/* harmony export */   requireFunction: () => (/* binding */ requireFunction),\n/* harmony export */   requireHexadecimal: () => (/* binding */ requireHexadecimal),\n/* harmony export */   requireNumber: () => (/* binding */ requireNumber),\n/* harmony export */   requireObject: () => (/* binding */ requireObject),\n/* harmony export */   requireString: () => (/* binding */ requireString),\n/* harmony export */   requireStringifiedBigInt: () => (/* binding */ requireStringifiedBigInt),\n/* harmony export */   requireTypes: () => (/* binding */ requireTypes),\n/* harmony export */   requireUint8Array: () => (/* binding */ requireUint8Array),\n/* harmony export */   scalar: () => (/* binding */ scalar),\n/* harmony export */   supportedTypes: () => (/* binding */ supportedTypes),\n/* harmony export */   textToBase64: () => (/* binding */ textToBase64),\n/* harmony export */   typeChecks: () => (/* binding */ typeChecks),\n/* harmony export */   unpackGroth16Proof: () => (/* binding */ unpackGroth16Proof)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * @module @zk-kit/utils\n * @version 1.2.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n\n\n/**\n * @module TypeChecks\n * This module provides utility functions to check data types.\n * It defines a set of supported types and includes functions to check if\n * a value is defined and if it matches a supported type. These functions\n * are useful for type checking and validation in the other libraries,\n * enhancing code robustness and reliability.\n */\n/** @internal */\nconst supportedTypes = [\n    \"number\",\n    \"string\",\n    \"function\",\n    \"Array\",\n    \"Uint8Array\",\n    \"Buffer\",\n    \"object\",\n    \"bigint\",\n    \"stringified-bigint\",\n    \"hexadecimal\",\n    \"bignumber\",\n    \"bignumberish\"\n];\n/**\n * Returns true if the value is defined, false otherwise.\n * @param value The value to be checked.\n */\nfunction isDefined(value) {\n    return typeof value !== \"undefined\";\n}\n/**\n * Returns true if the value is a number, false otherwise.\n * @param value The value to be checked.\n */\nfunction isNumber(value) {\n    return typeof value === \"number\";\n}\n/**\n * Returns true if the value is a string, false otherwise.\n * @param value The value to be checked.\n */\nfunction isString(value) {\n    return typeof value === \"string\";\n}\n/**\n * Returns true if the value is a function, false otherwise.\n * @param value The value to be checked.\n */\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\n/**\n * Returns true if the value is an object, false otherwise.\n * Please, note that arrays are also objects in JavaScript.\n * @param value The value to be checked.\n */\nfunction isObject(value) {\n    return typeof value === \"object\";\n}\n/**\n * Returns true if the value is an Array instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isArray(value) {\n    return isObject(value) && Array.isArray(value);\n}\n/**\n * Returns true if the value is a Uint8Array instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isUint8Array(value) {\n    return value instanceof Uint8Array;\n}\n/**\n * Returns true if the value is a Buffer instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBuffer(value) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(value);\n}\n/**\n * Returns true if the value is a bigint, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBigInt(value) {\n    return typeof value === \"bigint\";\n}\n/**\n * Checks if the given value is a string that represents a valid bigint.\n * @param value The value to be checked if it's a stringified bigint.\n */\nfunction isStringifiedBigInt(value) {\n    // Check if value is a string first.\n    if (!isString(value)) {\n        return false;\n    }\n    try {\n        // Attempt to convert the string to BigInt.\n        BigInt(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Checks if a string is a valid hexadecimal string representation.\n * If 'prefix' is 'true', the string must start with '0x' or '0X' followed by one or more\n * hexadecimal digits (0-9, a-f, A-F), otherwise no prefix is expected. 'prefix' is optional and\n * if its value it is not explicitly defined it will be set to 'true' by default.\n * @param value The string to be tested.\n * @param prefix A boolean to include or not a '0x' or '0X' prefix.\n */\nfunction isHexadecimal(value, prefix = true) {\n    if (!isString(value)) {\n        return false;\n    }\n    if (prefix) {\n        return /^(0x|0X)[0-9a-fA-F]+$/.test(value);\n    }\n    return /^[0-9a-fA-F]+$/.test(value);\n}\n/**\n * Checks if the given value can be considered as BigNumber.\n * A value is considered a BigNumber if it is a bigint or a string\n * that can be converted to a bigint (via `Bigint(s)`).\n * @param value The value to check.\n */\nfunction isBigNumber(value) {\n    return isBigInt(value) || isStringifiedBigInt(value);\n}\n/**\n * Checks if the given value can be considered as BigNumberish.\n * A value is considered BigNumberish if it meets\n * any of the following conditions: it's a number, a bigint, a string\n * that can be converted to a bigint, a hexadecimal\n * string, or a Buffer object.\n * @param value The value to check.\n */\nfunction isBigNumberish(value) {\n    return (isNumber(value) ||\n        isBigInt(value) ||\n        isStringifiedBigInt(value) ||\n        isHexadecimal(value) ||\n        isBuffer(value) ||\n        isUint8Array(value));\n}\n/**\n * Returns true if the value type is the same as the type passed\n * as the second parameter, false otherwise.\n * @param value\n * @param type The expected type.\n */\nfunction isType(value, type) {\n    switch (type) {\n        case \"number\":\n            return isNumber(value);\n        case \"string\":\n            return isString(value);\n        case \"function\":\n            return isFunction(value);\n        case \"Array\":\n            return isArray(value);\n        case \"Uint8Array\":\n            return isUint8Array(value);\n        case \"Buffer\":\n            return isBuffer(value);\n        case \"object\":\n            return isObject(value);\n        case \"bigint\":\n            return isBigInt(value);\n        case \"stringified-bigint\":\n            return isStringifiedBigInt(value);\n        case \"hexadecimal\":\n            return isHexadecimal(value);\n        case \"bignumber\":\n            return isBigNumber(value);\n        case \"bignumberish\":\n            return isBigNumberish(value);\n        default:\n            return false;\n    }\n}\n/**\n * Returns true if the type is being supported by this utility\n * functions, false otherwise.\n * @param type The type to be checked.\n */\nfunction isSupportedType(type) {\n    return supportedTypes.includes(type);\n}\n\nvar typeChecks = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    isArray: isArray,\n    isBigInt: isBigInt,\n    isBigNumber: isBigNumber,\n    isBigNumberish: isBigNumberish,\n    isBuffer: isBuffer,\n    isDefined: isDefined,\n    isFunction: isFunction,\n    isHexadecimal: isHexadecimal,\n    isNumber: isNumber,\n    isObject: isObject,\n    isString: isString,\n    isStringifiedBigInt: isStringifiedBigInt,\n    isSupportedType: isSupportedType,\n    isType: isType,\n    isUint8Array: isUint8Array,\n    supportedTypes: supportedTypes\n});\n\n/**\n * @module ErrorHandlers\n * This module is designed to provide utility functions for validating\n * function parameters. It includes functions that throw type errors if\n * the parameters do not meet specified criteria, such as being defined,\n * a number, a string, a function, or an array. This module helps ensure\n * that functions receive the correct types of inputs, enhancing code\n * reliability and reducing runtime errors.\n */\n/**\n * @throws Throws a type error if the parameter value has not been defined.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireDefined(parameterValue, parameterName) {\n    if (!isDefined(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not defined`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a number.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireNumber(parameterValue, parameterName) {\n    if (!isNumber(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a number, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a string.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireString(parameterValue, parameterName) {\n    if (!isString(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a string, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a function.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireFunction(parameterValue, parameterName) {\n    if (!isFunction(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a function, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not an Array.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireArray(parameterValue, parameterName) {\n    if (!isArray(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not an Array instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a Uint8Array.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireUint8Array(parameterValue, parameterName) {\n    if (!isUint8Array(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a Uint8Array instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a Buffer.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBuffer(parameterValue, parameterName) {\n    if (!isBuffer(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a Buffer instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not an object.\n * Please, note that arrays are also objects in JavaScript.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireObject(parameterValue, parameterName) {\n    if (!isObject(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not an object, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bigint.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigInt(parameterValue, parameterName) {\n    if (!isBigInt(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bigint, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a stringified bigint.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireStringifiedBigInt(parameterValue, parameterName) {\n    if (!isStringifiedBigInt(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a stringified bigint`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a hexadecimal string.\n * If 'prefix' is 'true', the string must start with '0x' or '0X' followed by one or more\n * hexadecimal digits (0-9, a-f, A-F), otherwise no prefix is expected. 'prefix' is optional and\n * if its value it is not explicitly defined it will be set to 'true' by default.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n * @param prefix A boolean to include or not a '0x' or '0X' prefix.\n */\nfunction requireHexadecimal(parameterValue, parameterName, prefix = true) {\n    if (!isHexadecimal(parameterValue, prefix)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a hexadecimal string`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bignumber.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigNumber(parameterValue, parameterName) {\n    if (!isBigNumber(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bignumber`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bignumber-ish.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigNumberish(parameterValue, parameterName) {\n    if (!isBigNumberish(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bignumber-ish`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value type is not part of the list of types.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireTypes(parameterValue, parameterName, types) {\n    for (const type of types) {\n        if (!isSupportedType(type)) {\n            throw new Error(`Type '${type}' is not supported`);\n        }\n    }\n    for (const type of types) {\n        if (isType(parameterValue, type)) {\n            return;\n        }\n    }\n    throw new TypeError(`Parameter '${parameterName}' is none of the following types: ${types.join(\", \")}`);\n}\n\nvar errorHandlers = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    requireArray: requireArray,\n    requireBigInt: requireBigInt,\n    requireBigNumber: requireBigNumber,\n    requireBigNumberish: requireBigNumberish,\n    requireBuffer: requireBuffer,\n    requireDefined: requireDefined,\n    requireFunction: requireFunction,\n    requireHexadecimal: requireHexadecimal,\n    requireNumber: requireNumber,\n    requireObject: requireObject,\n    requireString: requireString,\n    requireStringifiedBigInt: requireStringifiedBigInt,\n    requireTypes: requireTypes,\n    requireUint8Array: requireUint8Array\n});\n\n/**\n * @module Conversions\n * This module provides a collection of utility functions for converting\n * between different numerical formats, particularly focusing on\n * conversions involving bigints, hexadecimals and buffers.\n * The module is structured with clear function naming to indicate\n * the conversion direction (e.g., `bigIntToHexadecimal` for BigInt\n * to hexadecimal, `bufferToBigInt` for buffer to bigint) and employs\n * type checks to ensure the correct handling of various input types.\n * It also includes variations for both big-endian (`be`) and little-endian\n * (`le`) conversions. It is important to note that when there is no prefix,\n * the order of bytes is always big-endian.\n */\n/**\n * Converts a bigint to a hexadecimal string.\n * @param value The bigint value to convert.\n * @returns The hexadecimal representation of the bigint.\n */\nfunction bigIntToHexadecimal(value) {\n    requireBigInt(value, \"value\");\n    let hex = value.toString(16);\n    // Ensure even length.\n    if (hex.length % 2 !== 0) {\n        hex = `0${hex}`;\n    }\n    return hex;\n}\n/**\n * Converts a hexadecimal string to a bigint. The input is interpreted as hexadecimal\n * with or without a '0x' prefix. It uses big-endian byte order.\n * @param value The hexadecimal string to convert.\n * @returns The bigint representation of the hexadecimal string.\n */\nfunction hexadecimalToBigInt(value) {\n    if (!isHexadecimal(value) && !isHexadecimal(value, false)) {\n        throw new TypeError(`Parameter 'value' is not a hexadecimal string`);\n    }\n    // Ensure the hex string starts with '0x'.\n    const formattedHexString = value.startsWith(\"0x\") ? value : `0x${value}`;\n    return BigInt(formattedHexString);\n}\n/**\n * Converts a buffer of bytes to a bigint using big-endian byte order.\n * It accepts 'Buffer' or 'Uint8Array'.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents.\n */\nfunction beBufferToBigInt(value) {\n    requireTypes(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return BigInt(`0x${buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"hex\")}`);\n}\n/**\n * Converts a buffer to a bigint using little-endian byte order.\n * It accepts 'Buffer' or 'Uint8Array'.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents in little-endian.\n */\nfunction leBufferToBigInt(value) {\n    requireTypes(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return BigInt(`0x${buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).reverse().toString(\"hex\")}`);\n}\n/**\n * Converts a buffer to a bigint. Alias for beBufferToBigInt.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents.\n */\nfunction bufferToBigInt(value) {\n    return beBufferToBigInt(value);\n}\n/**\n * Converts a bigint to a buffer and fills with zeros if a valid\n * size (i.e. number of bytes) is specified. If the size is not defined,\n * it gets the size from the given bigint. If the specified size is smaller than\n * the size of the bigint (i.e. `minSize`), an error is thrown.\n * It uses big-endian byte order.\n * @param value The bigint to convert.\n * @param size The number of bytes of the buffer to return.\n * @returns The buffer representation of the bigint.\n */\nfunction beBigIntToBuffer(value, size) {\n    const hex = bigIntToHexadecimal(value);\n    // Calculate the minimum buffer size required to represent 'n' in bytes.\n    // Each hexadecimal character represents 4 bits, so 2 characters are 1 byte.\n    const minSize = Math.ceil(hex.length / 2);\n    if (!size) {\n        size = minSize;\n    }\n    else if (size < minSize) {\n        throw Error(`Size ${size} is too small, need at least ${minSize} bytes`);\n    }\n    // Allocate buffer of the desired size, filled with zeros.\n    const buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(size, 0);\n    const fromHex = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex, \"hex\");\n    fromHex.copy(buffer, size - fromHex.length);\n    return buffer;\n}\n/**\n * Converts a bigint to a buffer and fills with zeros if a valid\n * size (i.e. number of bytes) is specified. If the size is not defined,\n * it gets the size from the given bigint. If the specified size is smaller than\n * the size of the bigint (i.e. `minSize`), an error is thrown.\n * It uses little-endian byte order.\n * @param value The bigint to convert.\n * @param size The number of bytes of the buffer to return.\n * @returns The buffer representation of the bigint in little-endian.\n */\nfunction leBigIntToBuffer(value, size) {\n    const hex = bigIntToHexadecimal(value);\n    // Calculate the minimum buffer size required to represent 'n' in bytes.\n    // Each hexadecimal character represents 4 bits, so 2 characters are 1 byte.\n    const minSize = Math.ceil(hex.length / 2);\n    if (!size) {\n        size = minSize;\n    }\n    else if (size < minSize) {\n        throw Error(`Size ${size} is too small, need at least ${minSize} bytes`);\n    }\n    // Allocate buffer of the desired size, filled with zeros.\n    const buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(size, 0);\n    const fromHex = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex, \"hex\").reverse();\n    fromHex.copy(buffer, 0);\n    return buffer;\n}\n/**\n * Converts a bigint to a buffer. Alias for beBigIntToBuffer.\n * @param value The bigint to convert.\n * @returns The buffer representation of the bigint.\n */\nfunction bigIntToBuffer(value) {\n    return beBigIntToBuffer(value);\n}\n/**\n * Converts a BigNumberish type to a bigint. If the input is already a bigint,\n * the return value will be the bigint itself, otherwise it will be converted\n * to a bigint using big-endian byte order.\n * @param value The BigNumberish value to convert.\n * @returns The bigint representation of the BigNumberish value.\n */\nfunction bigNumberishToBigInt(value) {\n    requireBigNumberish(value, \"value\");\n    if (isBuffer(value) || isUint8Array(value)) {\n        return bufferToBigInt(value);\n    }\n    return BigInt(value);\n}\n/**\n * Converts a BigNumberish type to a buffer. If the input is already a buffer,\n * the return value will be the buffer itself, otherwise it will be converted\n * to a buffer using big-endian byte order.\n * @param value The BigNumberish value to convert.\n * @returns The buffer representation of the BigNumberish value.\n */\nfunction bigNumberishToBuffer(value) {\n    requireBigNumberish(value, \"value\");\n    if (isBuffer(value) || isUint8Array(value)) {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value);\n    }\n    return bigIntToBuffer(bigNumberishToBigInt(value));\n}\n/**\n * Converts an hexadecimal string to a buffer. The hexadecimal string\n * should not start with '0x' or '0X'. It keeps the bytes in the same order.\n * @param value The hexadecimal string to convert.\n * @returns The buffer representation of the hexadecimal string.\n */\nfunction hexadecimalToBuffer(value) {\n    requireHexadecimal(value, \"value\", false);\n    // Ensure even length before converting to buffer.\n    if (value.length % 2 !== 0) {\n        value = `0${value}`;\n    }\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"hex\");\n}\n/**\n * Converts a buffer to a hexadecimal string. It accepts 'Buffer' or 'Uint8Array'.\n * The hexadecimal string will not start with '0x' or '0X'. It keeps the bytes in the same order.\n * @param value The buffer to convert.\n * @returns The converted hexadecimal string.\n */\nfunction bufferToHexadecimal(value) {\n    requireTypes(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"hex\");\n}\n/**\n * Converts bytes to a base64 string. It accepts 'Buffer' or 'Uint8Array'.\n * @param value The bytes to convert.\n * @returns The converted base64 string.\n */\nfunction bufferToBase64(value) {\n    requireTypes(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"base64\");\n}\n/**\n * Converts a base64 string to bytes (i.e. a buffer). This function does not check\n * if the input value is a valid base64 string. If there are unsupported characters\n * they will be ignored.\n * @param value The base64 string to convert.\n * @returns The converted buffer.\n */\nfunction base64ToBuffer(value) {\n    requireString(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"base64\");\n}\n/**\n * Converts text (utf8) to a base64 string.\n * @param value The text to convert.\n * @returns The converted base64 string.\n */\nfunction textToBase64(value) {\n    requireString(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"utf8\").toString(\"base64\");\n}\n/**\n * Converts a base64 string to text (utf8). This function does not check\n * if the input value is a valid base64 string. If there are unsupported characters\n * they could be ignored and the result may be unexpected.\n * @param value The base64 string to convert.\n * @returns The converted text.\n */\nfunction base64ToText(value) {\n    requireString(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"base64\").toString(\"utf8\");\n}\n\nvar conversions = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    base64ToBuffer: base64ToBuffer,\n    base64ToText: base64ToText,\n    beBigIntToBuffer: beBigIntToBuffer,\n    beBufferToBigInt: beBufferToBigInt,\n    bigIntToBuffer: bigIntToBuffer,\n    bigIntToHexadecimal: bigIntToHexadecimal,\n    bigNumberishToBigInt: bigNumberishToBigInt,\n    bigNumberishToBuffer: bigNumberishToBuffer,\n    bufferToBase64: bufferToBase64,\n    bufferToBigInt: bufferToBigInt,\n    bufferToHexadecimal: bufferToHexadecimal,\n    hexadecimalToBigInt: hexadecimalToBigInt,\n    hexadecimalToBuffer: hexadecimalToBuffer,\n    leBigIntToBuffer: leBigIntToBuffer,\n    leBufferToBigInt: leBufferToBigInt,\n    textToBase64: textToBase64\n});\n\n/**\n * Generates a random sequence of bytes securely using Node.js's crypto module.\n * @param size The number of bytes to generate.\n * @returns A Uint8Array containing the generated random bytes.\n */\n/* eslint-disable import/prefer-default-export */\nfunction getRandomValues(size) {\n    if (size <= 0)\n        throw Error(`size ${size} is too small, need at least 1`);\n    const buffer = (0,crypto__WEBPACK_IMPORTED_MODULE_1__.randomBytes)(size);\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\n\nvar crypto_node = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getRandomValues: getRandomValues\n});\n\n/**\n * @module Scalar\n * This module provides utility functions for performing scalar operations\n * within a field, especially designed to handle operations on bigints.\n * The operations include scalar inversion (`inv`), scalar exponentiation (`pow`),\n * and modular reduction. Functions are carefully implemented to ensure\n * mathematical correctness and efficiency, supporting both positive and\n * negative bigint values. The module aims to provide robust tools for\n * cryptographic calculations and other applications requiring high-precision\n * arithmetic in fields.\n */\n/**\n * Checks if a bigint scalar value is zero.\n * @param a The bigint scalar value to check.\n * @returns True if 'a' is zero, false otherwise.\n */\nfunction isZero(a) {\n    return !a;\n}\n/**\n * Determines whether a bigint scalar value is odd.\n * @param a The bigint scalar value to check.\n * @returns True if 'a' is odd, false if it is even.\n */\nfunction isOdd(a) {\n    return (a & BigInt(1)) === BigInt(1);\n}\n/**\n * Performs a bitwise right shift on a bigint scalar value.\n * This operation is equivalent to dividing by 2^n, but it operates directly\n * on the binary representation, making it efficient for certain types of calculations.\n * @param a The bigint scalar value to shift.\n * @param n The number of bits to shift 'a' by.\n * @returns The result of shifting 'a' right by 'n' bits.\n */\nfunction shiftRight(a, n) {\n    return a >> n;\n}\n/**\n * Multiplies two bigint scalar values.\n * @param a The first bigint scalar value.\n * @param b The second bigint scalar value.\n * @returns The product of 'a' and 'b'.\n */\nfunction mul(a, b) {\n    return a * b;\n}\n/**\n * Compares two bigint scalar values to determine if the first is greater than the second.\n * @param a The first bigint scalar value to compare.\n * @param b The second bigint scalar value to compare.\n * @returns True if 'a' is greater than 'b', false otherwise.\n */\nfunction gt(a, b) {\n    return a > b;\n}\n/**\n * Converts a bigint scalar value into an array of bits, represented as numbers.\n * This function is particularly useful for examining the binary structure of bigints,\n * which can be necessary for bit manipulation and understanding the representation\n * of numbers at a lower level.\n * @param n The bigint scalar value to convert into bits.\n * @returns An array of numbers representing the bits of 'n', starting from the least significant bit.\n */\nfunction bits(n) {\n    const res = [];\n    let E = n;\n    while (E) {\n        if (E & BigInt(1)) {\n            res.push(1);\n        }\n        else {\n            res.push(0);\n        }\n        E >>= BigInt(1);\n    }\n    return res;\n}\n\nvar scalar = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    bits: bits,\n    gt: gt,\n    isOdd: isOdd,\n    isZero: isZero,\n    mul: mul,\n    shiftRight: shiftRight\n});\n\n/**\n * @class F1Field\n * Represents a finite field of order 'order' providing arithmetic operations under modulus.\n * This class includes operations such as addition, subtraction, multiplication, division,\n * and inversion, all performed modulo the field's order. It's designed to work with bigints,\n * supporting large numbers for cryptographic purposes and other applications requiring\n * modular arithmetic.\n * Note that the outputs of the functions will always be within the field if and only if\n * the input values are within the field. Devs need to make sure of that.\n *\n * @property one Represents the scalar value 1 in the field.\n * @property zero Represents the scalar value 0 in the field.\n * @property _order The order of the finite field (i.e., the modulus).\n * @property _half Half the order of the field, used for certain comparisons.\n * @property _negone The scalar value -1 in the field, represented positively.\n */\nclass F1Field {\n    constructor(order) {\n        this.one = 1n;\n        this.zero = 0n;\n        this._order = order;\n        this._half = order >> this.one;\n        this._negone = this._order - this.one;\n    }\n    /**\n     * Ensures a given result falls within the field by applying modular reduction.\n     * This method also handles negative inputs, correctly mapping them into the field.\n     * @param res The result to be normalized to the field.\n     * @returns The equivalent value within the field.\n     */\n    e(res) {\n        res %= this._order;\n        return res < 0 ? res + this._order : res;\n    }\n    /**\n     * Performs modular multiplication of two bigint values within the field.\n     * @param a The first value.\n     * @param b The second value.\n     * @returns The product of 'a' and 'b' modulo the field's order.\n     */\n    mul(a, b) {\n        return (a * b) % this._order;\n    }\n    /**\n     * Subtracts one bigint from another under modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value from which to subtract.\n     * @param b The value to be subtracted.\n     * @returns The difference of 'a' and 'b' modulo the field's order.\n     */\n    sub(a, b) {\n        return a >= b ? a - b : this._order - b + a;\n    }\n    /**\n     * Adds two bigint values together under modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value.\n     * @param b The second value.\n     * @returns The sum of 'a' and 'b' modulo the field's order.\n     */\n    add(a, b) {\n        const res = a + b;\n        return res >= this._order ? res - this._order : res;\n    }\n    /**\n     * Computes the multiplicative inverse of a given value within the field.\n     * This method uses the Extended Euclidean Algorithm to find the inverse,\n     * ensuring the result is always a positive value less than the field's order.\n     * If the input value is zero, which has no inverse, an error is thrown.\n     * @param a The value for which to compute the inverse.\n     * @returns The multiplicative inverse of 'a' modulo the field's order.\n     * @throws if 'a' is zero.\n     */\n    inv(a) {\n        if (a === this.zero) {\n            throw new Error(\"Zero has no inverse\");\n        }\n        let t = this.zero;\n        let r = this._order;\n        let newt = this.one;\n        let newr = a % this._order;\n        while (newr) {\n            const q = r / newr;\n            [t, newt] = [newt, t - q * newt];\n            [r, newr] = [newr, r - q * newr];\n        }\n        if (t < this.zero) {\n            t += this._order;\n        }\n        return t;\n    }\n    /**\n     * Divides one bigint by another within the field by multiplying the first value\n     * by the multiplicative inverse of the second.\n     * @param a The dividend.\n     * @param b The divisor.\n     * @returns The result of the division of 'a' by 'b' modulo the field's order.\n     */\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n    /**\n     * Checks if two bigint values are equal within the context of the field.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' equals 'b', false otherwise.\n     */\n    eq(a, b) {\n        return a === b;\n    }\n    /**\n     * Squares a bigint value within the field.\n     * This is a specific case of multiplication where the value is multiplied by itself,\n     * optimized for performance where applicable.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value to square.\n     * @returns The square of 'a' modulo the field's order.\n     */\n    square(a) {\n        return (a * a) % this._order;\n    }\n    /**\n     * Compares two bigint values to determine if the first is less than the second,\n     * taking into account the field's order for modular comparison.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' is less than 'b', false otherwise.\n     */\n    lt(a, b) {\n        const aa = a > this._half ? a - this._order : a;\n        const bb = b > this._half ? b - this._order : b;\n        return aa < bb;\n    }\n    /**\n     * Compares two bigint values to determine if the first is greater than or equal to the second,\n     * considering the field's modular context.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' is greater than or equal to 'b', false otherwise.\n     */\n    geq(a, b) {\n        const aa = a > this._half ? a - this._order : a;\n        const bb = b > this._half ? b - this._order : b;\n        return aa >= bb;\n    }\n    /**\n     * Computes the negation of a bigint value within the field.\n     * The result is the modular additive inverse that, when added to the original value,\n     * yields zero in the field's modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value to negate.\n     * @returns The negation of 'a' modulo the field's order.\n     */\n    neg(a) {\n        return a ? this._order - a : a;\n    }\n    /**\n     * Checks if a bigint value is zero within the context of the field.\n     * @param a The value to check.\n     * @returns True if 'a' is zero, false otherwise.\n     */\n    isZero(a) {\n        return a === this.zero;\n    }\n    /**\n     * Raises a base to an exponent within the field, efficiently computing\n     * scalar exponentiation using the square-and-multiply algorithm.\n     * Supports both positive and negative exponents through the use of the `inv` method for negatives.\n     * @param base The base to be exponentiated.\n     * @param e The exponent.\n     * @returns The result of raising 'base' to the power 'e' modulo the field's order.\n     */\n    pow(base, e) {\n        if (isZero(e)) {\n            return this.one;\n        }\n        if (e < 0n) {\n            base = this.inv(base);\n            e = -e;\n        }\n        const n = bits(e);\n        if (n.length === 0) {\n            return this.one;\n        }\n        let res = base;\n        for (let i = n.length - 2; i >= 0; i -= 1) {\n            res = this.square(res);\n            if (n[i]) {\n                res = this.mul(res, base);\n            }\n        }\n        return res;\n    }\n}\n\n/**\n * @module ProofPacking\n *\n * This module provides utility functions to pack and unpack\n * various types of objects, making it easier to export or use\n * them externally.\n */\n/**\n * Packs a Snarkjs Groth16 proof into a single list usable as calldata in Solidity (public signals are not included).\n * @param proof The Groth16 proof generated with SnarkJS.\n * @returns Solidity calldata.\n */\nfunction packGroth16Proof(proof) {\n    return [\n        proof.pi_a[0],\n        proof.pi_a[1],\n        proof.pi_b[0][1],\n        proof.pi_b[0][0],\n        proof.pi_b[1][1],\n        proof.pi_b[1][0],\n        proof.pi_c[0],\n        proof.pi_c[1]\n    ];\n}\n/**\n * Unpacks a PackedGroth16Proof Solidity calldata into its original form which is a SnarkJS Groth16 proof.\n * @param proof Solidity calldata.\n * @returns The Groth16 proof compatible with SnarkJS.\n */\nfunction unpackGroth16Proof(proof) {\n    return {\n        pi_a: [proof[0], proof[1]],\n        pi_b: [\n            [proof[3], proof[2]],\n            [proof[5], proof[4]]\n        ],\n        pi_c: [proof[6], proof[7]],\n        protocol: \"groth16\",\n        curve: \"bn128\"\n    };\n}\n\nvar proofPacking = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    packGroth16Proof: packGroth16Proof,\n    unpackGroth16Proof: unpackGroth16Proof\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/index.node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/conversions.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/conversions.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToBuffer: () => (/* binding */ base64ToBuffer),\n/* harmony export */   base64ToText: () => (/* binding */ base64ToText),\n/* harmony export */   beBigIntToBuffer: () => (/* binding */ beBigIntToBuffer),\n/* harmony export */   beBufferToBigInt: () => (/* binding */ beBufferToBigInt),\n/* harmony export */   bigIntToBuffer: () => (/* binding */ bigIntToBuffer),\n/* harmony export */   bigIntToHexadecimal: () => (/* binding */ bigIntToHexadecimal),\n/* harmony export */   bigNumberishToBigInt: () => (/* binding */ bigNumberishToBigInt),\n/* harmony export */   bigNumberishToBuffer: () => (/* binding */ bigNumberishToBuffer),\n/* harmony export */   bufferToBase64: () => (/* binding */ bufferToBase64),\n/* harmony export */   bufferToBigInt: () => (/* binding */ bufferToBigInt),\n/* harmony export */   bufferToHexadecimal: () => (/* binding */ bufferToHexadecimal),\n/* harmony export */   hexadecimalToBigInt: () => (/* binding */ hexadecimalToBigInt),\n/* harmony export */   hexadecimalToBuffer: () => (/* binding */ hexadecimalToBuffer),\n/* harmony export */   leBigIntToBuffer: () => (/* binding */ leBigIntToBuffer),\n/* harmony export */   leBufferToBigInt: () => (/* binding */ leBufferToBigInt),\n/* harmony export */   textToBase64: () => (/* binding */ textToBase64)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var _error_handlers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error-handlers.js */ \"(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js\");\n/* harmony import */ var _type_checks_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-checks.js */ \"(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js\");\n/**\n * @module @zk-kit/utils\n * @version 1.2.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n\n\n/**\n * @module Conversions\n * This module provides a collection of utility functions for converting\n * between different numerical formats, particularly focusing on\n * conversions involving bigints, hexadecimals and buffers.\n * The module is structured with clear function naming to indicate\n * the conversion direction (e.g., `bigIntToHexadecimal` for BigInt\n * to hexadecimal, `bufferToBigInt` for buffer to bigint) and employs\n * type checks to ensure the correct handling of various input types.\n * It also includes variations for both big-endian (`be`) and little-endian\n * (`le`) conversions. It is important to note that when there is no prefix,\n * the order of bytes is always big-endian.\n */\n/**\n * Converts a bigint to a hexadecimal string.\n * @param value The bigint value to convert.\n * @returns The hexadecimal representation of the bigint.\n */\nfunction bigIntToHexadecimal(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireBigInt)(value, \"value\");\n    let hex = value.toString(16);\n    // Ensure even length.\n    if (hex.length % 2 !== 0) {\n        hex = `0${hex}`;\n    }\n    return hex;\n}\n/**\n * Converts a hexadecimal string to a bigint. The input is interpreted as hexadecimal\n * with or without a '0x' prefix. It uses big-endian byte order.\n * @param value The hexadecimal string to convert.\n * @returns The bigint representation of the hexadecimal string.\n */\nfunction hexadecimalToBigInt(value) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isHexadecimal)(value) && !(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isHexadecimal)(value, false)) {\n        throw new TypeError(`Parameter 'value' is not a hexadecimal string`);\n    }\n    // Ensure the hex string starts with '0x'.\n    const formattedHexString = value.startsWith(\"0x\") ? value : `0x${value}`;\n    return BigInt(formattedHexString);\n}\n/**\n * Converts a buffer of bytes to a bigint using big-endian byte order.\n * It accepts 'Buffer' or 'Uint8Array'.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents.\n */\nfunction beBufferToBigInt(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireTypes)(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return BigInt(`0x${buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"hex\")}`);\n}\n/**\n * Converts a buffer to a bigint using little-endian byte order.\n * It accepts 'Buffer' or 'Uint8Array'.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents in little-endian.\n */\nfunction leBufferToBigInt(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireTypes)(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return BigInt(`0x${buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).reverse().toString(\"hex\")}`);\n}\n/**\n * Converts a buffer to a bigint. Alias for beBufferToBigInt.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents.\n */\nfunction bufferToBigInt(value) {\n    return beBufferToBigInt(value);\n}\n/**\n * Converts a bigint to a buffer and fills with zeros if a valid\n * size (i.e. number of bytes) is specified. If the size is not defined,\n * it gets the size from the given bigint. If the specified size is smaller than\n * the size of the bigint (i.e. `minSize`), an error is thrown.\n * It uses big-endian byte order.\n * @param value The bigint to convert.\n * @param size The number of bytes of the buffer to return.\n * @returns The buffer representation of the bigint.\n */\nfunction beBigIntToBuffer(value, size) {\n    const hex = bigIntToHexadecimal(value);\n    // Calculate the minimum buffer size required to represent 'n' in bytes.\n    // Each hexadecimal character represents 4 bits, so 2 characters are 1 byte.\n    const minSize = Math.ceil(hex.length / 2);\n    if (!size) {\n        size = minSize;\n    }\n    else if (size < minSize) {\n        throw Error(`Size ${size} is too small, need at least ${minSize} bytes`);\n    }\n    // Allocate buffer of the desired size, filled with zeros.\n    const buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(size, 0);\n    const fromHex = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex, \"hex\");\n    fromHex.copy(buffer, size - fromHex.length);\n    return buffer;\n}\n/**\n * Converts a bigint to a buffer and fills with zeros if a valid\n * size (i.e. number of bytes) is specified. If the size is not defined,\n * it gets the size from the given bigint. If the specified size is smaller than\n * the size of the bigint (i.e. `minSize`), an error is thrown.\n * It uses little-endian byte order.\n * @param value The bigint to convert.\n * @param size The number of bytes of the buffer to return.\n * @returns The buffer representation of the bigint in little-endian.\n */\nfunction leBigIntToBuffer(value, size) {\n    const hex = bigIntToHexadecimal(value);\n    // Calculate the minimum buffer size required to represent 'n' in bytes.\n    // Each hexadecimal character represents 4 bits, so 2 characters are 1 byte.\n    const minSize = Math.ceil(hex.length / 2);\n    if (!size) {\n        size = minSize;\n    }\n    else if (size < minSize) {\n        throw Error(`Size ${size} is too small, need at least ${minSize} bytes`);\n    }\n    // Allocate buffer of the desired size, filled with zeros.\n    const buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(size, 0);\n    const fromHex = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex, \"hex\").reverse();\n    fromHex.copy(buffer, 0);\n    return buffer;\n}\n/**\n * Converts a bigint to a buffer. Alias for beBigIntToBuffer.\n * @param value The bigint to convert.\n * @returns The buffer representation of the bigint.\n */\nfunction bigIntToBuffer(value) {\n    return beBigIntToBuffer(value);\n}\n/**\n * Converts a BigNumberish type to a bigint. If the input is already a bigint,\n * the return value will be the bigint itself, otherwise it will be converted\n * to a bigint using big-endian byte order.\n * @param value The BigNumberish value to convert.\n * @returns The bigint representation of the BigNumberish value.\n */\nfunction bigNumberishToBigInt(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireBigNumberish)(value, \"value\");\n    if ((0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isBuffer)(value) || (0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isUint8Array)(value)) {\n        return bufferToBigInt(value);\n    }\n    return BigInt(value);\n}\n/**\n * Converts a BigNumberish type to a buffer. If the input is already a buffer,\n * the return value will be the buffer itself, otherwise it will be converted\n * to a buffer using big-endian byte order.\n * @param value The BigNumberish value to convert.\n * @returns The buffer representation of the BigNumberish value.\n */\nfunction bigNumberishToBuffer(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireBigNumberish)(value, \"value\");\n    if ((0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isBuffer)(value) || (0,_type_checks_js__WEBPACK_IMPORTED_MODULE_2__.isUint8Array)(value)) {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value);\n    }\n    return bigIntToBuffer(bigNumberishToBigInt(value));\n}\n/**\n * Converts an hexadecimal string to a buffer. The hexadecimal string\n * should not start with '0x' or '0X'. It keeps the bytes in the same order.\n * @param value The hexadecimal string to convert.\n * @returns The buffer representation of the hexadecimal string.\n */\nfunction hexadecimalToBuffer(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireHexadecimal)(value, \"value\", false);\n    // Ensure even length before converting to buffer.\n    if (value.length % 2 !== 0) {\n        value = `0${value}`;\n    }\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"hex\");\n}\n/**\n * Converts a buffer to a hexadecimal string. It accepts 'Buffer' or 'Uint8Array'.\n * The hexadecimal string will not start with '0x' or '0X'. It keeps the bytes in the same order.\n * @param value The buffer to convert.\n * @returns The converted hexadecimal string.\n */\nfunction bufferToHexadecimal(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireTypes)(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"hex\");\n}\n/**\n * Converts bytes to a base64 string. It accepts 'Buffer' or 'Uint8Array'.\n * @param value The bytes to convert.\n * @returns The converted base64 string.\n */\nfunction bufferToBase64(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireTypes)(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"base64\");\n}\n/**\n * Converts a base64 string to bytes (i.e. a buffer). This function does not check\n * if the input value is a valid base64 string. If there are unsupported characters\n * they will be ignored.\n * @param value The base64 string to convert.\n * @returns The converted buffer.\n */\nfunction base64ToBuffer(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireString)(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"base64\");\n}\n/**\n * Converts text (utf8) to a base64 string.\n * @param value The text to convert.\n * @returns The converted base64 string.\n */\nfunction textToBase64(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireString)(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"utf8\").toString(\"base64\");\n}\n/**\n * Converts a base64 string to text (utf8). This function does not check\n * if the input value is a valid base64 string. If there are unsupported characters\n * they could be ignored and the result may be unexpected.\n * @param value The base64 string to convert.\n * @returns The converted text.\n */\nfunction base64ToText(value) {\n    (0,_error_handlers_js__WEBPACK_IMPORTED_MODULE_1__.requireString)(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"base64\").toString(\"utf8\");\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/conversions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requireArray: () => (/* binding */ requireArray),\n/* harmony export */   requireBigInt: () => (/* binding */ requireBigInt),\n/* harmony export */   requireBigNumber: () => (/* binding */ requireBigNumber),\n/* harmony export */   requireBigNumberish: () => (/* binding */ requireBigNumberish),\n/* harmony export */   requireBuffer: () => (/* binding */ requireBuffer),\n/* harmony export */   requireDefined: () => (/* binding */ requireDefined),\n/* harmony export */   requireFunction: () => (/* binding */ requireFunction),\n/* harmony export */   requireHexadecimal: () => (/* binding */ requireHexadecimal),\n/* harmony export */   requireNumber: () => (/* binding */ requireNumber),\n/* harmony export */   requireObject: () => (/* binding */ requireObject),\n/* harmony export */   requireString: () => (/* binding */ requireString),\n/* harmony export */   requireStringifiedBigInt: () => (/* binding */ requireStringifiedBigInt),\n/* harmony export */   requireTypes: () => (/* binding */ requireTypes),\n/* harmony export */   requireUint8Array: () => (/* binding */ requireUint8Array)\n/* harmony export */ });\n/* harmony import */ var _type_checks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./type-checks.js */ \"(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js\");\n/**\n * @module @zk-kit/utils\n * @version 1.2.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n/**\n * @module ErrorHandlers\n * This module is designed to provide utility functions for validating\n * function parameters. It includes functions that throw type errors if\n * the parameters do not meet specified criteria, such as being defined,\n * a number, a string, a function, or an array. This module helps ensure\n * that functions receive the correct types of inputs, enhancing code\n * reliability and reducing runtime errors.\n */\n/**\n * @throws Throws a type error if the parameter value has not been defined.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireDefined(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not defined`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a number.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireNumber(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a number, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a string.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireString(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isString)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a string, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a function.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireFunction(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a function, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not an Array.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireArray(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not an Array instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a Uint8Array.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireUint8Array(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isUint8Array)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a Uint8Array instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a Buffer.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBuffer(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBuffer)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a Buffer instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not an object.\n * Please, note that arrays are also objects in JavaScript.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireObject(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not an object, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bigint.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigInt(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBigInt)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bigint, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a stringified bigint.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireStringifiedBigInt(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isStringifiedBigInt)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a stringified bigint`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a hexadecimal string.\n * If 'prefix' is 'true', the string must start with '0x' or '0X' followed by one or more\n * hexadecimal digits (0-9, a-f, A-F), otherwise no prefix is expected. 'prefix' is optional and\n * if its value it is not explicitly defined it will be set to 'true' by default.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n * @param prefix A boolean to include or not a '0x' or '0X' prefix.\n */\nfunction requireHexadecimal(parameterValue, parameterName, prefix = true) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isHexadecimal)(parameterValue, prefix)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a hexadecimal string`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bignumber.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigNumber(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBigNumber)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bignumber`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bignumber-ish.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigNumberish(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBigNumberish)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bignumber-ish`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value type is not part of the list of types.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireTypes(parameterValue, parameterName, types) {\n    for (const type of types) {\n        if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isSupportedType)(type)) {\n            throw new Error(`Type '${type}' is not supported`);\n        }\n    }\n    for (const type of types) {\n        if ((0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isType)(parameterValue, type)) {\n            return;\n        }\n    }\n    throw new TypeError(`Parameter '${parameterName}' is none of the following types: ${types.join(\", \")}`);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHprLWtpdC9lZGRzYS1wb3NlaWRvbi9ub2RlX21vZHVsZXMvQHprLWtpdC91dGlscy9kaXN0L2xpYi5lc20vZXJyb3ItaGFuZGxlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQzROOztBQUU1TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDBEQUFTO0FBQ2xCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHlEQUFRO0FBQ2pCLDBDQUEwQyxjQUFjLG9DQUFvQyxzQkFBc0I7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMseURBQVE7QUFDakIsMENBQTBDLGNBQWMsb0NBQW9DLHNCQUFzQjtBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywyREFBVTtBQUNuQiwwQ0FBMEMsY0FBYyxzQ0FBc0Msc0JBQXNCO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHdEQUFPO0FBQ2hCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDZEQUFZO0FBQ3JCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHlEQUFRO0FBQ2pCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMseURBQVE7QUFDakIsMENBQTBDLGNBQWMscUNBQXFDLHNCQUFzQjtBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx5REFBUTtBQUNqQiwwQ0FBMEMsY0FBYyxvQ0FBb0Msc0JBQXNCO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLG9FQUFtQjtBQUM1QiwwQ0FBMEMsY0FBYztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDhEQUFhO0FBQ3RCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDREQUFXO0FBQ3BCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLCtEQUFjO0FBQ3ZCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0VBQWU7QUFDNUIscUNBQXFDLEtBQUs7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsWUFBWSx1REFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsY0FBYyxvQ0FBb0MsaUJBQWlCO0FBQ3pHOztBQUUwUCIsInNvdXJjZXMiOlsiL1VzZXJzL2NoYW5jZW1jYWxsaXN0ZXIvUHJvamVjdHMvenVwYXNzaHVudC9ub2RlX21vZHVsZXMvQHprLWtpdC9lZGRzYS1wb3NlaWRvbi9ub2RlX21vZHVsZXMvQHprLWtpdC91dGlscy9kaXN0L2xpYi5lc20vZXJyb3ItaGFuZGxlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIEB6ay1raXQvdXRpbHNcbiAqIEB2ZXJzaW9uIDEuMi4xXG4gKiBAZmlsZSBFc3NlbnRpYWwgemVyby1rbm93bGVkZ2UgdXRpbGl0eSBsaWJyYXJ5IGZvciBKYXZhU2NyaXB0IGRldmVsb3BlcnMuXG4gKiBAY29weXJpZ2h0IEV0aGVyZXVtIEZvdW5kYXRpb24gMjAyNFxuICogQGxpY2Vuc2UgTUlUXG4gKiBAc2VlIFtHaXRodWJde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9wcml2YWN5LXNjYWxpbmctZXhwbG9yYXRpb25zL3prLWtpdC90cmVlL21haW4vcGFja2FnZXMvdXRpbHN9XG4qL1xuaW1wb3J0IHsgaXNEZWZpbmVkLCBpc051bWJlciwgaXNTdHJpbmcsIGlzRnVuY3Rpb24sIGlzQXJyYXksIGlzVWludDhBcnJheSwgaXNCdWZmZXIsIGlzT2JqZWN0LCBpc0JpZ0ludCwgaXNTdHJpbmdpZmllZEJpZ0ludCwgaXNIZXhhZGVjaW1hbCwgaXNCaWdOdW1iZXIsIGlzQmlnTnVtYmVyaXNoLCBpc1N1cHBvcnRlZFR5cGUsIGlzVHlwZSB9IGZyb20gJy4vdHlwZS1jaGVja3MuanMnO1xuXG4vKipcbiAqIEBtb2R1bGUgRXJyb3JIYW5kbGVyc1xuICogVGhpcyBtb2R1bGUgaXMgZGVzaWduZWQgdG8gcHJvdmlkZSB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgdmFsaWRhdGluZ1xuICogZnVuY3Rpb24gcGFyYW1ldGVycy4gSXQgaW5jbHVkZXMgZnVuY3Rpb25zIHRoYXQgdGhyb3cgdHlwZSBlcnJvcnMgaWZcbiAqIHRoZSBwYXJhbWV0ZXJzIGRvIG5vdCBtZWV0IHNwZWNpZmllZCBjcml0ZXJpYSwgc3VjaCBhcyBiZWluZyBkZWZpbmVkLFxuICogYSBudW1iZXIsIGEgc3RyaW5nLCBhIGZ1bmN0aW9uLCBvciBhbiBhcnJheS4gVGhpcyBtb2R1bGUgaGVscHMgZW5zdXJlXG4gKiB0aGF0IGZ1bmN0aW9ucyByZWNlaXZlIHRoZSBjb3JyZWN0IHR5cGVzIG9mIGlucHV0cywgZW5oYW5jaW5nIGNvZGVcbiAqIHJlbGlhYmlsaXR5IGFuZCByZWR1Y2luZyBydW50aW1lIGVycm9ycy5cbiAqL1xuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBoYXMgbm90IGJlZW4gZGVmaW5lZC5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlRGVmaW5lZChwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNEZWZpbmVkKHBhcmFtZXRlclZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vdCBkZWZpbmVkYCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBub3QgYSBudW1iZXIuXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZU51bWJlcihwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNOdW1iZXIocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgbnVtYmVyLCByZWNlaXZlZCB0eXBlOiAke3R5cGVvZiBwYXJhbWV0ZXJWYWx1ZX1gKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIHN0cmluZy5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlU3RyaW5nKHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc1N0cmluZyhwYXJhbWV0ZXJWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYSBzdHJpbmcsIHJlY2VpdmVkIHR5cGU6ICR7dHlwZW9mIHBhcmFtZXRlclZhbHVlfWApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGEgZnVuY3Rpb24uXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZUZ1bmN0aW9uKHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc0Z1bmN0aW9uKHBhcmFtZXRlclZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vdCBhIGZ1bmN0aW9uLCByZWNlaXZlZCB0eXBlOiAke3R5cGVvZiBwYXJhbWV0ZXJWYWx1ZX1gKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhbiBBcnJheS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlQXJyYXkocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUpIHtcbiAgICBpZiAoIWlzQXJyYXkocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGFuIEFycmF5IGluc3RhbmNlYCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBub3QgYSBVaW50OEFycmF5LlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlIFRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyTmFtZSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVVaW50OEFycmF5KHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc1VpbnQ4QXJyYXkocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgVWludDhBcnJheSBpbnN0YW5jZWApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGEgQnVmZmVyLlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlIFRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyTmFtZSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVCdWZmZXIocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUpIHtcbiAgICBpZiAoIWlzQnVmZmVyKHBhcmFtZXRlclZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vdCBhIEJ1ZmZlciBpbnN0YW5jZWApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGFuIG9iamVjdC5cbiAqIFBsZWFzZSwgbm90ZSB0aGF0IGFycmF5cyBhcmUgYWxzbyBvYmplY3RzIGluIEphdmFTY3JpcHQuXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZU9iamVjdChwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNPYmplY3QocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGFuIG9iamVjdCwgcmVjZWl2ZWQgdHlwZTogJHt0eXBlb2YgcGFyYW1ldGVyVmFsdWV9YCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBub3QgYSBiaWdpbnQuXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZUJpZ0ludChwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNCaWdJbnQocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgYmlnaW50LCByZWNlaXZlZCB0eXBlOiAke3R5cGVvZiBwYXJhbWV0ZXJWYWx1ZX1gKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIHN0cmluZ2lmaWVkIGJpZ2ludC5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlU3RyaW5naWZpZWRCaWdJbnQocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUpIHtcbiAgICBpZiAoIWlzU3RyaW5naWZpZWRCaWdJbnQocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgc3RyaW5naWZpZWQgYmlnaW50YCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBub3QgYSBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKiBJZiAncHJlZml4JyBpcyAndHJ1ZScsIHRoZSBzdHJpbmcgbXVzdCBzdGFydCB3aXRoICcweCcgb3IgJzBYJyBmb2xsb3dlZCBieSBvbmUgb3IgbW9yZVxuICogaGV4YWRlY2ltYWwgZGlnaXRzICgwLTksIGEtZiwgQS1GKSwgb3RoZXJ3aXNlIG5vIHByZWZpeCBpcyBleHBlY3RlZC4gJ3ByZWZpeCcgaXMgb3B0aW9uYWwgYW5kXG4gKiBpZiBpdHMgdmFsdWUgaXQgaXMgbm90IGV4cGxpY2l0bHkgZGVmaW5lZCBpdCB3aWxsIGJlIHNldCB0byAndHJ1ZScgYnkgZGVmYXVsdC5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICogQHBhcmFtIHByZWZpeCBBIGJvb2xlYW4gdG8gaW5jbHVkZSBvciBub3QgYSAnMHgnIG9yICcwWCcgcHJlZml4LlxuICovXG5mdW5jdGlvbiByZXF1aXJlSGV4YWRlY2ltYWwocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUsIHByZWZpeCA9IHRydWUpIHtcbiAgICBpZiAoIWlzSGV4YWRlY2ltYWwocGFyYW1ldGVyVmFsdWUsIHByZWZpeCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYSBoZXhhZGVjaW1hbCBzdHJpbmdgKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIGJpZ251bWJlci5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlQmlnTnVtYmVyKHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc0JpZ051bWJlcihwYXJhbWV0ZXJWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYSBiaWdudW1iZXJgKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIGJpZ251bWJlci1pc2guXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZUJpZ051bWJlcmlzaChwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNCaWdOdW1iZXJpc2gocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgYmlnbnVtYmVyLWlzaGApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgdHlwZSBpcyBub3QgcGFydCBvZiB0aGUgbGlzdCBvZiB0eXBlcy5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlVHlwZXMocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUsIHR5cGVzKSB7XG4gICAgZm9yIChjb25zdCB0eXBlIG9mIHR5cGVzKSB7XG4gICAgICAgIGlmICghaXNTdXBwb3J0ZWRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFR5cGUgJyR7dHlwZX0nIGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdHlwZXMpIHtcbiAgICAgICAgaWYgKGlzVHlwZShwYXJhbWV0ZXJWYWx1ZSwgdHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vbmUgb2YgdGhlIGZvbGxvd2luZyB0eXBlczogJHt0eXBlcy5qb2luKFwiLCBcIil9YCk7XG59XG5cbmV4cG9ydCB7IHJlcXVpcmVBcnJheSwgcmVxdWlyZUJpZ0ludCwgcmVxdWlyZUJpZ051bWJlciwgcmVxdWlyZUJpZ051bWJlcmlzaCwgcmVxdWlyZUJ1ZmZlciwgcmVxdWlyZURlZmluZWQsIHJlcXVpcmVGdW5jdGlvbiwgcmVxdWlyZUhleGFkZWNpbWFsLCByZXF1aXJlTnVtYmVyLCByZXF1aXJlT2JqZWN0LCByZXF1aXJlU3RyaW5nLCByZXF1aXJlU3RyaW5naWZpZWRCaWdJbnQsIHJlcXVpcmVUeXBlcywgcmVxdWlyZVVpbnQ4QXJyYXkgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/f1-field.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/f1-field.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ F1Field)\n/* harmony export */ });\n/* harmony import */ var _scalar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scalar.js */ \"(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/scalar.js\");\n/**\n * @module @zk-kit/utils\n * @version 1.2.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n/**\n * @class F1Field\n * Represents a finite field of order 'order' providing arithmetic operations under modulus.\n * This class includes operations such as addition, subtraction, multiplication, division,\n * and inversion, all performed modulo the field's order. It's designed to work with bigints,\n * supporting large numbers for cryptographic purposes and other applications requiring\n * modular arithmetic.\n * Note that the outputs of the functions will always be within the field if and only if\n * the input values are within the field. Devs need to make sure of that.\n *\n * @property one Represents the scalar value 1 in the field.\n * @property zero Represents the scalar value 0 in the field.\n * @property _order The order of the finite field (i.e., the modulus).\n * @property _half Half the order of the field, used for certain comparisons.\n * @property _negone The scalar value -1 in the field, represented positively.\n */\nclass F1Field {\n    constructor(order) {\n        this.one = 1n;\n        this.zero = 0n;\n        this._order = order;\n        this._half = order >> this.one;\n        this._negone = this._order - this.one;\n    }\n    /**\n     * Ensures a given result falls within the field by applying modular reduction.\n     * This method also handles negative inputs, correctly mapping them into the field.\n     * @param res The result to be normalized to the field.\n     * @returns The equivalent value within the field.\n     */\n    e(res) {\n        res %= this._order;\n        return res < 0 ? res + this._order : res;\n    }\n    /**\n     * Performs modular multiplication of two bigint values within the field.\n     * @param a The first value.\n     * @param b The second value.\n     * @returns The product of 'a' and 'b' modulo the field's order.\n     */\n    mul(a, b) {\n        return (a * b) % this._order;\n    }\n    /**\n     * Subtracts one bigint from another under modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value from which to subtract.\n     * @param b The value to be subtracted.\n     * @returns The difference of 'a' and 'b' modulo the field's order.\n     */\n    sub(a, b) {\n        return a >= b ? a - b : this._order - b + a;\n    }\n    /**\n     * Adds two bigint values together under modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value.\n     * @param b The second value.\n     * @returns The sum of 'a' and 'b' modulo the field's order.\n     */\n    add(a, b) {\n        const res = a + b;\n        return res >= this._order ? res - this._order : res;\n    }\n    /**\n     * Computes the multiplicative inverse of a given value within the field.\n     * This method uses the Extended Euclidean Algorithm to find the inverse,\n     * ensuring the result is always a positive value less than the field's order.\n     * If the input value is zero, which has no inverse, an error is thrown.\n     * @param a The value for which to compute the inverse.\n     * @returns The multiplicative inverse of 'a' modulo the field's order.\n     * @throws if 'a' is zero.\n     */\n    inv(a) {\n        if (a === this.zero) {\n            throw new Error(\"Zero has no inverse\");\n        }\n        let t = this.zero;\n        let r = this._order;\n        let newt = this.one;\n        let newr = a % this._order;\n        while (newr) {\n            const q = r / newr;\n            [t, newt] = [newt, t - q * newt];\n            [r, newr] = [newr, r - q * newr];\n        }\n        if (t < this.zero) {\n            t += this._order;\n        }\n        return t;\n    }\n    /**\n     * Divides one bigint by another within the field by multiplying the first value\n     * by the multiplicative inverse of the second.\n     * @param a The dividend.\n     * @param b The divisor.\n     * @returns The result of the division of 'a' by 'b' modulo the field's order.\n     */\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n    /**\n     * Checks if two bigint values are equal within the context of the field.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' equals 'b', false otherwise.\n     */\n    eq(a, b) {\n        return a === b;\n    }\n    /**\n     * Squares a bigint value within the field.\n     * This is a specific case of multiplication where the value is multiplied by itself,\n     * optimized for performance where applicable.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value to square.\n     * @returns The square of 'a' modulo the field's order.\n     */\n    square(a) {\n        return (a * a) % this._order;\n    }\n    /**\n     * Compares two bigint values to determine if the first is less than the second,\n     * taking into account the field's order for modular comparison.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' is less than 'b', false otherwise.\n     */\n    lt(a, b) {\n        const aa = a > this._half ? a - this._order : a;\n        const bb = b > this._half ? b - this._order : b;\n        return aa < bb;\n    }\n    /**\n     * Compares two bigint values to determine if the first is greater than or equal to the second,\n     * considering the field's modular context.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' is greater than or equal to 'b', false otherwise.\n     */\n    geq(a, b) {\n        const aa = a > this._half ? a - this._order : a;\n        const bb = b > this._half ? b - this._order : b;\n        return aa >= bb;\n    }\n    /**\n     * Computes the negation of a bigint value within the field.\n     * The result is the modular additive inverse that, when added to the original value,\n     * yields zero in the field's modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value to negate.\n     * @returns The negation of 'a' modulo the field's order.\n     */\n    neg(a) {\n        return a ? this._order - a : a;\n    }\n    /**\n     * Checks if a bigint value is zero within the context of the field.\n     * @param a The value to check.\n     * @returns True if 'a' is zero, false otherwise.\n     */\n    isZero(a) {\n        return a === this.zero;\n    }\n    /**\n     * Raises a base to an exponent within the field, efficiently computing\n     * scalar exponentiation using the square-and-multiply algorithm.\n     * Supports both positive and negative exponents through the use of the `inv` method for negatives.\n     * @param base The base to be exponentiated.\n     * @param e The exponent.\n     * @returns The result of raising 'base' to the power 'e' modulo the field's order.\n     */\n    pow(base, e) {\n        if ((0,_scalar_js__WEBPACK_IMPORTED_MODULE_0__.isZero)(e)) {\n            return this.one;\n        }\n        if (e < 0n) {\n            base = this.inv(base);\n            e = -e;\n        }\n        const n = (0,_scalar_js__WEBPACK_IMPORTED_MODULE_0__.bits)(e);\n        if (n.length === 0) {\n            return this.one;\n        }\n        let res = base;\n        for (let i = n.length - 2; i >= 0; i -= 1) {\n            res = this.square(res);\n            if (n[i]) {\n                res = this.mul(res, base);\n            }\n        }\n        return res;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/f1-field.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/scalar.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/scalar.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bits: () => (/* binding */ bits),\n/* harmony export */   gt: () => (/* binding */ gt),\n/* harmony export */   isOdd: () => (/* binding */ isOdd),\n/* harmony export */   isZero: () => (/* binding */ isZero),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   shiftRight: () => (/* binding */ shiftRight)\n/* harmony export */ });\n/**\n * @module @zk-kit/utils\n * @version 1.2.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n/**\n * @module Scalar\n * This module provides utility functions for performing scalar operations\n * within a field, especially designed to handle operations on bigints.\n * The operations include scalar inversion (`inv`), scalar exponentiation (`pow`),\n * and modular reduction. Functions are carefully implemented to ensure\n * mathematical correctness and efficiency, supporting both positive and\n * negative bigint values. The module aims to provide robust tools for\n * cryptographic calculations and other applications requiring high-precision\n * arithmetic in fields.\n */\n/**\n * Checks if a bigint scalar value is zero.\n * @param a The bigint scalar value to check.\n * @returns True if 'a' is zero, false otherwise.\n */\nfunction isZero(a) {\n    return !a;\n}\n/**\n * Determines whether a bigint scalar value is odd.\n * @param a The bigint scalar value to check.\n * @returns True if 'a' is odd, false if it is even.\n */\nfunction isOdd(a) {\n    return (a & BigInt(1)) === BigInt(1);\n}\n/**\n * Performs a bitwise right shift on a bigint scalar value.\n * This operation is equivalent to dividing by 2^n, but it operates directly\n * on the binary representation, making it efficient for certain types of calculations.\n * @param a The bigint scalar value to shift.\n * @param n The number of bits to shift 'a' by.\n * @returns The result of shifting 'a' right by 'n' bits.\n */\nfunction shiftRight(a, n) {\n    return a >> n;\n}\n/**\n * Multiplies two bigint scalar values.\n * @param a The first bigint scalar value.\n * @param b The second bigint scalar value.\n * @returns The product of 'a' and 'b'.\n */\nfunction mul(a, b) {\n    return a * b;\n}\n/**\n * Compares two bigint scalar values to determine if the first is greater than the second.\n * @param a The first bigint scalar value to compare.\n * @param b The second bigint scalar value to compare.\n * @returns True if 'a' is greater than 'b', false otherwise.\n */\nfunction gt(a, b) {\n    return a > b;\n}\n/**\n * Converts a bigint scalar value into an array of bits, represented as numbers.\n * This function is particularly useful for examining the binary structure of bigints,\n * which can be necessary for bit manipulation and understanding the representation\n * of numbers at a lower level.\n * @param n The bigint scalar value to convert into bits.\n * @returns An array of numbers representing the bits of 'n', starting from the least significant bit.\n */\nfunction bits(n) {\n    const res = [];\n    let E = n;\n    while (E) {\n        if (E & BigInt(1)) {\n            res.push(1);\n        }\n        else {\n            res.push(0);\n        }\n        E >>= BigInt(1);\n    }\n    return res;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHprLWtpdC9lZGRzYS1wb3NlaWRvbi9ub2RlX21vZHVsZXMvQHprLWtpdC91dGlscy9kaXN0L2xpYi5lc20vc2NhbGFyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFb0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jaGFuY2VtY2FsbGlzdGVyL1Byb2plY3RzL3p1cGFzc2h1bnQvbm9kZV9tb2R1bGVzL0B6ay1raXQvZWRkc2EtcG9zZWlkb24vbm9kZV9tb2R1bGVzL0B6ay1raXQvdXRpbHMvZGlzdC9saWIuZXNtL3NjYWxhci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgQHprLWtpdC91dGlsc1xuICogQHZlcnNpb24gMS4yLjFcbiAqIEBmaWxlIEVzc2VudGlhbCB6ZXJvLWtub3dsZWRnZSB1dGlsaXR5IGxpYnJhcnkgZm9yIEphdmFTY3JpcHQgZGV2ZWxvcGVycy5cbiAqIEBjb3B5cmlnaHQgRXRoZXJldW0gRm91bmRhdGlvbiAyMDI0XG4gKiBAbGljZW5zZSBNSVRcbiAqIEBzZWUgW0dpdGh1Yl17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3ByaXZhY3ktc2NhbGluZy1leHBsb3JhdGlvbnMvemsta2l0L3RyZWUvbWFpbi9wYWNrYWdlcy91dGlsc31cbiovXG4vKipcbiAqIEBtb2R1bGUgU2NhbGFyXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgcGVyZm9ybWluZyBzY2FsYXIgb3BlcmF0aW9uc1xuICogd2l0aGluIGEgZmllbGQsIGVzcGVjaWFsbHkgZGVzaWduZWQgdG8gaGFuZGxlIG9wZXJhdGlvbnMgb24gYmlnaW50cy5cbiAqIFRoZSBvcGVyYXRpb25zIGluY2x1ZGUgc2NhbGFyIGludmVyc2lvbiAoYGludmApLCBzY2FsYXIgZXhwb25lbnRpYXRpb24gKGBwb3dgKSxcbiAqIGFuZCBtb2R1bGFyIHJlZHVjdGlvbi4gRnVuY3Rpb25zIGFyZSBjYXJlZnVsbHkgaW1wbGVtZW50ZWQgdG8gZW5zdXJlXG4gKiBtYXRoZW1hdGljYWwgY29ycmVjdG5lc3MgYW5kIGVmZmljaWVuY3ksIHN1cHBvcnRpbmcgYm90aCBwb3NpdGl2ZSBhbmRcbiAqIG5lZ2F0aXZlIGJpZ2ludCB2YWx1ZXMuIFRoZSBtb2R1bGUgYWltcyB0byBwcm92aWRlIHJvYnVzdCB0b29scyBmb3JcbiAqIGNyeXB0b2dyYXBoaWMgY2FsY3VsYXRpb25zIGFuZCBvdGhlciBhcHBsaWNhdGlvbnMgcmVxdWlyaW5nIGhpZ2gtcHJlY2lzaW9uXG4gKiBhcml0aG1ldGljIGluIGZpZWxkcy5cbiAqL1xuLyoqXG4gKiBDaGVja3MgaWYgYSBiaWdpbnQgc2NhbGFyIHZhbHVlIGlzIHplcm8uXG4gKiBAcGFyYW0gYSBUaGUgYmlnaW50IHNjYWxhciB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIFRydWUgaWYgJ2EnIGlzIHplcm8sIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNaZXJvKGEpIHtcbiAgICByZXR1cm4gIWE7XG59XG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIGJpZ2ludCBzY2FsYXIgdmFsdWUgaXMgb2RkLlxuICogQHBhcmFtIGEgVGhlIGJpZ2ludCBzY2FsYXIgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBUcnVlIGlmICdhJyBpcyBvZGQsIGZhbHNlIGlmIGl0IGlzIGV2ZW4uXG4gKi9cbmZ1bmN0aW9uIGlzT2RkKGEpIHtcbiAgICByZXR1cm4gKGEgJiBCaWdJbnQoMSkpID09PSBCaWdJbnQoMSk7XG59XG4vKipcbiAqIFBlcmZvcm1zIGEgYml0d2lzZSByaWdodCBzaGlmdCBvbiBhIGJpZ2ludCBzY2FsYXIgdmFsdWUuXG4gKiBUaGlzIG9wZXJhdGlvbiBpcyBlcXVpdmFsZW50IHRvIGRpdmlkaW5nIGJ5IDJebiwgYnV0IGl0IG9wZXJhdGVzIGRpcmVjdGx5XG4gKiBvbiB0aGUgYmluYXJ5IHJlcHJlc2VudGF0aW9uLCBtYWtpbmcgaXQgZWZmaWNpZW50IGZvciBjZXJ0YWluIHR5cGVzIG9mIGNhbGN1bGF0aW9ucy5cbiAqIEBwYXJhbSBhIFRoZSBiaWdpbnQgc2NhbGFyIHZhbHVlIHRvIHNoaWZ0LlxuICogQHBhcmFtIG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0ICdhJyBieS5cbiAqIEByZXR1cm5zIFRoZSByZXN1bHQgb2Ygc2hpZnRpbmcgJ2EnIHJpZ2h0IGJ5ICduJyBiaXRzLlxuICovXG5mdW5jdGlvbiBzaGlmdFJpZ2h0KGEsIG4pIHtcbiAgICByZXR1cm4gYSA+PiBuO1xufVxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBiaWdpbnQgc2NhbGFyIHZhbHVlcy5cbiAqIEBwYXJhbSBhIFRoZSBmaXJzdCBiaWdpbnQgc2NhbGFyIHZhbHVlLlxuICogQHBhcmFtIGIgVGhlIHNlY29uZCBiaWdpbnQgc2NhbGFyIHZhbHVlLlxuICogQHJldHVybnMgVGhlIHByb2R1Y3Qgb2YgJ2EnIGFuZCAnYicuXG4gKi9cbmZ1bmN0aW9uIG11bChhLCBiKSB7XG4gICAgcmV0dXJuIGEgKiBiO1xufVxuLyoqXG4gKiBDb21wYXJlcyB0d28gYmlnaW50IHNjYWxhciB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZSBmaXJzdCBpcyBncmVhdGVyIHRoYW4gdGhlIHNlY29uZC5cbiAqIEBwYXJhbSBhIFRoZSBmaXJzdCBiaWdpbnQgc2NhbGFyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0gYiBUaGUgc2Vjb25kIGJpZ2ludCBzY2FsYXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIFRydWUgaWYgJ2EnIGlzIGdyZWF0ZXIgdGhhbiAnYicsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gZ3QoYSwgYikge1xuICAgIHJldHVybiBhID4gYjtcbn1cbi8qKlxuICogQ29udmVydHMgYSBiaWdpbnQgc2NhbGFyIHZhbHVlIGludG8gYW4gYXJyYXkgb2YgYml0cywgcmVwcmVzZW50ZWQgYXMgbnVtYmVycy5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3IgZXhhbWluaW5nIHRoZSBiaW5hcnkgc3RydWN0dXJlIG9mIGJpZ2ludHMsXG4gKiB3aGljaCBjYW4gYmUgbmVjZXNzYXJ5IGZvciBiaXQgbWFuaXB1bGF0aW9uIGFuZCB1bmRlcnN0YW5kaW5nIHRoZSByZXByZXNlbnRhdGlvblxuICogb2YgbnVtYmVycyBhdCBhIGxvd2VyIGxldmVsLlxuICogQHBhcmFtIG4gVGhlIGJpZ2ludCBzY2FsYXIgdmFsdWUgdG8gY29udmVydCBpbnRvIGJpdHMuXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZyB0aGUgYml0cyBvZiAnbicsIHN0YXJ0aW5nIGZyb20gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC5cbiAqL1xuZnVuY3Rpb24gYml0cyhuKSB7XG4gICAgY29uc3QgcmVzID0gW107XG4gICAgbGV0IEUgPSBuO1xuICAgIHdoaWxlIChFKSB7XG4gICAgICAgIGlmIChFICYgQmlnSW50KDEpKSB7XG4gICAgICAgICAgICByZXMucHVzaCgxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKDApO1xuICAgICAgICB9XG4gICAgICAgIEUgPj49IEJpZ0ludCgxKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHsgYml0cywgZ3QsIGlzT2RkLCBpc1plcm8sIG11bCwgc2hpZnRSaWdodCB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/scalar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBigInt: () => (/* binding */ isBigInt),\n/* harmony export */   isBigNumber: () => (/* binding */ isBigNumber),\n/* harmony export */   isBigNumberish: () => (/* binding */ isBigNumberish),\n/* harmony export */   isBuffer: () => (/* binding */ isBuffer),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isHexadecimal: () => (/* binding */ isHexadecimal),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isStringifiedBigInt: () => (/* binding */ isStringifiedBigInt),\n/* harmony export */   isSupportedType: () => (/* binding */ isSupportedType),\n/* harmony export */   isType: () => (/* binding */ isType),\n/* harmony export */   isUint8Array: () => (/* binding */ isUint8Array),\n/* harmony export */   supportedTypes: () => (/* binding */ supportedTypes)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/**\n * @module @zk-kit/utils\n * @version 1.2.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2024\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n/**\n * @module TypeChecks\n * This module provides utility functions to check data types.\n * It defines a set of supported types and includes functions to check if\n * a value is defined and if it matches a supported type. These functions\n * are useful for type checking and validation in the other libraries,\n * enhancing code robustness and reliability.\n */\n/** @internal */\nconst supportedTypes = [\n    \"number\",\n    \"string\",\n    \"function\",\n    \"Array\",\n    \"Uint8Array\",\n    \"Buffer\",\n    \"object\",\n    \"bigint\",\n    \"stringified-bigint\",\n    \"hexadecimal\",\n    \"bignumber\",\n    \"bignumberish\"\n];\n/**\n * Returns true if the value is defined, false otherwise.\n * @param value The value to be checked.\n */\nfunction isDefined(value) {\n    return typeof value !== \"undefined\";\n}\n/**\n * Returns true if the value is a number, false otherwise.\n * @param value The value to be checked.\n */\nfunction isNumber(value) {\n    return typeof value === \"number\";\n}\n/**\n * Returns true if the value is a string, false otherwise.\n * @param value The value to be checked.\n */\nfunction isString(value) {\n    return typeof value === \"string\";\n}\n/**\n * Returns true if the value is a function, false otherwise.\n * @param value The value to be checked.\n */\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\n/**\n * Returns true if the value is an object, false otherwise.\n * Please, note that arrays are also objects in JavaScript.\n * @param value The value to be checked.\n */\nfunction isObject(value) {\n    return typeof value === \"object\";\n}\n/**\n * Returns true if the value is an Array instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isArray(value) {\n    return isObject(value) && Array.isArray(value);\n}\n/**\n * Returns true if the value is a Uint8Array instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isUint8Array(value) {\n    return value instanceof Uint8Array;\n}\n/**\n * Returns true if the value is a Buffer instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBuffer(value) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(value);\n}\n/**\n * Returns true if the value is a bigint, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBigInt(value) {\n    return typeof value === \"bigint\";\n}\n/**\n * Checks if the given value is a string that represents a valid bigint.\n * @param value The value to be checked if it's a stringified bigint.\n */\nfunction isStringifiedBigInt(value) {\n    // Check if value is a string first.\n    if (!isString(value)) {\n        return false;\n    }\n    try {\n        // Attempt to convert the string to BigInt.\n        BigInt(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Checks if a string is a valid hexadecimal string representation.\n * If 'prefix' is 'true', the string must start with '0x' or '0X' followed by one or more\n * hexadecimal digits (0-9, a-f, A-F), otherwise no prefix is expected. 'prefix' is optional and\n * if its value it is not explicitly defined it will be set to 'true' by default.\n * @param value The string to be tested.\n * @param prefix A boolean to include or not a '0x' or '0X' prefix.\n */\nfunction isHexadecimal(value, prefix = true) {\n    if (!isString(value)) {\n        return false;\n    }\n    if (prefix) {\n        return /^(0x|0X)[0-9a-fA-F]+$/.test(value);\n    }\n    return /^[0-9a-fA-F]+$/.test(value);\n}\n/**\n * Checks if the given value can be considered as BigNumber.\n * A value is considered a BigNumber if it is a bigint or a string\n * that can be converted to a bigint (via `Bigint(s)`).\n * @param value The value to check.\n */\nfunction isBigNumber(value) {\n    return isBigInt(value) || isStringifiedBigInt(value);\n}\n/**\n * Checks if the given value can be considered as BigNumberish.\n * A value is considered BigNumberish if it meets\n * any of the following conditions: it's a number, a bigint, a string\n * that can be converted to a bigint, a hexadecimal\n * string, or a Buffer object.\n * @param value The value to check.\n */\nfunction isBigNumberish(value) {\n    return (isNumber(value) ||\n        isBigInt(value) ||\n        isStringifiedBigInt(value) ||\n        isHexadecimal(value) ||\n        isBuffer(value) ||\n        isUint8Array(value));\n}\n/**\n * Returns true if the value type is the same as the type passed\n * as the second parameter, false otherwise.\n * @param value\n * @param type The expected type.\n */\nfunction isType(value, type) {\n    switch (type) {\n        case \"number\":\n            return isNumber(value);\n        case \"string\":\n            return isString(value);\n        case \"function\":\n            return isFunction(value);\n        case \"Array\":\n            return isArray(value);\n        case \"Uint8Array\":\n            return isUint8Array(value);\n        case \"Buffer\":\n            return isBuffer(value);\n        case \"object\":\n            return isObject(value);\n        case \"bigint\":\n            return isBigInt(value);\n        case \"stringified-bigint\":\n            return isStringifiedBigInt(value);\n        case \"hexadecimal\":\n            return isHexadecimal(value);\n        case \"bignumber\":\n            return isBigNumber(value);\n        case \"bignumberish\":\n            return isBigNumberish(value);\n        default:\n            return false;\n    }\n}\n/**\n * Returns true if the type is being supported by this utility\n * functions, false otherwise.\n * @param type The type to be checked.\n */\nfunction isSupportedType(type) {\n    return supportedTypes.includes(type);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/eddsa-poseidon/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/lean-imt/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@zk-kit/lean-imt/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LeanIMT: () => (/* binding */ LeanIMT)\n/* harmony export */ });\n/* harmony import */ var _zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zk-kit/utils/error-handlers */ \"(ssr)/./node_modules/@zk-kit/lean-imt/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js\");\n/**\n * @module @zk-kit/lean-imt\n * @version 2.2.3\n * @file Lean Incremental Merkle tree implementation in TypeScript.\n * @copyright Ethereum Foundation 2025\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/lean-imt}\n*/\n\n\n/**\n * The {@link LeanIMT} is an optimized binary version of the {@link IMT}.\n * This implementation exclusively supports binary trees, eliminates the use of\n * zeroes, and the tree's {@link LeanIMT#depth} is dynamic. When a node doesn't have the right child,\n * instead of using a zero hash as in the IMT, the node's value becomes that\n * of its left child. Furthermore, rather than utilizing a static tree depth,\n * it is updated based on the number of {@link LeanIMT#leaves} in the tree. This approach\n * results in the calculation of significantly fewer hashes, making the tree more efficient.\n */\nclass LeanIMT {\n    /**\n     * It initializes the tree with a given hash function and an optional list of leaves.\n     * @param hash The hash function used to create nodes.\n     * @param leaves The list of leaves.\n     */\n    constructor(hash, leaves = []) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(hash, \"hash\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireFunction)(hash, \"hash\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireArray)(leaves, \"leaves\");\n        // Initialize the attributes.\n        this._nodes = [[]];\n        this._hash = hash;\n        // Initialize the tree with a list of leaves if there are any.\n        if (leaves.length > 0) {\n            this.insertMany(leaves);\n        }\n    }\n    /**\n     * The root of the tree. This value doesn't need to be stored as\n     * it is always the first and unique element of the last level of the tree.\n     * Its value can be retrieved in {@link LeanIMT#_nodes}.\n     * @returns The root hash of the tree.\n     */\n    get root() {\n        return this._nodes[this.depth][0];\n    }\n    /**\n     * The depth of the tree, which equals the number of levels - 1.\n     * @returns The depth of the tree.\n     */\n    get depth() {\n        return this._nodes.length - 1;\n    }\n    /**\n     * The leaves of the tree. They can be retrieved from the first\n     * level of the tree using {@link LeanIMT#_nodes}. The returned\n     * value is a copy of the array and not the original object.\n     * @returns The list of tree leaves.\n     */\n    get leaves() {\n        return this._nodes[0].slice();\n    }\n    /**\n     * The size of the tree, which the number of its leaves.\n     * It's the length of the first level's list.\n     * @returns The number of leaves of the tree.\n     */\n    get size() {\n        return this._nodes[0].length;\n    }\n    /**\n     * It returns the index of a leaf. If the leaf does not exist it returns -1.\n     * @param leaf A leaf of the tree.\n     * @returns The index of the leaf.\n     */\n    indexOf(leaf) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(leaf, \"leaf\");\n        return this._nodes[0].indexOf(leaf);\n    }\n    /**\n     * It returns true if the leaf exists, and false otherwise\n     * @param leaf A leaf of the tree.\n     * @returns True if the tree has the leaf, and false otherwise.\n     */\n    has(leaf) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(leaf, \"leaf\");\n        return this._nodes[0].includes(leaf);\n    }\n    /**\n     * The leaves are inserted incrementally. If 'i' is the index of the last\n     * leaf, the new one will be inserted at position 'i + 1'. Every time a\n     * new leaf is inserted, the nodes that separate the new leaf from the root\n     * of the tree are created or updated if they already exist, from bottom to top.\n     * When a node has only one child (the left one), its value takes on the value\n     * of the child. Otherwise, the hash of the children is calculated.\n     * @param leaf The new leaf to be inserted in the tree.\n     */\n    insert(leaf) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(leaf, \"leaf\");\n        // If the next depth is greater, a new tree level will be added.\n        if (this.depth < Math.ceil(Math.log2(this.size + 1))) {\n            // Adding an array is like adding a new level.\n            this._nodes.push([]);\n        }\n        let node = leaf;\n        // The index of the new leaf equals the number of leaves in the tree.\n        let index = this.size;\n        for (let level = 0; level < this.depth; level += 1) {\n            this._nodes[level][index] = node;\n            // Bitwise AND, 0 -> left or 1 -> right.\n            // If the node is a right node the parent node will be the hash\n            // of the child nodes. Otherwise, parent will equal left child node.\n            if (index & 1) {\n                const sibling = this._nodes[level][index - 1];\n                node = this._hash(sibling, node);\n            }\n            // Right shift, it divides a number by 2 and discards the remainder.\n            index >>= 1;\n        }\n        // Store the new root.\n        this._nodes[this.depth] = [node];\n    }\n    /**\n     * This function is useful when you want to insert N leaves all at once.\n     * It is more efficient than using the {@link LeanIMT#insert} method N times because it\n     * significantly reduces the number of cases where a node has only one\n     * child, which is a common occurrence in gradual insertion.\n     * @param leaves The list of leaves to be inserted.\n     */\n    insertMany(leaves) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(leaves, \"leaves\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireArray)(leaves, \"leaves\");\n        if (leaves.length === 0) {\n            throw new Error(\"There are no leaves to add\");\n        }\n        let startIndex = this.size >> 1;\n        this._nodes[0] = this._nodes[0].concat(leaves);\n        // Calculate how many tree levels will need to be added\n        // using the number of leaves.\n        const numberOfNewLevels = Math.ceil(Math.log2(this.size)) - this.depth;\n        // Add the new levels.\n        for (let i = 0; i < numberOfNewLevels; i += 1) {\n            this._nodes.push([]);\n        }\n        for (let level = 0; level < this.depth; level += 1) {\n            // Calculate the number of nodes of the next level.\n            const numberOfNodes = Math.ceil(this._nodes[level].length / 2);\n            for (let index = startIndex; index < numberOfNodes; index += 1) {\n                const rightNode = this._nodes[level][index * 2 + 1];\n                const leftNode = this._nodes[level][index * 2];\n                const parentNode = rightNode ? this._hash(leftNode, rightNode) : leftNode;\n                this._nodes[level + 1][index] = parentNode;\n            }\n            startIndex >>= 1;\n        }\n    }\n    /**\n     * It updates a leaf in the tree. It's very similar to the {@link LeanIMT#insert} function.\n     * @param index The index of the leaf to be updated.\n     * @param newLeaf The new leaf to be inserted.\n     */\n    update(index, newLeaf) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(index, \"index\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(newLeaf, \"newLeaf\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireNumber)(index, \"index\");\n        let node = newLeaf;\n        for (let level = 0; level < this.depth; level += 1) {\n            this._nodes[level][index] = node;\n            if (index & 1) {\n                const sibling = this._nodes[level][index - 1];\n                node = this._hash(sibling, node);\n            }\n            else {\n                // In this case there could still be a right node\n                // because the path might not be the rightmost one\n                // (like the 'insert' function).\n                const sibling = this._nodes[level][index + 1];\n                // If the sibling node does not exist, it means that the node at\n                // this level has the same value as its child. Therefore, there\n                // no hash to calculate.\n                if (sibling !== undefined) {\n                    node = this._hash(node, sibling);\n                }\n            }\n            index >>= 1;\n        }\n        this._nodes[this.depth] = [node];\n    }\n    /**\n     * Updates m leaves all at once.\n     * It is more efficient than using the {@link LeanIMT#update} method m times because it\n     * prevents updating middle nodes several times. This would happen when updating leaves\n     * with common ancestors. The naive approach of calling 'update' m times has complexity\n     * O(m*log(n)) (where n is the number of leaves of the tree), which ends up in\n     * O(n*log(n)) when m ~ n. With this new approach, this ends up being O(n) because every\n     * node is updated at most once and there are around 2*n nodes in the tree.\n     * @param indices The list of indices of the respective leaves.\n     * @param leaves The list of leaves to be updated.\n     */\n    updateMany(indices, leaves) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(leaves, \"leaves\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(indices, \"indices\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireArray)(leaves, \"leaves\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireArray)(indices, \"indices\");\n        if (leaves.length !== indices.length) {\n            throw new Error(\"There is no correspondence between indices and leaves\");\n        }\n        // This will keep track of the outdated nodes of each level.\n        let modifiedIndices = new Set();\n        for (let i = 0; i < indices.length; i += 1) {\n            (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireNumber)(indices[i], `index ${i}`);\n            if (indices[i] < 0 || indices[i] >= this.size) {\n                throw new Error(`Index ${i} is out of range`);\n            }\n            if (modifiedIndices.has(indices[i])) {\n                throw new Error(`Leaf ${indices[i]} is repeated`);\n            }\n            modifiedIndices.add(indices[i]);\n        }\n        modifiedIndices.clear();\n        // First, modify the first level, which consists only of raw, un-hashed values\n        for (let leaf = 0; leaf < indices.length; leaf += 1) {\n            this._nodes[0][indices[leaf]] = leaves[leaf];\n            modifiedIndices.add(indices[leaf] >> 1);\n        }\n        // Now update each node of the corresponding levels\n        for (let level = 1; level <= this.depth; level += 1) {\n            const newModifiedIndices = [];\n            for (const index of modifiedIndices) {\n                const leftChild = this._nodes[level - 1][2 * index];\n                const rightChild = this._nodes[level - 1][2 * index + 1];\n                this._nodes[level][index] = rightChild ? this._hash(leftChild, rightChild) : leftChild;\n                newModifiedIndices.push(index >> 1);\n            }\n            modifiedIndices = new Set(newModifiedIndices);\n        }\n    }\n    /**\n     * It generates a {@link LeanIMTMerkleProof} for a leaf of the tree.\n     * That proof can be verified by this tree using the same hash function.\n     * @param index The index of the leaf for which a Merkle proof will be generated.\n     * @returns The Merkle proof of the leaf.\n     */\n    generateProof(index) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(index, \"index\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireNumber)(index, \"index\");\n        if (index < 0 || index >= this.size) {\n            throw new Error(`The leaf at index '${index}' does not exist in this tree`);\n        }\n        const leaf = this.leaves[index];\n        const siblings = [];\n        const path = [];\n        for (let level = 0; level < this.depth; level += 1) {\n            const isRightNode = index & 1;\n            const siblingIndex = isRightNode ? index - 1 : index + 1;\n            const sibling = this._nodes[level][siblingIndex];\n            // If the sibling node does not exist, it means that the node at\n            // this level has the same value as its child. Therefore, there\n            // is no need to include it in the proof since there is no hash to calculate.\n            if (sibling !== undefined) {\n                path.push(isRightNode);\n                siblings.push(sibling);\n            }\n            index >>= 1;\n        }\n        // The index might be different from the original index of the leaf, since\n        // in some cases some siblings are not included (as explained above).\n        return { root: this.root, leaf, index: Number.parseInt(path.reverse().join(\"\"), 2), siblings };\n    }\n    /**\n     * It verifies a {@link LeanIMTMerkleProof} to confirm that a leaf indeed\n     * belongs to a tree.  Does not verify that the node belongs to this\n     * tree in particular.  Equivalent to\n     * `LeanIMT.verifyProof(proof, this._hash)`.\n     * @param proof The Merkle tree proof.\n     * @returns True if the leaf is part of the tree, and false otherwise.\n     */\n    verifyProof(proof) {\n        return LeanIMT.verifyProof(proof, this._hash);\n    }\n    /**\n     * It verifies a {@link LeanIMTMerkleProof} to confirm that a leaf indeed\n     * belongs to a tree.\n     * @param proof The Merkle tree proof.\n     * @returns True if the leaf is part of the tree, and false otherwise.\n     */\n    static verifyProof(proof, hash) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(proof, \"proof\");\n        const { root, leaf, siblings, index } = proof;\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(proof.root, \"proof.root\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(proof.leaf, \"proof.leaf\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(proof.siblings, \"proof.siblings\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(proof.index, \"proof.index\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireArray)(proof.siblings, \"proof.siblings\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireNumber)(proof.index, \"proof.index\");\n        let node = leaf;\n        for (let i = 0; i < siblings.length; i += 1) {\n            if ((index >> i) & 1) {\n                node = hash(siblings[i], node);\n            }\n            else {\n                node = hash(node, siblings[i]);\n            }\n        }\n        return root === node;\n    }\n    /**\n     * It enables the conversion of the full tree structure into a JSON string,\n     * facilitating future imports of the tree. This approach is beneficial for\n     * large trees, as it saves time by storing hashes instead of recomputing them\n     * @returns The stringified JSON of the tree.\n     */\n    export() {\n        return JSON.stringify(this._nodes, (_, v) => (typeof v === \"bigint\" ? v.toString() : v));\n    }\n    /**\n     * It imports an entire tree by initializing the nodes without calculating\n     * any hashes. Note that it is crucial to ensure the integrity of the tree\n     * before or after importing it. If the map function is not defined, node\n     * values will be converted to bigints by default.\n     * @param hash The hash function used to create nodes.\n     * @param nodes The stringified JSON of the tree.\n     * @param map A function to map each node of the tree and convert their types.\n     * @returns A LeanIMT instance.\n     */\n    static import(hash, nodes, map) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(hash, \"hash\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(nodes, \"nodes\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireFunction)(hash, \"hash\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireString)(nodes, \"nodes\");\n        if (map) {\n            (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireDefined)(map, \"map\");\n            (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireFunction)(map, \"map\");\n        }\n        const tree = new LeanIMT(hash);\n        tree._nodes = JSON.parse(nodes, (_, value) => {\n            if (typeof value === \"string\") {\n                return map ? map(value) : BigInt(value);\n            }\n            return value;\n        });\n        return tree;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/lean-imt/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/lean-imt/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@zk-kit/lean-imt/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requireArray: () => (/* binding */ requireArray),\n/* harmony export */   requireBigInt: () => (/* binding */ requireBigInt),\n/* harmony export */   requireBigNumber: () => (/* binding */ requireBigNumber),\n/* harmony export */   requireBigNumberish: () => (/* binding */ requireBigNumberish),\n/* harmony export */   requireBoolean: () => (/* binding */ requireBoolean),\n/* harmony export */   requireBuffer: () => (/* binding */ requireBuffer),\n/* harmony export */   requireDefined: () => (/* binding */ requireDefined),\n/* harmony export */   requireFunction: () => (/* binding */ requireFunction),\n/* harmony export */   requireHexadecimal: () => (/* binding */ requireHexadecimal),\n/* harmony export */   requireNumber: () => (/* binding */ requireNumber),\n/* harmony export */   requireObject: () => (/* binding */ requireObject),\n/* harmony export */   requireString: () => (/* binding */ requireString),\n/* harmony export */   requireStringifiedBigInt: () => (/* binding */ requireStringifiedBigInt),\n/* harmony export */   requireTypes: () => (/* binding */ requireTypes),\n/* harmony export */   requireUint8Array: () => (/* binding */ requireUint8Array)\n/* harmony export */ });\n/* harmony import */ var _type_checks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./type-checks.js */ \"(ssr)/./node_modules/@zk-kit/lean-imt/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js\");\n/**\n * @module @zk-kit/utils\n * @version 1.3.0\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2025\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n/**\n * @module ErrorHandlers\n * This module is designed to provide utility functions for validating\n * function parameters. It includes functions that throw type errors if\n * the parameters do not meet specified criteria, such as being defined,\n * a number, a string, a function, or an array. This module helps ensure\n * that functions receive the correct types of inputs, enhancing code\n * reliability and reducing runtime errors.\n */\n/**\n * @throws Throws a type error if the parameter value has not been defined.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireDefined(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isDefined)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not defined`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a number.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireNumber(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a number, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a boolean.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBoolean(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBoolean)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a boolean, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a string.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireString(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isString)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a string, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a function.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireFunction(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a function, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not an Array.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireArray(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not an Array instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a Uint8Array.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireUint8Array(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isUint8Array)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a Uint8Array instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a Buffer.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBuffer(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBuffer)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a Buffer instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not an object.\n * Please, note that arrays are also objects in JavaScript.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireObject(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not an object, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bigint.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigInt(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBigInt)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bigint, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a stringified bigint.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireStringifiedBigInt(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isStringifiedBigInt)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a stringified bigint`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a hexadecimal string.\n * If 'prefix' is 'true', the string must start with '0x' or '0X' followed by one or more\n * hexadecimal digits (0-9, a-f, A-F), otherwise no prefix is expected. 'prefix' is optional and\n * if its value it is not explicitly defined it will be set to 'true' by default.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n * @param prefix A boolean to include or not a '0x' or '0X' prefix.\n */\nfunction requireHexadecimal(parameterValue, parameterName, prefix = true) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isHexadecimal)(parameterValue, prefix)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a hexadecimal string`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bignumber.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigNumber(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBigNumber)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bignumber`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bignumber-ish.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigNumberish(parameterValue, parameterName) {\n    if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isBigNumberish)(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bignumber-ish`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value type is not part of the list of types.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireTypes(parameterValue, parameterName, types) {\n    for (const type of types) {\n        if (!(0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isSupportedType)(type)) {\n            throw new Error(`Type '${type}' is not supported`);\n        }\n    }\n    for (const type of types) {\n        if ((0,_type_checks_js__WEBPACK_IMPORTED_MODULE_0__.isType)(parameterValue, type)) {\n            return;\n        }\n    }\n    throw new TypeError(`Parameter '${parameterName}' is none of the following types: ${types.join(\", \")}`);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHprLWtpdC9sZWFuLWltdC9ub2RlX21vZHVsZXMvQHprLWtpdC91dGlscy9kaXN0L2xpYi5lc20vZXJyb3ItaGFuZGxlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUN1Tzs7QUFFdk87QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywwREFBUztBQUNsQiwwQ0FBMEMsY0FBYztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx5REFBUTtBQUNqQiwwQ0FBMEMsY0FBYyxvQ0FBb0Msc0JBQXNCO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDBEQUFTO0FBQ2xCLDBDQUEwQyxjQUFjLHFDQUFxQyxzQkFBc0I7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMseURBQVE7QUFDakIsMENBQTBDLGNBQWMsb0NBQW9DLHNCQUFzQjtBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywyREFBVTtBQUNuQiwwQ0FBMEMsY0FBYyxzQ0FBc0Msc0JBQXNCO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHdEQUFPO0FBQ2hCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDZEQUFZO0FBQ3JCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHlEQUFRO0FBQ2pCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMseURBQVE7QUFDakIsMENBQTBDLGNBQWMscUNBQXFDLHNCQUFzQjtBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx5REFBUTtBQUNqQiwwQ0FBMEMsY0FBYyxvQ0FBb0Msc0JBQXNCO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLG9FQUFtQjtBQUM1QiwwQ0FBMEMsY0FBYztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDhEQUFhO0FBQ3RCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDREQUFXO0FBQ3BCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLCtEQUFjO0FBQ3ZCLDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0VBQWU7QUFDNUIscUNBQXFDLEtBQUs7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsWUFBWSx1REFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsY0FBYyxvQ0FBb0MsaUJBQWlCO0FBQ3pHOztBQUUwUSIsInNvdXJjZXMiOlsiL1VzZXJzL2NoYW5jZW1jYWxsaXN0ZXIvUHJvamVjdHMvenVwYXNzaHVudC9ub2RlX21vZHVsZXMvQHprLWtpdC9sZWFuLWltdC9ub2RlX21vZHVsZXMvQHprLWtpdC91dGlscy9kaXN0L2xpYi5lc20vZXJyb3ItaGFuZGxlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIEB6ay1raXQvdXRpbHNcbiAqIEB2ZXJzaW9uIDEuMy4wXG4gKiBAZmlsZSBFc3NlbnRpYWwgemVyby1rbm93bGVkZ2UgdXRpbGl0eSBsaWJyYXJ5IGZvciBKYXZhU2NyaXB0IGRldmVsb3BlcnMuXG4gKiBAY29weXJpZ2h0IEV0aGVyZXVtIEZvdW5kYXRpb24gMjAyNVxuICogQGxpY2Vuc2UgTUlUXG4gKiBAc2VlIFtHaXRodWJde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9wcml2YWN5LXNjYWxpbmctZXhwbG9yYXRpb25zL3prLWtpdC90cmVlL21haW4vcGFja2FnZXMvdXRpbHN9XG4qL1xuaW1wb3J0IHsgaXNEZWZpbmVkLCBpc051bWJlciwgaXNCb29sZWFuLCBpc1N0cmluZywgaXNGdW5jdGlvbiwgaXNBcnJheSwgaXNVaW50OEFycmF5LCBpc0J1ZmZlciwgaXNPYmplY3QsIGlzQmlnSW50LCBpc1N0cmluZ2lmaWVkQmlnSW50LCBpc0hleGFkZWNpbWFsLCBpc0JpZ051bWJlciwgaXNCaWdOdW1iZXJpc2gsIGlzU3VwcG9ydGVkVHlwZSwgaXNUeXBlIH0gZnJvbSAnLi90eXBlLWNoZWNrcy5qcyc7XG5cbi8qKlxuICogQG1vZHVsZSBFcnJvckhhbmRsZXJzXG4gKiBUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBwcm92aWRlIHV0aWxpdHkgZnVuY3Rpb25zIGZvciB2YWxpZGF0aW5nXG4gKiBmdW5jdGlvbiBwYXJhbWV0ZXJzLiBJdCBpbmNsdWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvdyB0eXBlIGVycm9ycyBpZlxuICogdGhlIHBhcmFtZXRlcnMgZG8gbm90IG1lZXQgc3BlY2lmaWVkIGNyaXRlcmlhLCBzdWNoIGFzIGJlaW5nIGRlZmluZWQsXG4gKiBhIG51bWJlciwgYSBzdHJpbmcsIGEgZnVuY3Rpb24sIG9yIGFuIGFycmF5LiBUaGlzIG1vZHVsZSBoZWxwcyBlbnN1cmVcbiAqIHRoYXQgZnVuY3Rpb25zIHJlY2VpdmUgdGhlIGNvcnJlY3QgdHlwZXMgb2YgaW5wdXRzLCBlbmhhbmNpbmcgY29kZVxuICogcmVsaWFiaWxpdHkgYW5kIHJlZHVjaW5nIHJ1bnRpbWUgZXJyb3JzLlxuICovXG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGhhcyBub3QgYmVlbiBkZWZpbmVkLlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlIFRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyTmFtZSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVEZWZpbmVkKHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc0RlZmluZWQocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGRlZmluZWRgKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIG51bWJlci5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlTnVtYmVyKHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc051bWJlcihwYXJhbWV0ZXJWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYSBudW1iZXIsIHJlY2VpdmVkIHR5cGU6ICR7dHlwZW9mIHBhcmFtZXRlclZhbHVlfWApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGEgYm9vbGVhbi5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlQm9vbGVhbihwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNCb29sZWFuKHBhcmFtZXRlclZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vdCBhIGJvb2xlYW4sIHJlY2VpdmVkIHR5cGU6ICR7dHlwZW9mIHBhcmFtZXRlclZhbHVlfWApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGEgc3RyaW5nLlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlIFRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyTmFtZSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVTdHJpbmcocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUpIHtcbiAgICBpZiAoIWlzU3RyaW5nKHBhcmFtZXRlclZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vdCBhIHN0cmluZywgcmVjZWl2ZWQgdHlwZTogJHt0eXBlb2YgcGFyYW1ldGVyVmFsdWV9YCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBub3QgYSBmdW5jdGlvbi5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlRnVuY3Rpb24ocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgZnVuY3Rpb24sIHJlY2VpdmVkIHR5cGU6ICR7dHlwZW9mIHBhcmFtZXRlclZhbHVlfWApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGFuIEFycmF5LlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlIFRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyTmFtZSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVBcnJheShwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNBcnJheShwYXJhbWV0ZXJWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYW4gQXJyYXkgaW5zdGFuY2VgKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIFVpbnQ4QXJyYXkuXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZVVpbnQ4QXJyYXkocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUpIHtcbiAgICBpZiAoIWlzVWludDhBcnJheShwYXJhbWV0ZXJWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYSBVaW50OEFycmF5IGluc3RhbmNlYCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBub3QgYSBCdWZmZXIuXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgVGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJOYW1lIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZUJ1ZmZlcihwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNCdWZmZXIocGFyYW1ldGVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm90IGEgQnVmZmVyIGluc3RhbmNlYCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBub3QgYW4gb2JqZWN0LlxuICogUGxlYXNlLCBub3RlIHRoYXQgYXJyYXlzIGFyZSBhbHNvIG9iamVjdHMgaW4gSmF2YVNjcmlwdC5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlT2JqZWN0KHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc09iamVjdChwYXJhbWV0ZXJWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYW4gb2JqZWN0LCByZWNlaXZlZCB0eXBlOiAke3R5cGVvZiBwYXJhbWV0ZXJWYWx1ZX1gKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIGJpZ2ludC5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlQmlnSW50KHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc0JpZ0ludChwYXJhbWV0ZXJWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYSBiaWdpbnQsIHJlY2VpdmVkIHR5cGU6ICR7dHlwZW9mIHBhcmFtZXRlclZhbHVlfWApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGEgc3RyaW5naWZpZWQgYmlnaW50LlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlIFRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyTmFtZSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVTdHJpbmdpZmllZEJpZ0ludChwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSkge1xuICAgIGlmICghaXNTdHJpbmdpZmllZEJpZ0ludChwYXJhbWV0ZXJWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYSBzdHJpbmdpZmllZCBiaWdpbnRgKTtcbiAgICB9XG59XG4vKipcbiAqIEB0aHJvd3MgVGhyb3dzIGEgdHlwZSBlcnJvciBpZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBhIGhleGFkZWNpbWFsIHN0cmluZy5cbiAqIElmICdwcmVmaXgnIGlzICd0cnVlJywgdGhlIHN0cmluZyBtdXN0IHN0YXJ0IHdpdGggJzB4JyBvciAnMFgnIGZvbGxvd2VkIGJ5IG9uZSBvciBtb3JlXG4gKiBoZXhhZGVjaW1hbCBkaWdpdHMgKDAtOSwgYS1mLCBBLUYpLCBvdGhlcndpc2Ugbm8gcHJlZml4IGlzIGV4cGVjdGVkLiAncHJlZml4JyBpcyBvcHRpb25hbCBhbmRcbiAqIGlmIGl0cyB2YWx1ZSBpdCBpcyBub3QgZXhwbGljaXRseSBkZWZpbmVkIGl0IHdpbGwgYmUgc2V0IHRvICd0cnVlJyBieSBkZWZhdWx0LlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlIFRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyTmFtZSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gKiBAcGFyYW0gcHJlZml4IEEgYm9vbGVhbiB0byBpbmNsdWRlIG9yIG5vdCBhICcweCcgb3IgJzBYJyBwcmVmaXguXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVIZXhhZGVjaW1hbChwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSwgcHJlZml4ID0gdHJ1ZSkge1xuICAgIGlmICghaXNIZXhhZGVjaW1hbChwYXJhbWV0ZXJWYWx1ZSwgcHJlZml4KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vdCBhIGhleGFkZWNpbWFsIHN0cmluZ2ApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGEgYmlnbnVtYmVyLlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlIFRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyTmFtZSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVCaWdOdW1iZXIocGFyYW1ldGVyVmFsdWUsIHBhcmFtZXRlck5hbWUpIHtcbiAgICBpZiAoIWlzQmlnTnVtYmVyKHBhcmFtZXRlclZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJyR7cGFyYW1ldGVyTmFtZX0nIGlzIG5vdCBhIGJpZ251bWJlcmApO1xuICAgIH1cbn1cbi8qKlxuICogQHRocm93cyBUaHJvd3MgYSB0eXBlIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IGEgYmlnbnVtYmVyLWlzaC5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIHBhcmFtZXRlciBuYW1lLlxuICovXG5mdW5jdGlvbiByZXF1aXJlQmlnTnVtYmVyaXNoKHBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJOYW1lKSB7XG4gICAgaWYgKCFpc0JpZ051bWJlcmlzaChwYXJhbWV0ZXJWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBpcyBub3QgYSBiaWdudW1iZXItaXNoYCk7XG4gICAgfVxufVxuLyoqXG4gKiBAdGhyb3dzIFRocm93cyBhIHR5cGUgZXJyb3IgaWYgdGhlIHBhcmFtZXRlciB2YWx1ZSB0eXBlIGlzIG5vdCBwYXJ0IG9mIHRoZSBsaXN0IG9mIHR5cGVzLlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlIFRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyTmFtZSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVUeXBlcyhwYXJhbWV0ZXJWYWx1ZSwgcGFyYW1ldGVyTmFtZSwgdHlwZXMpIHtcbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdHlwZXMpIHtcbiAgICAgICAgaWYgKCFpc1N1cHBvcnRlZFR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVHlwZSAnJHt0eXBlfScgaXMgbm90IHN1cHBvcnRlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgdHlwZSBvZiB0eXBlcykge1xuICAgICAgICBpZiAoaXNUeXBlKHBhcmFtZXRlclZhbHVlLCB0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhcmFtZXRlciAnJHtwYXJhbWV0ZXJOYW1lfScgaXMgbm9uZSBvZiB0aGUgZm9sbG93aW5nIHR5cGVzOiAke3R5cGVzLmpvaW4oXCIsIFwiKX1gKTtcbn1cblxuZXhwb3J0IHsgcmVxdWlyZUFycmF5LCByZXF1aXJlQmlnSW50LCByZXF1aXJlQmlnTnVtYmVyLCByZXF1aXJlQmlnTnVtYmVyaXNoLCByZXF1aXJlQm9vbGVhbiwgcmVxdWlyZUJ1ZmZlciwgcmVxdWlyZURlZmluZWQsIHJlcXVpcmVGdW5jdGlvbiwgcmVxdWlyZUhleGFkZWNpbWFsLCByZXF1aXJlTnVtYmVyLCByZXF1aXJlT2JqZWN0LCByZXF1aXJlU3RyaW5nLCByZXF1aXJlU3RyaW5naWZpZWRCaWdJbnQsIHJlcXVpcmVUeXBlcywgcmVxdWlyZVVpbnQ4QXJyYXkgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/lean-imt/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/lean-imt/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@zk-kit/lean-imt/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBigInt: () => (/* binding */ isBigInt),\n/* harmony export */   isBigNumber: () => (/* binding */ isBigNumber),\n/* harmony export */   isBigNumberish: () => (/* binding */ isBigNumberish),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isBuffer: () => (/* binding */ isBuffer),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isHexadecimal: () => (/* binding */ isHexadecimal),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isStringifiedBigInt: () => (/* binding */ isStringifiedBigInt),\n/* harmony export */   isSupportedType: () => (/* binding */ isSupportedType),\n/* harmony export */   isType: () => (/* binding */ isType),\n/* harmony export */   isUint8Array: () => (/* binding */ isUint8Array),\n/* harmony export */   supportedTypes: () => (/* binding */ supportedTypes)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/**\n * @module @zk-kit/utils\n * @version 1.3.0\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2025\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n/**\n * @module TypeChecks\n * This module provides utility functions to check data types.\n * It defines a set of supported types and includes functions to check if\n * a value is defined and if it matches a supported type. These functions\n * are useful for type checking and validation in the other libraries,\n * enhancing code robustness and reliability.\n */\n/** @internal */\nconst supportedTypes = [\n    \"number\",\n    \"boolean\",\n    \"string\",\n    \"function\",\n    \"Array\",\n    \"Uint8Array\",\n    \"Buffer\",\n    \"object\",\n    \"bigint\",\n    \"stringified-bigint\",\n    \"hexadecimal\",\n    \"bignumber\",\n    \"bignumberish\"\n];\n/**\n * Returns true if the value is defined, false otherwise.\n * @param value The value to be checked.\n */\nfunction isDefined(value) {\n    return typeof value !== \"undefined\";\n}\n/**\n * Returns true if the value is a number, false otherwise.\n * @param value The value to be checked.\n */\nfunction isNumber(value) {\n    return typeof value === \"number\";\n}\n/**\n * Returns true if the value is a boolean, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBoolean(value) {\n    return typeof value === \"boolean\";\n}\n/**\n * Returns true if the value is a string, false otherwise.\n * @param value The value to be checked.\n */\nfunction isString(value) {\n    return typeof value === \"string\";\n}\n/**\n * Returns true if the value is a function, false otherwise.\n * @param value The value to be checked.\n */\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\n/**\n * Returns true if the value is an object, false otherwise.\n * Please, note that arrays are also objects in JavaScript.\n * @param value The value to be checked.\n */\nfunction isObject(value) {\n    return typeof value === \"object\";\n}\n/**\n * Returns true if the value is an Array instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isArray(value) {\n    return isObject(value) && Array.isArray(value);\n}\n/**\n * Returns true if the value is a Uint8Array instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isUint8Array(value) {\n    return value instanceof Uint8Array;\n}\n/**\n * Returns true if the value is a Buffer instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBuffer(value) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(value);\n}\n/**\n * Returns true if the value is a bigint, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBigInt(value) {\n    return typeof value === \"bigint\";\n}\n/**\n * Checks if the given value is a string that represents a valid bigint.\n * @param value The value to be checked if it's a stringified bigint.\n */\nfunction isStringifiedBigInt(value) {\n    // Check if value is a string first.\n    if (!isString(value)) {\n        return false;\n    }\n    try {\n        // Attempt to convert the string to BigInt.\n        BigInt(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Checks if a string is a valid hexadecimal string representation.\n * If 'prefix' is 'true', the string must start with '0x' or '0X' followed by one or more\n * hexadecimal digits (0-9, a-f, A-F), otherwise no prefix is expected. 'prefix' is optional and\n * if its value it is not explicitly defined it will be set to 'true' by default.\n * @param value The string to be tested.\n * @param prefix A boolean to include or not a '0x' or '0X' prefix.\n */\nfunction isHexadecimal(value, prefix = true) {\n    if (!isString(value)) {\n        return false;\n    }\n    if (prefix) {\n        return /^(0x|0X)[0-9a-fA-F]+$/.test(value);\n    }\n    return /^[0-9a-fA-F]+$/.test(value);\n}\n/**\n * Checks if the given value can be considered as BigNumber.\n * A value is considered a BigNumber if it is a bigint or a string\n * that can be converted to a bigint (via `Bigint(s)`).\n * @param value The value to check.\n */\nfunction isBigNumber(value) {\n    return isBigInt(value) || isStringifiedBigInt(value);\n}\n/**\n * Checks if the given value can be considered as BigNumberish.\n * A value is considered BigNumberish if it meets\n * any of the following conditions: it's a number, a bigint, a string\n * that can be converted to a bigint, a hexadecimal\n * string, or a Buffer object.\n * @param value The value to check.\n */\nfunction isBigNumberish(value) {\n    return (isNumber(value) ||\n        isBigInt(value) ||\n        isStringifiedBigInt(value) ||\n        isHexadecimal(value) ||\n        isBuffer(value) ||\n        isUint8Array(value));\n}\n/**\n * Returns true if the value type is the same as the type passed\n * as the second parameter, false otherwise.\n * @param value\n * @param type The expected type.\n */\nfunction isType(value, type) {\n    switch (type) {\n        case \"number\":\n            return isNumber(value);\n        case \"boolean\":\n            return isBoolean(value);\n        case \"string\":\n            return isString(value);\n        case \"function\":\n            return isFunction(value);\n        case \"Array\":\n            return isArray(value);\n        case \"Uint8Array\":\n            return isUint8Array(value);\n        case \"Buffer\":\n            return isBuffer(value);\n        case \"object\":\n            return isObject(value);\n        case \"bigint\":\n            return isBigInt(value);\n        case \"stringified-bigint\":\n            return isStringifiedBigInt(value);\n        case \"hexadecimal\":\n            return isHexadecimal(value);\n        case \"bignumber\":\n            return isBigNumber(value);\n        case \"bignumberish\":\n            return isBigNumberish(value);\n        default:\n            return false;\n    }\n}\n/**\n * Returns true if the type is being supported by this utility\n * functions, false otherwise.\n * @param type The type to be checked.\n */\nfunction isSupportedType(type) {\n    return supportedTypes.includes(type);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/lean-imt/node_modules/@zk-kit/utils/dist/lib.esm/type-checks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-kit/utils/dist/index.node.js":
/*!*******************************************************!*\
  !*** ./node_modules/@zk-kit/utils/dist/index.node.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Buffer: () => (/* reexport safe */ buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer),\n/* harmony export */   F1Field: () => (/* binding */ F1Field),\n/* harmony export */   base64ToBuffer: () => (/* binding */ base64ToBuffer),\n/* harmony export */   base64ToText: () => (/* binding */ base64ToText),\n/* harmony export */   beBigIntToBuffer: () => (/* binding */ beBigIntToBuffer),\n/* harmony export */   beBufferToBigInt: () => (/* binding */ beBufferToBigInt),\n/* harmony export */   bigIntToBuffer: () => (/* binding */ bigIntToBuffer),\n/* harmony export */   bigIntToHexadecimal: () => (/* binding */ bigIntToHexadecimal),\n/* harmony export */   bigNumberishToBigInt: () => (/* binding */ bigNumberishToBigInt),\n/* harmony export */   bigNumberishToBuffer: () => (/* binding */ bigNumberishToBuffer),\n/* harmony export */   bufferToBase64: () => (/* binding */ bufferToBase64),\n/* harmony export */   bufferToBigInt: () => (/* binding */ bufferToBigInt),\n/* harmony export */   bufferToHexadecimal: () => (/* binding */ bufferToHexadecimal),\n/* harmony export */   conversions: () => (/* binding */ conversions),\n/* harmony export */   crypto: () => (/* binding */ crypto_node),\n/* harmony export */   errorHandlers: () => (/* binding */ errorHandlers),\n/* harmony export */   hexadecimalToBigInt: () => (/* binding */ hexadecimalToBigInt),\n/* harmony export */   hexadecimalToBuffer: () => (/* binding */ hexadecimalToBuffer),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBigInt: () => (/* binding */ isBigInt),\n/* harmony export */   isBigNumber: () => (/* binding */ isBigNumber),\n/* harmony export */   isBigNumberish: () => (/* binding */ isBigNumberish),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isBuffer: () => (/* binding */ isBuffer),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isHexadecimal: () => (/* binding */ isHexadecimal),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isStringifiedBigInt: () => (/* binding */ isStringifiedBigInt),\n/* harmony export */   isSupportedType: () => (/* binding */ isSupportedType),\n/* harmony export */   isType: () => (/* binding */ isType),\n/* harmony export */   isUint8Array: () => (/* binding */ isUint8Array),\n/* harmony export */   leBigIntToBuffer: () => (/* binding */ leBigIntToBuffer),\n/* harmony export */   leBufferToBigInt: () => (/* binding */ leBufferToBigInt),\n/* harmony export */   packFflonkProof: () => (/* binding */ packFflonkProof),\n/* harmony export */   packGroth16Proof: () => (/* binding */ packGroth16Proof),\n/* harmony export */   packPlonkProof: () => (/* binding */ packPlonkProof),\n/* harmony export */   packing: () => (/* binding */ proofPacking),\n/* harmony export */   requireArray: () => (/* binding */ requireArray),\n/* harmony export */   requireBigInt: () => (/* binding */ requireBigInt),\n/* harmony export */   requireBigNumber: () => (/* binding */ requireBigNumber),\n/* harmony export */   requireBigNumberish: () => (/* binding */ requireBigNumberish),\n/* harmony export */   requireBoolean: () => (/* binding */ requireBoolean),\n/* harmony export */   requireBuffer: () => (/* binding */ requireBuffer),\n/* harmony export */   requireDefined: () => (/* binding */ requireDefined),\n/* harmony export */   requireFunction: () => (/* binding */ requireFunction),\n/* harmony export */   requireHexadecimal: () => (/* binding */ requireHexadecimal),\n/* harmony export */   requireNumber: () => (/* binding */ requireNumber),\n/* harmony export */   requireObject: () => (/* binding */ requireObject),\n/* harmony export */   requireString: () => (/* binding */ requireString),\n/* harmony export */   requireStringifiedBigInt: () => (/* binding */ requireStringifiedBigInt),\n/* harmony export */   requireTypes: () => (/* binding */ requireTypes),\n/* harmony export */   requireUint8Array: () => (/* binding */ requireUint8Array),\n/* harmony export */   scalar: () => (/* binding */ scalar),\n/* harmony export */   supportedTypes: () => (/* binding */ supportedTypes),\n/* harmony export */   textToBase64: () => (/* binding */ textToBase64),\n/* harmony export */   typeChecks: () => (/* binding */ typeChecks),\n/* harmony export */   unpackFflonkProof: () => (/* binding */ unpackFflonkProof),\n/* harmony export */   unpackGroth16Proof: () => (/* binding */ unpackGroth16Proof),\n/* harmony export */   unpackPlonkProof: () => (/* binding */ unpackPlonkProof)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var ethers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers/utils */ \"(ssr)/./node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var ethers_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers/utils */ \"(ssr)/./node_modules/ethers/lib.esm/utils/maths.js\");\n/**\n * @module @zk-kit/utils\n * @version 1.4.1\n * @file Essential zero-knowledge utility library for JavaScript developers.\n * @copyright Ethereum Foundation 2025\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/utils}\n*/\n\n\n\n\n\n/**\n * @module TypeChecks\n * This module provides utility functions to check data types.\n * It defines a set of supported types and includes functions to check if\n * a value is defined and if it matches a supported type. These functions\n * are useful for type checking and validation in the other libraries,\n * enhancing code robustness and reliability.\n */\n/** @internal */\nconst supportedTypes = [\n    \"number\",\n    \"boolean\",\n    \"string\",\n    \"function\",\n    \"Array\",\n    \"Uint8Array\",\n    \"Buffer\",\n    \"object\",\n    \"bigint\",\n    \"stringified-bigint\",\n    \"hexadecimal\",\n    \"bignumber\",\n    \"bignumberish\"\n];\n/**\n * Returns true if the value is defined, false otherwise.\n * @param value The value to be checked.\n */\nfunction isDefined(value) {\n    return typeof value !== \"undefined\";\n}\n/**\n * Returns true if the value is a number, false otherwise.\n * @param value The value to be checked.\n */\nfunction isNumber(value) {\n    return typeof value === \"number\";\n}\n/**\n * Returns true if the value is a boolean, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBoolean(value) {\n    return typeof value === \"boolean\";\n}\n/**\n * Returns true if the value is a string, false otherwise.\n * @param value The value to be checked.\n */\nfunction isString(value) {\n    return typeof value === \"string\";\n}\n/**\n * Returns true if the value is a function, false otherwise.\n * @param value The value to be checked.\n */\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\n/**\n * Returns true if the value is an object, false otherwise.\n * Please, note that arrays are also objects in JavaScript.\n * @param value The value to be checked.\n */\nfunction isObject(value) {\n    return typeof value === \"object\";\n}\n/**\n * Returns true if the value is an Array instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isArray(value) {\n    return isObject(value) && Array.isArray(value);\n}\n/**\n * Returns true if the value is a Uint8Array instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isUint8Array(value) {\n    return value instanceof Uint8Array;\n}\n/**\n * Returns true if the value is a Buffer instance, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBuffer(value) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(value);\n}\n/**\n * Returns true if the value is a bigint, false otherwise.\n * @param value The value to be checked.\n */\nfunction isBigInt(value) {\n    return typeof value === \"bigint\";\n}\n/**\n * Checks if the given value is a string that represents a valid bigint.\n * @param value The value to be checked if it's a stringified bigint.\n */\nfunction isStringifiedBigInt(value) {\n    // Check if value is a string first.\n    if (!isString(value)) {\n        return false;\n    }\n    try {\n        // Attempt to convert the string to BigInt.\n        BigInt(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Checks if a string is a valid hexadecimal string representation.\n * If 'prefix' is 'true', the string must start with '0x' or '0X' followed by one or more\n * hexadecimal digits (0-9, a-f, A-F), otherwise no prefix is expected. 'prefix' is optional and\n * if its value it is not explicitly defined it will be set to 'true' by default.\n * @param value The string to be tested.\n * @param prefix A boolean to include or not a '0x' or '0X' prefix.\n */\nfunction isHexadecimal(value, prefix = true) {\n    if (!isString(value)) {\n        return false;\n    }\n    if (prefix) {\n        return /^(0x|0X)[0-9a-fA-F]+$/.test(value);\n    }\n    return /^[0-9a-fA-F]+$/.test(value);\n}\n/**\n * Checks if the given value can be considered as BigNumber.\n * A value is considered a BigNumber if it is a bigint or a string\n * that can be converted to a bigint (via `Bigint(s)`).\n * @param value The value to check.\n */\nfunction isBigNumber(value) {\n    return isBigInt(value) || isStringifiedBigInt(value);\n}\n/**\n * Checks if the given value can be considered as BigNumberish.\n * A value is considered BigNumberish if it meets\n * any of the following conditions: it's a number, a bigint, a string\n * that can be converted to a bigint, a hexadecimal\n * string, or a Buffer object.\n * @param value The value to check.\n */\nfunction isBigNumberish(value) {\n    return (isNumber(value) ||\n        isBigInt(value) ||\n        isStringifiedBigInt(value) ||\n        isHexadecimal(value) ||\n        isBuffer(value) ||\n        isUint8Array(value));\n}\n/**\n * Returns true if the value type is the same as the type passed\n * as the second parameter, false otherwise.\n * @param value\n * @param type The expected type.\n */\nfunction isType(value, type) {\n    switch (type) {\n        case \"number\":\n            return isNumber(value);\n        case \"boolean\":\n            return isBoolean(value);\n        case \"string\":\n            return isString(value);\n        case \"function\":\n            return isFunction(value);\n        case \"Array\":\n            return isArray(value);\n        case \"Uint8Array\":\n            return isUint8Array(value);\n        case \"Buffer\":\n            return isBuffer(value);\n        case \"object\":\n            return isObject(value);\n        case \"bigint\":\n            return isBigInt(value);\n        case \"stringified-bigint\":\n            return isStringifiedBigInt(value);\n        case \"hexadecimal\":\n            return isHexadecimal(value);\n        case \"bignumber\":\n            return isBigNumber(value);\n        case \"bignumberish\":\n            return isBigNumberish(value);\n        default:\n            return false;\n    }\n}\n/**\n * Returns true if the type is being supported by this utility\n * functions, false otherwise.\n * @param type The type to be checked.\n */\nfunction isSupportedType(type) {\n    return supportedTypes.includes(type);\n}\n\nvar typeChecks = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    isArray: isArray,\n    isBigInt: isBigInt,\n    isBigNumber: isBigNumber,\n    isBigNumberish: isBigNumberish,\n    isBoolean: isBoolean,\n    isBuffer: isBuffer,\n    isDefined: isDefined,\n    isFunction: isFunction,\n    isHexadecimal: isHexadecimal,\n    isNumber: isNumber,\n    isObject: isObject,\n    isString: isString,\n    isStringifiedBigInt: isStringifiedBigInt,\n    isSupportedType: isSupportedType,\n    isType: isType,\n    isUint8Array: isUint8Array,\n    supportedTypes: supportedTypes\n});\n\n/**\n * @module ErrorHandlers\n * This module is designed to provide utility functions for validating\n * function parameters. It includes functions that throw type errors if\n * the parameters do not meet specified criteria, such as being defined,\n * a number, a string, a function, or an array. This module helps ensure\n * that functions receive the correct types of inputs, enhancing code\n * reliability and reducing runtime errors.\n */\n/**\n * @throws Throws a type error if the parameter value has not been defined.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireDefined(parameterValue, parameterName) {\n    if (!isDefined(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not defined`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a number.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireNumber(parameterValue, parameterName) {\n    if (!isNumber(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a number, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a boolean.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBoolean(parameterValue, parameterName) {\n    if (!isBoolean(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a boolean, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a string.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireString(parameterValue, parameterName) {\n    if (!isString(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a string, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a function.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireFunction(parameterValue, parameterName) {\n    if (!isFunction(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a function, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not an Array.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireArray(parameterValue, parameterName) {\n    if (!isArray(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not an Array instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a Uint8Array.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireUint8Array(parameterValue, parameterName) {\n    if (!isUint8Array(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a Uint8Array instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a Buffer.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBuffer(parameterValue, parameterName) {\n    if (!isBuffer(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a Buffer instance`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not an object.\n * Please, note that arrays are also objects in JavaScript.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireObject(parameterValue, parameterName) {\n    if (!isObject(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not an object, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bigint.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigInt(parameterValue, parameterName) {\n    if (!isBigInt(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bigint, received type: ${typeof parameterValue}`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a stringified bigint.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireStringifiedBigInt(parameterValue, parameterName) {\n    if (!isStringifiedBigInt(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a stringified bigint`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a hexadecimal string.\n * If 'prefix' is 'true', the string must start with '0x' or '0X' followed by one or more\n * hexadecimal digits (0-9, a-f, A-F), otherwise no prefix is expected. 'prefix' is optional and\n * if its value it is not explicitly defined it will be set to 'true' by default.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n * @param prefix A boolean to include or not a '0x' or '0X' prefix.\n */\nfunction requireHexadecimal(parameterValue, parameterName, prefix = true) {\n    if (!isHexadecimal(parameterValue, prefix)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a hexadecimal string`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bignumber.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigNumber(parameterValue, parameterName) {\n    if (!isBigNumber(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bignumber`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value is not a bignumber-ish.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireBigNumberish(parameterValue, parameterName) {\n    if (!isBigNumberish(parameterValue)) {\n        throw new TypeError(`Parameter '${parameterName}' is not a bignumber-ish`);\n    }\n}\n/**\n * @throws Throws a type error if the parameter value type is not part of the list of types.\n * @param parameterValue The parameter value.\n * @param parameterName The parameter name.\n */\nfunction requireTypes(parameterValue, parameterName, types) {\n    for (const type of types) {\n        if (!isSupportedType(type)) {\n            throw new Error(`Type '${type}' is not supported`);\n        }\n    }\n    for (const type of types) {\n        if (isType(parameterValue, type)) {\n            return;\n        }\n    }\n    throw new TypeError(`Parameter '${parameterName}' is none of the following types: ${types.join(\", \")}`);\n}\n\nvar errorHandlers = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    requireArray: requireArray,\n    requireBigInt: requireBigInt,\n    requireBigNumber: requireBigNumber,\n    requireBigNumberish: requireBigNumberish,\n    requireBoolean: requireBoolean,\n    requireBuffer: requireBuffer,\n    requireDefined: requireDefined,\n    requireFunction: requireFunction,\n    requireHexadecimal: requireHexadecimal,\n    requireNumber: requireNumber,\n    requireObject: requireObject,\n    requireString: requireString,\n    requireStringifiedBigInt: requireStringifiedBigInt,\n    requireTypes: requireTypes,\n    requireUint8Array: requireUint8Array\n});\n\n/**\n * @module Conversions\n * This module provides a collection of utility functions for converting\n * between different numerical formats, particularly focusing on\n * conversions involving bigints, hexadecimals and buffers.\n * The module is structured with clear function naming to indicate\n * the conversion direction (e.g., `bigIntToHexadecimal` for BigInt\n * to hexadecimal, `bufferToBigInt` for buffer to bigint) and employs\n * type checks to ensure the correct handling of various input types.\n * It also includes variations for both big-endian (`be`) and little-endian\n * (`le`) conversions. It is important to note that when there is no prefix,\n * the order of bytes is always big-endian.\n */\n/**\n * Converts a bigint to a hexadecimal string.\n * @param value The bigint value to convert.\n * @returns The hexadecimal representation of the bigint.\n */\nfunction bigIntToHexadecimal(value) {\n    requireBigInt(value, \"value\");\n    let hex = value.toString(16);\n    // Ensure even length.\n    if (hex.length % 2 !== 0) {\n        hex = `0${hex}`;\n    }\n    return hex;\n}\n/**\n * Converts a hexadecimal string to a bigint. The input is interpreted as hexadecimal\n * with or without a '0x' prefix. It uses big-endian byte order.\n * @param value The hexadecimal string to convert.\n * @returns The bigint representation of the hexadecimal string.\n */\nfunction hexadecimalToBigInt(value) {\n    if (!isHexadecimal(value) && !isHexadecimal(value, false)) {\n        throw new TypeError(`Parameter 'value' is not a hexadecimal string`);\n    }\n    // Ensure the hex string starts with '0x'.\n    const formattedHexString = value.startsWith(\"0x\") ? value : `0x${value}`;\n    return BigInt(formattedHexString);\n}\n/**\n * Converts a buffer of bytes to a bigint using big-endian byte order.\n * It accepts 'Buffer' or 'Uint8Array'.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents.\n */\nfunction beBufferToBigInt(value) {\n    requireTypes(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return BigInt(`0x${buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"hex\")}`);\n}\n/**\n * Converts a buffer to a bigint using little-endian byte order.\n * It accepts 'Buffer' or 'Uint8Array'.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents in little-endian.\n */\nfunction leBufferToBigInt(value) {\n    requireTypes(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return BigInt(`0x${buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).reverse().toString(\"hex\")}`);\n}\n/**\n * Converts a buffer to a bigint. Alias for beBufferToBigInt.\n * @param value The buffer to convert.\n * @returns The bigint representation of the buffer's contents.\n */\nfunction bufferToBigInt(value) {\n    return beBufferToBigInt(value);\n}\n/**\n * Converts a bigint to a buffer and fills with zeros if a valid\n * size (i.e. number of bytes) is specified. If the size is not defined,\n * it gets the size from the given bigint. If the specified size is smaller than\n * the size of the bigint (i.e. `minSize`), an error is thrown.\n * It uses big-endian byte order.\n * @param value The bigint to convert.\n * @param size The number of bytes of the buffer to return.\n * @returns The buffer representation of the bigint.\n */\nfunction beBigIntToBuffer(value, size) {\n    const hex = bigIntToHexadecimal(value);\n    // Calculate the minimum buffer size required to represent 'n' in bytes.\n    // Each hexadecimal character represents 4 bits, so 2 characters are 1 byte.\n    const minSize = Math.ceil(hex.length / 2);\n    if (!size) {\n        size = minSize;\n    }\n    else if (size < minSize) {\n        throw Error(`Size ${size} is too small, need at least ${minSize} bytes`);\n    }\n    // Allocate buffer of the desired size, filled with zeros.\n    const buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(size, 0);\n    const fromHex = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex, \"hex\");\n    fromHex.copy(buffer, size - fromHex.length);\n    return buffer;\n}\n/**\n * Converts a bigint to a buffer and fills with zeros if a valid\n * size (i.e. number of bytes) is specified. If the size is not defined,\n * it gets the size from the given bigint. If the specified size is smaller than\n * the size of the bigint (i.e. `minSize`), an error is thrown.\n * It uses little-endian byte order.\n * @param value The bigint to convert.\n * @param size The number of bytes of the buffer to return.\n * @returns The buffer representation of the bigint in little-endian.\n */\nfunction leBigIntToBuffer(value, size) {\n    const hex = bigIntToHexadecimal(value);\n    // Calculate the minimum buffer size required to represent 'n' in bytes.\n    // Each hexadecimal character represents 4 bits, so 2 characters are 1 byte.\n    const minSize = Math.ceil(hex.length / 2);\n    if (!size) {\n        size = minSize;\n    }\n    else if (size < minSize) {\n        throw Error(`Size ${size} is too small, need at least ${minSize} bytes`);\n    }\n    // Allocate buffer of the desired size, filled with zeros.\n    const buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(size, 0);\n    const fromHex = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex, \"hex\").reverse();\n    fromHex.copy(buffer, 0);\n    return buffer;\n}\n/**\n * Converts a bigint to a buffer. Alias for beBigIntToBuffer.\n * @param value The bigint to convert.\n * @returns The buffer representation of the bigint.\n */\nfunction bigIntToBuffer(value) {\n    return beBigIntToBuffer(value);\n}\n/**\n * Converts a BigNumberish type to a bigint. If the input is already a bigint,\n * the return value will be the bigint itself, otherwise it will be converted\n * to a bigint using big-endian byte order.\n * @param value The BigNumberish value to convert.\n * @returns The bigint representation of the BigNumberish value.\n */\nfunction bigNumberishToBigInt(value) {\n    requireBigNumberish(value, \"value\");\n    if (isBuffer(value) || isUint8Array(value)) {\n        return bufferToBigInt(value);\n    }\n    return BigInt(value);\n}\n/**\n * Converts a BigNumberish type to a buffer. If the input is already a buffer,\n * the return value will be the buffer itself, otherwise it will be converted\n * to a buffer using big-endian byte order.\n * @param value The BigNumberish value to convert.\n * @returns The buffer representation of the BigNumberish value.\n */\nfunction bigNumberishToBuffer(value) {\n    requireBigNumberish(value, \"value\");\n    if (isBuffer(value) || isUint8Array(value)) {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value);\n    }\n    return bigIntToBuffer(bigNumberishToBigInt(value));\n}\n/**\n * Converts an hexadecimal string to a buffer. The hexadecimal string\n * should not start with '0x' or '0X'. It keeps the bytes in the same order.\n * @param value The hexadecimal string to convert.\n * @returns The buffer representation of the hexadecimal string.\n */\nfunction hexadecimalToBuffer(value) {\n    requireHexadecimal(value, \"value\", false);\n    // Ensure even length before converting to buffer.\n    if (value.length % 2 !== 0) {\n        value = `0${value}`;\n    }\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"hex\");\n}\n/**\n * Converts a buffer to a hexadecimal string. It accepts 'Buffer' or 'Uint8Array'.\n * The hexadecimal string will not start with '0x' or '0X'. It keeps the bytes in the same order.\n * @param value The buffer to convert.\n * @returns The converted hexadecimal string.\n */\nfunction bufferToHexadecimal(value) {\n    requireTypes(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"hex\");\n}\n/**\n * Converts bytes to a base64 string. It accepts 'Buffer' or 'Uint8Array'.\n * @param value The bytes to convert.\n * @returns The converted base64 string.\n */\nfunction bufferToBase64(value) {\n    requireTypes(value, \"value\", [\"Buffer\", \"Uint8Array\"]);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value).toString(\"base64\");\n}\n/**\n * Converts a base64 string to bytes (i.e. a buffer). This function does not check\n * if the input value is a valid base64 string. If there are unsupported characters\n * they will be ignored.\n * @param value The base64 string to convert.\n * @returns The converted buffer.\n */\nfunction base64ToBuffer(value) {\n    requireString(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"base64\");\n}\n/**\n * Converts text (utf8) to a base64 string.\n * @param value The text to convert.\n * @returns The converted base64 string.\n */\nfunction textToBase64(value) {\n    requireString(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"utf8\").toString(\"base64\");\n}\n/**\n * Converts a base64 string to text (utf8). This function does not check\n * if the input value is a valid base64 string. If there are unsupported characters\n * they could be ignored and the result may be unexpected.\n * @param value The base64 string to convert.\n * @returns The converted text.\n */\nfunction base64ToText(value) {\n    requireString(value, \"value\");\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, \"base64\").toString(\"utf8\");\n}\n\nvar conversions = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    base64ToBuffer: base64ToBuffer,\n    base64ToText: base64ToText,\n    beBigIntToBuffer: beBigIntToBuffer,\n    beBufferToBigInt: beBufferToBigInt,\n    bigIntToBuffer: bigIntToBuffer,\n    bigIntToHexadecimal: bigIntToHexadecimal,\n    bigNumberishToBigInt: bigNumberishToBigInt,\n    bigNumberishToBuffer: bigNumberishToBuffer,\n    bufferToBase64: bufferToBase64,\n    bufferToBigInt: bufferToBigInt,\n    bufferToHexadecimal: bufferToHexadecimal,\n    hexadecimalToBigInt: hexadecimalToBigInt,\n    hexadecimalToBuffer: hexadecimalToBuffer,\n    leBigIntToBuffer: leBigIntToBuffer,\n    leBufferToBigInt: leBufferToBigInt,\n    textToBase64: textToBase64\n});\n\n/**\n * Generates a random sequence of bytes securely using Node.js's crypto module.\n * @param size The number of bytes to generate.\n * @returns A Uint8Array containing the generated random bytes.\n */\n/* eslint-disable import/prefer-default-export */\nfunction getRandomValues(size) {\n    if (size <= 0)\n        throw Error(`size ${size} is too small, need at least 1`);\n    const buffer = (0,crypto__WEBPACK_IMPORTED_MODULE_1__.randomBytes)(size);\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\n\nvar crypto_node = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getRandomValues: getRandomValues\n});\n\n/**\n * @module Scalar\n * This module provides utility functions for performing scalar operations\n * within a field, especially designed to handle operations on bigints.\n * The operations include scalar inversion (`inv`), scalar exponentiation (`pow`),\n * and modular reduction. Functions are carefully implemented to ensure\n * mathematical correctness and efficiency, supporting both positive and\n * negative bigint values. The module aims to provide robust tools for\n * cryptographic calculations and other applications requiring high-precision\n * arithmetic in fields.\n */\n/**\n * Checks if a bigint scalar value is zero.\n * @param a The bigint scalar value to check.\n * @returns True if 'a' is zero, false otherwise.\n */\nfunction isZero(a) {\n    return !a;\n}\n/**\n * Determines whether a bigint scalar value is odd.\n * @param a The bigint scalar value to check.\n * @returns True if 'a' is odd, false if it is even.\n */\nfunction isOdd(a) {\n    return (a & BigInt(1)) === BigInt(1);\n}\n/**\n * Performs a bitwise right shift on a bigint scalar value.\n * This operation is equivalent to dividing by 2^n, but it operates directly\n * on the binary representation, making it efficient for certain types of calculations.\n * @param a The bigint scalar value to shift.\n * @param n The number of bits to shift 'a' by.\n * @returns The result of shifting 'a' right by 'n' bits.\n */\nfunction shiftRight(a, n) {\n    return a >> n;\n}\n/**\n * Multiplies two bigint scalar values.\n * @param a The first bigint scalar value.\n * @param b The second bigint scalar value.\n * @returns The product of 'a' and 'b'.\n */\nfunction mul(a, b) {\n    return a * b;\n}\n/**\n * Compares two bigint scalar values to determine if the first is greater than the second.\n * @param a The first bigint scalar value to compare.\n * @param b The second bigint scalar value to compare.\n * @returns True if 'a' is greater than 'b', false otherwise.\n */\nfunction gt(a, b) {\n    return a > b;\n}\n/**\n * Converts a bigint scalar value into an array of bits, represented as numbers.\n * This function is particularly useful for examining the binary structure of bigints,\n * which can be necessary for bit manipulation and understanding the representation\n * of numbers at a lower level.\n * @param n The bigint scalar value to convert into bits.\n * @returns An array of numbers representing the bits of 'n', starting from the least significant bit.\n */\nfunction bits(n) {\n    const res = [];\n    let E = n;\n    while (E) {\n        if (E & BigInt(1)) {\n            res.push(1);\n        }\n        else {\n            res.push(0);\n        }\n        E >>= BigInt(1);\n    }\n    return res;\n}\n\nvar scalar = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    bits: bits,\n    gt: gt,\n    isOdd: isOdd,\n    isZero: isZero,\n    mul: mul,\n    shiftRight: shiftRight\n});\n\n/**\n * @class F1Field\n * Represents a finite field of order 'order' providing arithmetic operations under modulus.\n * This class includes operations such as addition, subtraction, multiplication, division,\n * and inversion, all performed modulo the field's order. It's designed to work with bigints,\n * supporting large numbers for cryptographic purposes and other applications requiring\n * modular arithmetic.\n * Note that the outputs of the functions will always be within the field if and only if\n * the input values are within the field. Devs need to make sure of that.\n *\n * @property one Represents the scalar value 1 in the field.\n * @property zero Represents the scalar value 0 in the field.\n * @property _order The order of the finite field (i.e., the modulus).\n * @property _half Half the order of the field, used for certain comparisons.\n * @property _negone The scalar value -1 in the field, represented positively.\n */\nclass F1Field {\n    constructor(order) {\n        this.one = 1n;\n        this.zero = 0n;\n        this._order = order;\n        this._half = order >> this.one;\n        this._negone = this._order - this.one;\n    }\n    /**\n     * Ensures a given result falls within the field by applying modular reduction.\n     * This method also handles negative inputs, correctly mapping them into the field.\n     * @param res The result to be normalized to the field.\n     * @returns The equivalent value within the field.\n     */\n    e(res) {\n        res %= this._order;\n        return res < 0 ? res + this._order : res;\n    }\n    /**\n     * Performs modular multiplication of two bigint values within the field.\n     * @param a The first value.\n     * @param b The second value.\n     * @returns The product of 'a' and 'b' modulo the field's order.\n     */\n    mul(a, b) {\n        return (a * b) % this._order;\n    }\n    /**\n     * Subtracts one bigint from another under modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value from which to subtract.\n     * @param b The value to be subtracted.\n     * @returns The difference of 'a' and 'b' modulo the field's order.\n     */\n    sub(a, b) {\n        return a >= b ? a - b : this._order - b + a;\n    }\n    /**\n     * Adds two bigint values together under modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value.\n     * @param b The second value.\n     * @returns The sum of 'a' and 'b' modulo the field's order.\n     */\n    add(a, b) {\n        const res = a + b;\n        return res >= this._order ? res - this._order : res;\n    }\n    /**\n     * Computes the multiplicative inverse of a given value within the field.\n     * This method uses the Extended Euclidean Algorithm to find the inverse,\n     * ensuring the result is always a positive value less than the field's order.\n     * If the input value is zero, which has no inverse, an error is thrown.\n     * @param a The value for which to compute the inverse.\n     * @returns The multiplicative inverse of 'a' modulo the field's order.\n     * @throws if 'a' is zero.\n     */\n    inv(a) {\n        if (a === this.zero) {\n            throw new Error(\"Zero has no inverse\");\n        }\n        let t = this.zero;\n        let r = this._order;\n        let newt = this.one;\n        let newr = a % this._order;\n        while (newr) {\n            const q = r / newr;\n            [t, newt] = [newt, t - q * newt];\n            [r, newr] = [newr, r - q * newr];\n        }\n        if (t < this.zero) {\n            t += this._order;\n        }\n        return t;\n    }\n    /**\n     * Divides one bigint by another within the field by multiplying the first value\n     * by the multiplicative inverse of the second.\n     * @param a The dividend.\n     * @param b The divisor.\n     * @returns The result of the division of 'a' by 'b' modulo the field's order.\n     */\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n    /**\n     * Checks if two bigint values are equal within the context of the field.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' equals 'b', false otherwise.\n     */\n    eq(a, b) {\n        return a === b;\n    }\n    /**\n     * Squares a bigint value within the field.\n     * This is a specific case of multiplication where the value is multiplied by itself,\n     * optimized for performance where applicable.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value to square.\n     * @returns The square of 'a' modulo the field's order.\n     */\n    square(a) {\n        return (a * a) % this._order;\n    }\n    /**\n     * Compares two bigint values to determine if the first is less than the second,\n     * taking into account the field's order for modular comparison.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' is less than 'b', false otherwise.\n     */\n    lt(a, b) {\n        const aa = a > this._half ? a - this._order : a;\n        const bb = b > this._half ? b - this._order : b;\n        return aa < bb;\n    }\n    /**\n     * Compares two bigint values to determine if the first is greater than or equal to the second,\n     * considering the field's modular context.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The first value to compare.\n     * @param b The second value to compare.\n     * @returns True if 'a' is greater than or equal to 'b', false otherwise.\n     */\n    geq(a, b) {\n        const aa = a > this._half ? a - this._order : a;\n        const bb = b > this._half ? b - this._order : b;\n        return aa >= bb;\n    }\n    /**\n     * Computes the negation of a bigint value within the field.\n     * The result is the modular additive inverse that, when added to the original value,\n     * yields zero in the field's modulus.\n     * It ensures the result is within the field if and only if the input values are within the field.\n     * @param a The value to negate.\n     * @returns The negation of 'a' modulo the field's order.\n     */\n    neg(a) {\n        return a ? this._order - a : a;\n    }\n    /**\n     * Checks if a bigint value is zero within the context of the field.\n     * @param a The value to check.\n     * @returns True if 'a' is zero, false otherwise.\n     */\n    isZero(a) {\n        return a === this.zero;\n    }\n    /**\n     * Raises a base to an exponent within the field, efficiently computing\n     * scalar exponentiation using the square-and-multiply algorithm.\n     * Supports both positive and negative exponents through the use of the `inv` method for negatives.\n     * @param base The base to be exponentiated.\n     * @param e The exponent.\n     * @returns The result of raising 'base' to the power 'e' modulo the field's order.\n     */\n    pow(base, e) {\n        if (isZero(e)) {\n            return this.one;\n        }\n        if (e < 0n) {\n            base = this.inv(base);\n            e = -e;\n        }\n        const n = bits(e);\n        if (n.length === 0) {\n            return this.one;\n        }\n        let res = base;\n        for (let i = n.length - 2; i >= 0; i -= 1) {\n            res = this.square(res);\n            if (n[i]) {\n                res = this.mul(res, base);\n            }\n        }\n        return res;\n    }\n}\n\n/**\n * @module ProofPacking\n *\n * This module provides utility functions to pack and unpack\n * various types of objects, making it easier to export or use\n * them externally.\n */\n/**\n * Packs a Snarkjs Groth16 proof into a single list usable as calldata in Solidity (public signals are not included).\n * @param proof The Groth16 proof generated with SnarkJS.\n * @returns Solidity calldata.\n */\nfunction packGroth16Proof(proof) {\n    return [\n        proof.pi_a[0],\n        proof.pi_a[1],\n        proof.pi_b[0][1],\n        proof.pi_b[0][0],\n        proof.pi_b[1][1],\n        proof.pi_b[1][0],\n        proof.pi_c[0],\n        proof.pi_c[1]\n    ];\n}\n/**\n * Unpacks a PackedGroth16Proof Solidity calldata into its original form which is a SnarkJS Groth16 proof.\n * @param proof Solidity calldata.\n * @returns The Groth16 proof compatible with SnarkJS.\n */\nfunction unpackGroth16Proof(proof) {\n    return {\n        pi_a: [proof[0], proof[1]],\n        pi_b: [\n            [proof[3], proof[2]],\n            [proof[5], proof[4]]\n        ],\n        pi_c: [proof[6], proof[7]],\n        protocol: \"groth16\",\n        curve: \"bn128\"\n    };\n}\n/**\n * Packs a Snarkjs Plonk proof into a single list usable as calldata in Solidity (public signals are not included).\n * @param proof The Plonk proof generated with SnarkJS.\n * @returns Solidity calldata.\n */\nfunction packPlonkProof(proof) {\n    return [\n        proof.A[0],\n        proof.A[1],\n        proof.B[0],\n        proof.B[1],\n        proof.C[0],\n        proof.C[1],\n        proof.Z[0],\n        proof.Z[1],\n        proof.T1[0],\n        proof.T1[1],\n        proof.T2[0],\n        proof.T2[1],\n        proof.T3[0],\n        proof.T3[1],\n        proof.Wxi[0],\n        proof.Wxi[1],\n        proof.Wxiw[0],\n        proof.Wxiw[1],\n        proof.eval_a,\n        proof.eval_b,\n        proof.eval_c,\n        proof.eval_s1,\n        proof.eval_s2,\n        proof.eval_zw\n    ];\n}\n/**\n * Unpacks a PackedPlonkProof Solidity calldata into its original form which is a SnarkJS Plonk proof.\n * @param proof Solidity calldata.\n * @returns The Plonk proof compatible with SnarkJS.\n */\nfunction unpackPlonkProof(proof) {\n    return {\n        A: [proof[0], proof[1]],\n        B: [proof[2], proof[3]],\n        C: [proof[4], proof[5]],\n        Z: [proof[6], proof[7]],\n        T1: [proof[8], proof[9]],\n        T2: [proof[10], proof[11]],\n        T3: [proof[12], proof[13]],\n        Wxi: [proof[14], proof[15]],\n        Wxiw: [proof[16], proof[17]],\n        eval_a: proof[18],\n        eval_b: proof[19],\n        eval_c: proof[20],\n        eval_s1: proof[21],\n        eval_s2: proof[22],\n        eval_zw: proof[23],\n        protocol: \"plonk\",\n        curve: \"bn128\"\n    };\n}\n/**\n * Packs a Snarkjs Fflonk proof into a single list usable as calldata in Solidity (public signals are not included).\n * @param proof The Fflonk proof generated with SnarkJS.\n * @returns Solidity calldata.\n */\nfunction packFflonkProof(proof) {\n    return [\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.polynomials.C1[0])), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.polynomials.C1[1])), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.polynomials.C2[0])), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.polynomials.C2[1])), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.polynomials.W1[0])), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.polynomials.W1[1])), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.polynomials.W2[0])), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.polynomials.W2[1])), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.ql)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.qr)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.qm)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.qo)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.qc)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.s1)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.s2)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.s3)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.a)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.b)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.c)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.z)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.zw)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.t1w)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.t2w)), 32),\n        (0,ethers_utils__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBeHex)((0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof.evaluations.inv)), 32)\n    ];\n}\n/**\n * Unpacks a PackedFflonkProof Solidity calldata into its original form which is a SnarkJS Fflonk proof.\n * @param proof Solidity calldata.\n * @returns The Fflonk proof compatible with SnarkJS.\n */\nfunction unpackFflonkProof(proof) {\n    return {\n        polynomials: {\n            C1: [(0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[0]).toString(), (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[1]).toString()],\n            C2: [(0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[2]).toString(), (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[3]).toString()],\n            W1: [(0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[4]).toString(), (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[5]).toString()],\n            W2: [(0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[6]).toString(), (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[7]).toString()]\n        },\n        evaluations: {\n            ql: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[8]).toString(),\n            qr: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[9]).toString(),\n            qm: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[10]).toString(),\n            qo: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[11]).toString(),\n            qc: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[12]).toString(),\n            s1: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[13]).toString(),\n            s2: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[14]).toString(),\n            s3: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[15]).toString(),\n            a: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[16]).toString(),\n            b: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[17]).toString(),\n            c: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[18]).toString(),\n            z: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[19]).toString(),\n            zw: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[20]).toString(),\n            t1w: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[21]).toString(),\n            t2w: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[22]).toString(),\n            inv: (0,ethers_utils__WEBPACK_IMPORTED_MODULE_3__.toBigInt)(proof[23]).toString()\n        },\n        protocol: \"fflonk\",\n        curve: \"bn128\"\n    };\n}\n\nvar proofPacking = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    packFflonkProof: packFflonkProof,\n    packGroth16Proof: packGroth16Proof,\n    packPlonkProof: packPlonkProof,\n    unpackFflonkProof: unpackFflonkProof,\n    unpackGroth16Proof: unpackGroth16Proof,\n    unpackPlonkProof: unpackPlonkProof\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-kit/utils/dist/index.node.js\n");

/***/ })

};
;