import { PCD, PCDArgument, StringArgument } from "@pcd/pcd-types";
import { SemaphoreIdentityPCD } from "@pcd/semaphore-identity-pcd";
import { PackedProof } from "@semaphore-protocol/proof";
export declare const SemaphoreSignaturePCDTypeName = "semaphore-signature-pcd";
export interface SemaphoreSignaturePCDInitArgs {
    zkeyFilePath: string;
    wasmFilePath: string;
}
export type SemaphoreSignaturePCDArgs = {
    identity: PCDArgument<SemaphoreIdentityPCD>;
    signedMessage: StringArgument;
};
export interface SemaphoreSignaturePCDClaim {
    /**
     * Pre-hashed message.
     */
    signedMessage: string;
    /**
     * Stringified `BigInt`.
     */
    identityCommitment: string;
    /**
     * Stringified `BigInt`.
     */
    nullifierHash: string;
}
export type SemaphoreSignaturePCDProof = PackedProof;
export declare class SemaphoreSignaturePCD implements PCD<SemaphoreSignaturePCDClaim, SemaphoreSignaturePCDProof> {
    type: string;
    claim: SemaphoreSignaturePCDClaim;
    proof: SemaphoreSignaturePCDProof;
    id: string;
    constructor(id: string, claim: SemaphoreSignaturePCDClaim, proof: SemaphoreSignaturePCDProof);
}
//# sourceMappingURL=SemaphoreSignaturePCD.d.ts.map