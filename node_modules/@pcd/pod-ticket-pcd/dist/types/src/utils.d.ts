import { PODEntries } from "@pcd/pod";
import { ZodRawShape, ZodSchema } from "zod";
/**
 * Utility functions for converting data described by a Zod schema to
 * {@link PODEntries}. This ought to find a home in another package.
 */
type PotentialBigInt = string | number | bigint | boolean;
/**
 * A no-op "transform" which we can use to flag that a data type ought to be
 * treated as a POD "cryptographic" value.
 */
export declare function cryptographic<T extends PotentialBigInt>(a?: T): T | undefined;
/**
 * Converts a public key to a commitment.
 */
export declare function eddsaPublicKey<T extends string>(a?: T): string | undefined;
/**
 * Validator that ensures that a value can really be transformed into a BigInt.
 * Only relevant for strings which may contain non-numeric values.
 */
export declare function canBeBigInt(a: PotentialBigInt): boolean;
/**
 * Turns data into PODEntries, assuming that the data has a Zod schema.
 * Supports only schemas containing the field types listed in
 * {@link supportedFieldTypes}.
 */
export declare function dataToPodEntries<T>(rawData: T, schema: ZodSchema, shape: ZodRawShape): PODEntries;
export {};
//# sourceMappingURL=utils.d.ts.map