"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectIsPODTicketPCD = exports.isPODTicketPCD = exports.PODTicketPCD = exports.TicketCategory = exports.PODTicketPCDTypeName = void 0;
/**
 * The globally unique type name of the {@link PODTicketPCD}.
 */
exports.PODTicketPCDTypeName = "pod-ticket-pcd";
/**
 * Copied from {@link TicketCategory} in {@link EdDSATicketPCD}.
 */
var TicketCategory;
(function (TicketCategory) {
    TicketCategory[TicketCategory["ZuConnect"] = 0] = "ZuConnect";
    TicketCategory[TicketCategory["Devconnect"] = 1] = "Devconnect";
    TicketCategory[TicketCategory["PcdWorkingGroup"] = 2] = "PcdWorkingGroup";
    TicketCategory[TicketCategory["Zuzalu"] = 3] = "Zuzalu";
    TicketCategory[TicketCategory["Generic"] = 4] = "Generic";
})(TicketCategory || (exports.TicketCategory = TicketCategory = {}));
class PODTicketPCD {
    /**
     * The PODTicketPCD consists of a claim about {@link IPODTicketData}, and a
     * standard {@link PODPCDProof}.
     */
    constructor(id, claim, proof) {
        this.type = exports.PODTicketPCDTypeName;
        this.id = id;
        this.claim = claim;
        this.proof = proof;
    }
}
exports.PODTicketPCD = PODTicketPCD;
/**
 * Returns true if {@link pcd} is an {@link PODTicketPCD} or false otherwise.
 */
function isPODTicketPCD(pcd) {
    return pcd.type === exports.PODTicketPCDTypeName;
}
exports.isPODTicketPCD = isPODTicketPCD;
/**
 * Throws if {@link pcd} is not a {@link PODTicketPCD}
 */
function expectIsPODTicketPCD(pcd) {
    if (!isPODTicketPCD(pcd)) {
        throw new Error("Expected PODTicketPCD");
    }
}
exports.expectIsPODTicketPCD = expectIsPODTicketPCD;
