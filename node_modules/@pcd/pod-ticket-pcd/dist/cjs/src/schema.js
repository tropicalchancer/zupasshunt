"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TicketDataSchema = void 0;
const zod_1 = require("zod");
const PODTicketPCD_1 = require("./PODTicketPCD");
const utils_1 = require("./utils");
exports.TicketDataSchema = zod_1.z.object({
    eventName: zod_1.z.string(),
    ticketName: zod_1.z.string(),
    checkerEmail: zod_1.z.string().optional(),
    imageUrl: zod_1.z.string().optional(),
    imageAltText: zod_1.z.string().optional(),
    ticketId: zod_1.z.string().uuid(),
    eventId: zod_1.z.string().uuid(),
    productId: zod_1.z.string().uuid(),
    timestampConsumed: zod_1.z.number().int().nonnegative(),
    timestampSigned: zod_1.z.number().int().nonnegative(),
    /**
     * V3 semaphore commitment.
     * Optional, used only by legacy v3 tickets.
     * @deprecated
     */
    attendeeSemaphoreId: zod_1.z
        .string()
        .refine(utils_1.canBeBigInt)
        .optional()
        // important that the transform comes last, otherwise
        // `dataToPodEntries` will not work
        .transform(utils_1.cryptographic),
    /**
     * Semaphore v4 identity commitment.
     */
    owner: zod_1.z
        .string()
        .optional()
        // important that the transform comes last, otherwise
        // `dataToPodEntries` will not work
        .transform(utils_1.eddsaPublicKey),
    isConsumed: zod_1.z.boolean(),
    isRevoked: zod_1.z.boolean(),
    ticketCategory: zod_1.z.nativeEnum(PODTicketPCD_1.TicketCategory),
    attendeeName: zod_1.z.string(),
    attendeeEmail: zod_1.z.string(),
    qrCodeOverrideImageUrl: zod_1.z.string().optional(),
    ticketSecret: zod_1.z.string().optional(),
    eventLocation: zod_1.z.string().optional(),
    eventStartDate: zod_1.z.string().optional(),
    isAddOn: zod_1.z.boolean().optional()
});
