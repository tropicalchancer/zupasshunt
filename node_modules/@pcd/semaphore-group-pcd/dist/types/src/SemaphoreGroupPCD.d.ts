import { BigIntArgument, ObjectArgument, PCD, PCDArgument } from "@pcd/pcd-types";
import { SemaphoreIdentityPCD } from "@pcd/semaphore-identity-pcd";
import { PackedProof } from "@semaphore-protocol/proof";
import { SerializedSemaphoreGroup } from "./SerializedSemaphoreGroup";
export declare const SemaphoreGroupPCDTypeName = "semaphore-group-signal";
export interface SempahoreGroupPCDInitArgs {
    zkeyFilePath: string;
    wasmFilePath: string;
}
export type SemaphoreGroupPCDArgs = {
    group: ObjectArgument<SerializedSemaphoreGroup>;
    identity: PCDArgument<SemaphoreIdentityPCD>;
    externalNullifier: BigIntArgument;
    signal: BigIntArgument;
};
export interface SemaphoreGroupPCDClaim {
    /**
     * The merkle root of the group being proven membership in. Retreiving members
     * in the root is left to the application logic.
     */
    merkleRoot: string;
    /**
     * Depth of the tree for the Merkle root.
     */
    depth: number;
    /**
     * Stringified `BigInt`.
     */
    signal: string;
    /**
     * Stringified `BigInt`.
     */
    externalNullifier: string;
    /**
     * Stringified `BigInt`.
     */
    nullifierHash: string;
}
export type SemaphoreGroupPCDProof = PackedProof;
export declare class SemaphoreGroupPCD implements PCD<SemaphoreGroupPCDClaim, SemaphoreGroupPCDProof> {
    type: string;
    claim: SemaphoreGroupPCDClaim;
    proof: SemaphoreGroupPCDProof;
    id: string;
    constructor(id: string, claim: SemaphoreGroupPCDClaim, proof: SemaphoreGroupPCDProof);
}
//# sourceMappingURL=SemaphoreGroupPCD.d.ts.map