"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.frogRarityToScore = exports.getPublicKey = exports.getEdDSAFrogData = exports.frogDataToBigInts = exports.semaphoreIdToBigInt = void 0;
const util_1 = require("@pcd/util");
const EdDSAFrogPCD_1 = require("./EdDSAFrogPCD");
function semaphoreIdToBigInt(v) {
    return BigInt(v);
}
exports.semaphoreIdToBigInt = semaphoreIdToBigInt;
/**
 * Converts the property values of the {@link IFrogData} object to
 * a list of big integers ({@link SerializedTicket}).
 */
function frogDataToBigInts(data) {
    return [
        (0, util_1.numberToBigInt)(data.frogId),
        (0, util_1.numberToBigInt)(data.biome),
        (0, util_1.numberToBigInt)(data.rarity),
        (0, util_1.numberToBigInt)(data.temperament),
        (0, util_1.numberToBigInt)(data.jump),
        (0, util_1.numberToBigInt)(data.speed),
        (0, util_1.numberToBigInt)(data.intelligence),
        (0, util_1.numberToBigInt)(data.beauty),
        (0, util_1.numberToBigInt)(data.timestampSigned),
        semaphoreIdToBigInt(data.ownerSemaphoreId),
        (0, util_1.numberToBigInt)(0),
        (0, util_1.numberToBigInt)(0),
        (0, util_1.numberToBigInt)(0)
    ];
}
exports.frogDataToBigInts = frogDataToBigInts;
/**
 * Returns the data inside of this PCD if it exists.
 */
function getEdDSAFrogData(pcd) {
    return pcd?.claim?.data;
}
exports.getEdDSAFrogData = getEdDSAFrogData;
/**
 * Returns the public key this PCD was signed with if it exists.
 */
function getPublicKey(pcd) {
    return pcd?.proof?.eddsaPCD?.claim?.publicKey;
}
exports.getPublicKey = getPublicKey;
function frogRarityToScore(frogRarity) {
    let rarityToEdgeCityScore = 1;
    switch (frogRarity) {
        case EdDSAFrogPCD_1.Rarity.Object:
        case EdDSAFrogPCD_1.Rarity.Unknown:
            rarityToEdgeCityScore *= 0;
            break;
        case EdDSAFrogPCD_1.Rarity.Common:
            rarityToEdgeCityScore *= 1;
            break;
        case EdDSAFrogPCD_1.Rarity.Rare:
            rarityToEdgeCityScore *= 4;
            break;
        case EdDSAFrogPCD_1.Rarity.Epic:
            rarityToEdgeCityScore *= 10;
            break;
        case EdDSAFrogPCD_1.Rarity.Legendary:
            rarityToEdgeCityScore *= 20;
            break;
        case EdDSAFrogPCD_1.Rarity.Mythic:
            rarityToEdgeCityScore *= 100;
            break;
    }
    return rarityToEdgeCityScore;
}
exports.frogRarityToScore = frogRarityToScore;
