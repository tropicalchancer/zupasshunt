import { DisplayOptions, PCDPackage, SerializedPCD } from "@pcd/pcd-types";
import { EdDSAFrogPCD, EdDSAFrogPCDArgs, EdDSAFrogPCDClaim, EdDSAFrogPCDProof } from "./EdDSAFrogPCD";
/**
 * Creates a new {@link EdDSAFrogPCD} by generating an {@link EdDSAFrogPCDProof}
 * and deriving an {@link EdDSAFrogPCDClaim} from the given {@link EdDSAFrogPCDArgs}.
 */
export declare function prove(args: EdDSAFrogPCDArgs): Promise<EdDSAFrogPCD>;
/**
 * Verifies an EdDSA Frog PCD by checking that its {@link EdDSAFrogPCDClaim} corresponds to
 * its {@link EdDSAFrogPCDProof}. If they match, the function returns true, otherwise false.
 * In most cases, verifying the validity of the PCD with this function is not enough.
 * It may also be necessary to check the public key of the
 * entity that signed the claim and verify the authenticity of the entity.
 */
export declare function verify(pcd: EdDSAFrogPCD): Promise<boolean>;
/**
 * Serializes an {@link EdDSAFrogPCD}.
 * @param pcd The EdDSA Frog PCD to be serialized.
 * @returns The serialized version of the EdDSA Frog PCD.
 */
export declare function serialize(pcd: EdDSAFrogPCD): Promise<SerializedPCD<EdDSAFrogPCD>>;
/**
 * Deserializes a serialized {@link EdDSAFrogPCD}.
 * @param serialized The serialized PCD to deserialize.
 * @returns The deserialized version of the EdDSA Frog PCD.
 */
export declare function deserialize(serialized: string): Promise<EdDSAFrogPCD>;
/**
 * Provides the information about the {@link EdDSAFrogPCD} that will be displayed
 * to users on Zupass.
 * @param pcd The EdDSA Frog PCD instance.
 * @returns The information to be displayed, specifically `header` and `displayName`.
 */
export declare function getDisplayOptions(pcd: EdDSAFrogPCD): DisplayOptions;
/**
 * The PCD package of the EdDSA Ticket PCD. It exports an object containing
 * the code necessary to operate on this PCD data.
 */
export declare const EdDSAFrogPCDPackage: PCDPackage<EdDSAFrogPCDClaim, EdDSAFrogPCDProof, EdDSAFrogPCDArgs>;
//# sourceMappingURL=EdDSAFrogPCDPackage.d.ts.map