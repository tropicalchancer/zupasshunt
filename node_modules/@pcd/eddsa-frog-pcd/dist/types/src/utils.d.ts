import { EdDSAPublicKey } from "@pcd/eddsa-pcd";
import { EdDSAFrogPCD, IFrogData, Rarity } from "./EdDSAFrogPCD";
/**
 * A serialized frog data is a list of big integers, where each one is a field in {@link IFrogData}. It needs to be a list of big integers so that it can be passed into {@link EdDSAPCD} to be signed.
 */
export type SerializedFrogData = [
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint
];
export declare function semaphoreIdToBigInt(v: string): bigint;
/**
 * Converts the property values of the {@link IFrogData} object to
 * a list of big integers ({@link SerializedTicket}).
 */
export declare function frogDataToBigInts(data: IFrogData): SerializedFrogData;
/**
 * Returns the data inside of this PCD if it exists.
 */
export declare function getEdDSAFrogData(pcd?: EdDSAFrogPCD): IFrogData | undefined;
/**
 * Returns the public key this PCD was signed with if it exists.
 */
export declare function getPublicKey(pcd?: EdDSAFrogPCD): EdDSAPublicKey | undefined;
export declare function frogRarityToScore(frogRarity: Rarity): number;
//# sourceMappingURL=utils.d.ts.map