import { EdDSAPCD } from "@pcd/eddsa-pcd";
import { ObjectArgument, PCD, StringArgument } from "@pcd/pcd-types";
/**
 * The globally unique type name of the {@link EdDSAFrogPCD}.
 */
export declare const EdDSAFrogPCDTypeName = "eddsa-frog-pcd";
/**
 * Assigns each currently supported Biome a unique value.
 */
export declare enum Biome {
    Unknown = 0,
    Jungle = 1,
    Desert = 2,
    Swamp = 3,
    TheCapital = 4,
    PutridSwamp = 5,
    CelestialPond = 6,
    TheWrithingVoid = 7
}
/**
 * Assigns each currently supported Rarity a unique value.
 */
export declare enum Rarity {
    Unknown = 0,
    Common = 1,
    Rare = 2,
    Epic = 3,
    Legendary = 4,
    Mythic = 5,
    Object = 6
}
/**
 * Assigns each currently supported Temperament a unique value.
 */
export declare enum Temperament {
    UNKNOWN = 0,// ???
    N_A = 1,// N/A
    ANGY = 2,
    BORD = 3,
    CALM = 4,
    CHUB = 5,
    COOL = 6,
    DARK = 7,
    DOOM = 8,
    HMBL = 9,
    HNGY = 10,
    HRNY = 11,
    HYPE = 12,
    MEOW = 13,
    OKAY = 14,
    PUFF = 15,
    SADG = 16,
    SLLY = 17,
    SLPY = 18,
    WISE = 19,
    WOW = 20,
    YOLO = 21
}
export declare const COMMON_TEMPERAMENT_SET: Temperament[];
/**
 * FROGCRYPTO Data Model
 */
export interface IFrogData {
    name: string;
    description: string;
    imageUrl: string;
    frogId: number;
    biome: Biome;
    rarity: Rarity;
    temperament: Temperament;
    jump: number;
    speed: number;
    intelligence: number;
    beauty: number;
    timestampSigned: number;
    ownerSemaphoreId: string;
}
/**
 * Defines the essential parameters required for creating an {@link EdDSAFrogPCD}.
 */
export type EdDSAFrogPCDArgs = {
    /**
     * The EdDSA private key is a 32-byte value used to sign the message.
     * {@link newEdDSAPrivateKey} is recommended for generating highly secure private keys.
     */
    privateKey: StringArgument;
    /**
     * A {@link IFrogData} object containing data that is encoded into this PCD.
     */
    data: ObjectArgument<IFrogData>;
    /**
     * A string that uniquely identifies an {@link EdDSAFrogPCD}. If this argument is not specified a random
     * id will be generated.
     */
    id: StringArgument;
};
/**
 * Defines the EdDSA Frog PCD claim. The claim contains data that was signed
 * with the private key corresponding to the given public key stored in the proof.
 */
export interface EdDSAFrogPCDClaim {
    data: IFrogData;
}
/**
 * Defines the EdDSA Frog PCD proof. The proof is an EdDSA PCD whose message
 * is the encoded data.
 */
export interface EdDSAFrogPCDProof {
    eddsaPCD: EdDSAPCD;
}
/**
 * The EdDSA Frog PCD enables the verification that a specific  {@link EdDSAFrogPCDClaim}
 * has been signed with an EdDSA private key. The {@link EdDSAFrogPCDProof} contains a EdDSA
 * PCD and serves as the signature.
 */
export declare class EdDSAFrogPCD implements PCD<EdDSAFrogPCDClaim, EdDSAFrogPCDProof> {
    type: string;
    claim: EdDSAFrogPCDClaim;
    proof: EdDSAFrogPCDProof;
    id: string;
    constructor(id: string, claim: EdDSAFrogPCDClaim, proof: EdDSAFrogPCDProof);
}
/**
 * Returns true if a PCD is an EdDSA Ticket PCD, or false otherwise.
 */
export declare function isEdDSAFrogPCD(pcd: PCD): pcd is EdDSAFrogPCD;
//# sourceMappingURL=EdDSAFrogPCD.d.ts.map