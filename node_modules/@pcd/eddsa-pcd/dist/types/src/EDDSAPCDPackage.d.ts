import { DisplayOptions, PCDPackage, SerializedPCD } from "@pcd/pcd-types";
import { EdDSAInitArgs, EdDSAPCD, EdDSAPCDArgs, EdDSAPCDClaim, EdDSAPCDProof, EdDSAPublicKey } from "./EdDSAPCD";
/**
 * Creates a new {@link EdDSAPCD} by generating an {@link EdDSAPCDProof}
 * and deriving an {@link EdDSAPCDClaim} from the given {@link EdDSAPCDArgs}.
 */
export declare function prove(args: EdDSAPCDArgs): Promise<EdDSAPCD>;
/**
 * Verifies an EdDSA PCD by checking that its {@link EdDSAPCDClaim} corresponds to its {@link EdDSAPCDProof}.
 * If they match, the function returns true, otherwise false.
 */
export declare function verify(pcd: EdDSAPCD): Promise<boolean>;
/**
 * Serializes an {@link EdDSAPCD}.
 * @param pcd The EdDSA PCD to be serialized.
 * @returns The serialized version of the EdDSA PCD.
 */
export declare function serialize(pcd: EdDSAPCD): Promise<SerializedPCD<EdDSAPCD>>;
/**
 * Deserializes a serialized {@link EdDSAPCD}.
 * @param serialized The serialized PCD to deserialize.
 * @returns The deserialized version of the EdDSA PCD.
 */
export declare function deserialize(serialized: string): Promise<EdDSAPCD>;
/**
 * Provides the information about the {@link EdDSAPCD} that will be displayed
 * to users on Zupass.
 * @param pcd The EdDSA PCD instance.
 * @returns The information to be displayed, specifically `header` and `displayName`.
 */
export declare function getDisplayOptions(pcd: EdDSAPCD): DisplayOptions;
/**
 * The PCD package of the EdDSA PCD. It exports an object containing
 * the code necessary to operate on this PCD data.
 */
export declare const EdDSAPCDPackage: PCDPackage<EdDSAPCDClaim, EdDSAPCDProof, EdDSAPCDArgs, EdDSAInitArgs>;
/**
 * Returns an {@link EdDSAPublicKey} derived from a 32-byte EdDSA private key.
 * The private key must be a hexadecimal string or a Uint8Array typed array.
 * @param privateKey The 32-byte EdDSA private key.
 * @returns The {@link EdDSAPublicKey} extracted from the private key.
 */
export declare function getEdDSAPublicKey(privateKey: string | Uint8Array): Promise<EdDSAPublicKey>;
//# sourceMappingURL=EDDSAPCDPackage.d.ts.map