import { Sodium } from "./libsodium";
import { Base64String, HexString, Utf8String } from "./types";
/**
 * This class contains cryptographic primitives that are used by the PCD
 * application SDK and downstream packages.
 */
export declare class PCDCrypto {
    private sodium;
    static newInstance(sodium?: Sodium): Promise<PCDCrypto>;
    private constructor();
    cryptoHash(str: string): string;
    generateRandomKey(bits?: number): HexString;
    /**
     * Combines generateSalt and argon2 function, returns both a random salt
     * and the resulting 32-byte encryption key.
     */
    generateSaltAndEncryptionKey(password: Utf8String): {
        key: string;
        salt: string;
    };
    generateSalt(length?: number): HexString;
    argon2(password: Utf8String, salt: HexString, length?: number): HexString;
    xchacha20Encrypt(plaintext: Utf8String, nonce: HexString, key: HexString, assocData?: Utf8String): Base64String;
    xchacha20Decrypt(ciphertext: Base64String, nonce: HexString, key: HexString, assocData?: Utf8String | Uint8Array): Utf8String | null;
    randombytesDeterministic(length: number, seed: Uint8Array): Uint8Array | null;
}
//# sourceMappingURL=passportCrypto.d.ts.map