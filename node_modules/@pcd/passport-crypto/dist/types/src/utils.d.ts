/**
 * If in a web environment, return the global crypto object. If not, use the
 * imported crypto library, which will either be present as a NodeJS built-in,
 * or polyfilled by the final bundler.
 */
export declare function getCrypto(): Crypto;
/**
 * Converts a plain string into an ArrayBuffer
 * @param {string} string - A plain string
 */
export declare function stringToArrayBuffer(string: string): Uint8Array;
/**
 * Converts an ArrayBuffer into a plain string
 * @param {ArrayBuffer} arrayBuffer
 */
export declare function arrayBufferToString(arrayBuffer: ArrayBuffer): string;
/**
 * Converts an ArrayBuffer into a hex string
 * @param arrayBuffer
 */
export declare function arrayBufferToHexString(arrayBuffer: ArrayBuffer): string;
/**
 * Converts a hex string into an ArrayBuffer
 * @param hex - A hex string
 */
export declare function hexStringToArrayBuffer(hex: string): Uint8Array;
/**
 * Converts a base64 string into an ArrayBuffer
 * @param base64 - A base64 string
 */
export declare function base64ToArrayBuffer(base64: string): Uint8Array;
/**
 * Converts an ArrayBuffer into a base64 string
 * @param buffer
 */
export declare function arrayBufferToBase64(arrayBuffer: ArrayBuffer): string;
/**
 * Converts a hex string into a base64 string
 * @param hex - A hex string
 */
export declare function hexToBase64(hex: string): string;
/**
 * Converts a base64 string into a hex string
 * @param base64 - A base64 string
 */
export declare function base64ToHex(base64: string): string;
//# sourceMappingURL=utils.d.ts.map