"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.base64ToHex = exports.hexToBase64 = exports.arrayBufferToBase64 = exports.base64ToArrayBuffer = exports.hexStringToArrayBuffer = exports.arrayBufferToHexString = exports.arrayBufferToString = exports.stringToArrayBuffer = exports.getCrypto = void 0;
const libsodium_wrappers_sumo_1 = __importDefault(require("@pcd/libsodium-wrappers-sumo"));
const buffer_1 = require("buffer");
const crypto_1 = __importDefault(require("crypto"));
// This is necessary as libsodium-wrappers-sumo is a CommonJS package and
// doesn't support importing individual items properly.
const { base64_variants, from_base64, from_string, to_base64, to_string, from_hex, to_hex } = libsodium_wrappers_sumo_1.default;
/**
 * If in a web environment, return the global crypto object. If not, use the
 * imported crypto library, which will either be present as a NodeJS built-in,
 * or polyfilled by the final bundler.
 */
function getCrypto() {
    const g = globalThis;
    if (g.crypto) {
        return g.crypto;
    }
    else {
        return crypto_1.default.webcrypto;
    }
}
exports.getCrypto = getCrypto;
/**
 * Converts a plain string into an ArrayBuffer
 * @param {string} string - A plain string
 */
function stringToArrayBuffer(string) {
    return from_string(string);
}
exports.stringToArrayBuffer = stringToArrayBuffer;
/**
 * Converts an ArrayBuffer into a plain string
 * @param {ArrayBuffer} arrayBuffer
 */
function arrayBufferToString(arrayBuffer) {
    return to_string(arrayBuffer);
}
exports.arrayBufferToString = arrayBufferToString;
/**
 * Converts an ArrayBuffer into a hex string
 * @param arrayBuffer
 */
function arrayBufferToHexString(arrayBuffer) {
    return to_hex(buffer_1.Buffer.from(arrayBuffer));
}
exports.arrayBufferToHexString = arrayBufferToHexString;
/**
 * Converts a hex string into an ArrayBuffer
 * @param hex - A hex string
 */
function hexStringToArrayBuffer(hex) {
    return from_hex(hex);
}
exports.hexStringToArrayBuffer = hexStringToArrayBuffer;
/**
 * Converts a base64 string into an ArrayBuffer
 * @param base64 - A base64 string
 */
function base64ToArrayBuffer(base64) {
    return from_base64(base64, base64_variants.ORIGINAL);
}
exports.base64ToArrayBuffer = base64ToArrayBuffer;
/**
 * Converts an ArrayBuffer into a base64 string
 * @param buffer
 */
function arrayBufferToBase64(arrayBuffer) {
    return to_base64(buffer_1.Buffer.from(arrayBuffer), base64_variants.ORIGINAL);
}
exports.arrayBufferToBase64 = arrayBufferToBase64;
/**
 * Converts a hex string into a base64 string
 * @param hex - A hex string
 */
function hexToBase64(hex) {
    return to_base64(from_hex(hex), base64_variants.ORIGINAL);
}
exports.hexToBase64 = hexToBase64;
/**
 * Converts a base64 string into a hex string
 * @param base64 - A base64 string
 */
function base64ToHex(base64) {
    return to_hex(from_base64(base64, base64_variants.ORIGINAL));
}
exports.base64ToHex = base64ToHex;
