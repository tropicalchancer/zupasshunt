import { EdDSAPublicKey } from "@pcd/eddsa-pcd";
import { EdDSATicketPCD, ITicketData } from "./EdDSATicketPCD";
/**
 * A serialized ticket is a list of big integers, where each one is a field in {@link ITicketData}. It needs to be a list of big integers so that it can be passed into {@link EdDSAPCD} to be signed.
 */
export type SerializedTicket = [
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint
];
export declare function semaphoreIdToBigInt(v: string): bigint;
/**
 * Converts the property values of the {@link ITicketData} object to
 * a list of big integers ({@link SerializedTicket}).
 */
export declare function ticketDataToBigInts(data: ITicketData): SerializedTicket;
/**
 * Returns the ticket inside of this PCD if it exists.
 */
export declare function getEdDSATicketData(pcd?: EdDSATicketPCD): ITicketData | undefined;
/**
 * Returns the public key this PCD was signed with if it exists.
 */
export declare function getPublicKey(pcd?: EdDSATicketPCD): EdDSAPublicKey | undefined;
/**
 * The QR code's color to be shown when a ticket is
 * not valid, i.e. undefined, consumed or revoked.
 */
export declare function getQRCodeColorOverride(pcd: EdDSATicketPCD): string | undefined;
export declare function linkToTicket(baseUrl: string, ticketId: string, eventId: string): string;
//# sourceMappingURL=utils.d.ts.map