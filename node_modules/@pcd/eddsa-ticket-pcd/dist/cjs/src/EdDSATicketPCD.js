"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectIsEdDSATicketPCD = exports.isEdDSATicketPCD = exports.EdDSATicketPCD = exports.TicketCategory = exports.EdDSATicketPCDTypeName = void 0;
/**
 * The globally unique type name of the {@link EdDSATicketPCD}.
 */
exports.EdDSATicketPCDTypeName = "eddsa-ticket-pcd";
/**
 * Assigns each currently supported category a unique value.
 */
var TicketCategory;
(function (TicketCategory) {
    TicketCategory[TicketCategory["ZuConnect"] = 0] = "ZuConnect";
    TicketCategory[TicketCategory["Devconnect"] = 1] = "Devconnect";
    TicketCategory[TicketCategory["PcdWorkingGroup"] = 2] = "PcdWorkingGroup";
    TicketCategory[TicketCategory["Zuzalu"] = 3] = "Zuzalu";
    TicketCategory[TicketCategory["Generic"] = 4] = "Generic";
})(TicketCategory || (exports.TicketCategory = TicketCategory = {}));
/**
 * The EdDSA Ticket PCD enables the verification that a specific ticket ({@link EdDSATicketPCDClaim})
 * has been signed with an EdDSA private key. The {@link EdDSATicketPCDProof} contains a EdDSA
 * PCD and serves as the signature.
 */
class EdDSATicketPCD {
    constructor(id, claim, proof) {
        this.type = exports.EdDSATicketPCDTypeName;
        this.id = id;
        this.claim = claim;
        this.proof = proof;
    }
}
exports.EdDSATicketPCD = EdDSATicketPCD;
/**
 * Returns true if a PCD is an EdDSA Ticket PCD, or false otherwise.
 */
function isEdDSATicketPCD(pcd) {
    return pcd.type === exports.EdDSATicketPCDTypeName;
}
exports.isEdDSATicketPCD = isEdDSATicketPCD;
/**
 * Throws if {@link pcd} is not an {@link EdDSATicketPCD}.
 */
function expectIsEdDSATicketPCD(pcd) {
    if (pcd.type !== exports.EdDSATicketPCDTypeName) {
        throw new Error("Expected EdDSATicketPCD");
    }
}
exports.expectIsEdDSATicketPCD = expectIsEdDSATicketPCD;
