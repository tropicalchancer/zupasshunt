"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.linkToTicket = exports.getQRCodeColorOverride = exports.getPublicKey = exports.getEdDSATicketData = exports.ticketDataToBigInts = exports.semaphoreIdToBigInt = void 0;
const util_1 = require("@pcd/util");
const url_join_1 = __importDefault(require("url-join"));
function semaphoreIdToBigInt(v) {
    return BigInt(v);
}
exports.semaphoreIdToBigInt = semaphoreIdToBigInt;
/**
 * Converts the property values of the {@link ITicketData} object to
 * a list of big integers ({@link SerializedTicket}).
 */
function ticketDataToBigInts(data) {
    return [
        (0, util_1.uuidToBigInt)(data.ticketId),
        (0, util_1.uuidToBigInt)(data.eventId),
        (0, util_1.uuidToBigInt)(data.productId),
        (0, util_1.numberToBigInt)(data.timestampConsumed),
        (0, util_1.numberToBigInt)(data.timestampSigned),
        semaphoreIdToBigInt(data.attendeeSemaphoreId),
        (0, util_1.booleanToBigInt)(data.isConsumed),
        (0, util_1.booleanToBigInt)(data.isRevoked),
        (0, util_1.numberToBigInt)(data.ticketCategory),
        (0, util_1.generateSnarkMessageHash)(data.attendeeEmail),
        (0, util_1.generateSnarkMessageHash)(data.attendeeName),
        (0, util_1.numberToBigInt)(0)
    ];
}
exports.ticketDataToBigInts = ticketDataToBigInts;
/**
 * Returns the ticket inside of this PCD if it exists.
 */
function getEdDSATicketData(pcd) {
    return pcd?.claim?.ticket;
}
exports.getEdDSATicketData = getEdDSATicketData;
/**
 * Returns the public key this PCD was signed with if it exists.
 */
function getPublicKey(pcd) {
    return pcd?.proof?.eddsaPCD?.claim?.publicKey;
}
exports.getPublicKey = getPublicKey;
const INVALID_TICKET_QR_CODE_COLOR = "#d3d3d3";
/**
 * The QR code's color to be shown when a ticket is
 * not valid, i.e. undefined, consumed or revoked.
 */
function getQRCodeColorOverride(pcd) {
    const ticketData = getEdDSATicketData(pcd);
    if (!ticketData || ticketData.isRevoked) {
        return INVALID_TICKET_QR_CODE_COLOR;
    }
    // Otherwise, don't override and use default.
    return undefined;
}
exports.getQRCodeColorOverride = getQRCodeColorOverride;
function makeIdBasedVerifyLink(baseUrl, ticketId) {
    return (0, url_join_1.default)(baseUrl, `?id=${ticketId}`);
}
function linkToTicket(baseUrl, ticketId, eventId) {
    const encodedId = Buffer.from(JSON.stringify({
        ticketId: ticketId,
        eventId: eventId,
        timestamp: Date.now().toString()
    })).toString("base64");
    return makeIdBasedVerifyLink(baseUrl, encodedId);
}
exports.linkToTicket = linkToTicket;
