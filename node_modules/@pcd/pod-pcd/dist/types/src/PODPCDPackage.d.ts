import { DisplayOptions, PCD, PCDPackage, SerializedPCD } from "@pcd/pcd-types";
import { PODPCD, PODPCDArgs, PODPCDClaim, PODPCDInitArgs, PODPCDProof } from "./PODPCD";
/**
 * Creates a new {@link PODPCD} by generating an {@link PODPCDProof}
 * and deriving an {@link PODPCDClaim} from the given {@link PODPCDArgs}.
 *
 * @throws if the arguments are invalid
 */
export declare function prove(args: PODPCDArgs): Promise<PODPCD>;
/**
 * Verifies a POD PCD by checking that its {@link PODPCDClaim} corresponds to
 * its {@link PODPCDProof}.  If the signature is valid and matches the entries,
 * the function returns true, otherwise false.
 */
export declare function verify(pcd: PODPCD): Promise<boolean>;
/**
 * Serializes a {@link PODPCD}.
 * @param pcd The POD PCD to be serialized.
 * @returns The serialized version of the POD PCD.
 */
export declare function serialize(pcd: PODPCD): Promise<SerializedPCD<PODPCD>>;
/**
 * Deserializes a serialized {@link PODPCD}.
 * @param serialized The serialized PCD to deserialize.
 * @returns The deserialized version of the POD PCD.
 */
export declare function deserialize(serialized: string): Promise<PODPCD>;
/**
 * Provides the information about the {@link PODPCD} that will be displayed
 * to users on Zupass.
 * @param pcd The POD PCD instance.
 * @returns The information to be displayed, specifically `header` and `displayName`.
 */
export declare function getDisplayOptions(pcd: PCD<PODPCDClaim, PODPCDProof>): DisplayOptions;
/**
 * The PCD package of the POD PCD. It exports an object containing
 * the code necessary to operate on this PCD data.
 */
export declare const PODPCDPackage: PCDPackage<PODPCDClaim, PODPCDProof, PODPCDArgs, PODPCDInitArgs>;
//# sourceMappingURL=PODPCDPackage.d.ts.map