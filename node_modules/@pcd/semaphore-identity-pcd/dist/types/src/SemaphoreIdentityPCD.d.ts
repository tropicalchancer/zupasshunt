import { PCD } from "@pcd/pcd-types";
import { IdentityV3, IdentityV4 } from "./forwardedTypes";
export declare const SemaphoreIdentityPCDTypeName = "semaphore-identity-pcd";
export type SemaphoreIdentityPCDArgs = {
    identityV3: IdentityV3;
};
export interface SemaphoreIdentityPCDClaim {
    identityV3: IdentityV3;
    /**
     * This v4 semaphore identity is deterministically derived from the v3 identity.
     */
    identityV4: IdentityV4;
}
export type SemaphoreIdentityPCDProof = undefined;
export declare function isSemaphoreIdentityPCD(pcd: PCD): pcd is SemaphoreIdentityPCD;
export declare class SemaphoreIdentityPCD implements PCD<SemaphoreIdentityPCDClaim, SemaphoreIdentityPCDProof> {
    type: string;
    claim: SemaphoreIdentityPCDClaim;
    proof: SemaphoreIdentityPCDProof;
    id: string;
    constructor(id: string, claim: SemaphoreIdentityPCDClaim);
}
//# sourceMappingURL=SemaphoreIdentityPCD.d.ts.map