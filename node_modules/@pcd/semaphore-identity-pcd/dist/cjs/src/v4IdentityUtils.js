"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.v3IdentityToPCD = exports.v3tov4Identity = exports.v4PrivateKey = exports.v4PublicKey = exports.v4PublicKeyToCommitment = void 0;
const pod_1 = require("@pcd/pod");
const util_1 = require("@pcd/util");
const utils_1 = require("@zk-kit/utils");
const js_sha256_1 = require("js-sha256");
const poseidon2_1 = require("poseidon-lite/poseidon2");
const forwardedTypes_1 = require("./forwardedTypes");
const SemaphoreIdentityPCD_1 = require("./SemaphoreIdentityPCD");
/**
 * Given a semaphore v4 public key, returns the corresponding v4 identity commitment.
 */
function v4PublicKeyToCommitment(publicKey) {
    // matches implementation in semaphore v4 lib:
    // https://github.com/semaphore-protocol/semaphore/blob/3572f44/packages/identity/src/index.ts#L49
    return (0, poseidon2_1.poseidon2)((0, pod_1.decodePublicKey)(publicKey)).toString();
}
exports.v4PublicKeyToCommitment = v4PublicKeyToCommitment;
/**
 * Given a semaphore v4 identity, returns it's EdDSA public key as a base64 encoded string.
 */
function v4PublicKey(identity) {
    return (0, pod_1.encodePublicKey)(identity.publicKey);
}
exports.v4PublicKey = v4PublicKey;
/**
 * Given a semaphore v4 identity, returns it's EdDSA private key as a base64 encoded string.
 */
function v4PrivateKey(identity) {
    return (0, pod_1.encodePrivateKey)(Buffer.from(identity.export(), "base64"));
}
exports.v4PrivateKey = v4PrivateKey;
/**
 * Deterministic migration from a v3 to a v4 semaphore identity. Not reversible.
 */
function v3tov4Identity(v3Identity) {
    const hashInput = Buffer.from((0, utils_1.beBigIntToBuffer)(v3Identity.nullifier, 32).toString("hex") +
        (0, utils_1.beBigIntToBuffer)(v3Identity.trapdoor, 32).toString("hex"), "hex");
    // this private key needs to be 32 bytes to be compatible with POD
    const privKey = Buffer.from((0, js_sha256_1.sha256)(hashInput), "hex");
    return new forwardedTypes_1.IdentityV4(privKey);
}
exports.v3tov4Identity = v3tov4Identity;
function v3IdentityToPCD(v3Identity) {
    return new SemaphoreIdentityPCD_1.SemaphoreIdentityPCD((0, util_1.randomUUID)(), {
        identityV3: v3Identity,
        identityV4: v3tov4Identity(v3Identity)
    });
}
exports.v3IdentityToPCD = v3IdentityToPCD;
