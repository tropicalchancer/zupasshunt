import { z } from "zod";
/**
 * Return an English-language string if one exists, otherwise the first
 */
export declare function getI18nString(map: GenericPretixI18nMap): string;
/**
 * Pretix API types
 *
 * A Zod schema is used to ensure that the data has the expected form.
 * Clients may do additional validation, for instance to ensure that events
 * have the expected products, or that event settings match those that we
 * require. Those checks are not part of the schema.
 *
 * The comments below are copied from the original Devconnect Pretix API
 * client.
 */
export declare const GenericPretixI18MapSchema: z.ZodRecord<z.ZodString, z.ZodString>;
declare const GenericPretixCheckinSchema: z.ZodObject<{
    datetime: z.ZodString;
    type: z.ZodEnum<["entry", "exit"]>;
}, "strip", z.ZodTypeAny, {
    type: "entry" | "exit";
    datetime: string;
}, {
    type: "entry" | "exit";
    datetime: string;
}>;
declare const GenericPretixAnswerSchema: z.ZodObject<{
    question: z.ZodNumber;
    answer: z.ZodString;
    question_identifier: z.ZodString;
    options: z.ZodArray<z.ZodNumber, "many">;
    option_identifiers: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    options: number[];
    question: number;
    answer: string;
    question_identifier: string;
    option_identifiers: string[];
}, {
    options: number[];
    question: number;
    answer: string;
    question_identifier: string;
    option_identifiers: string[];
}>;
export type GenericPretixAnswer = z.infer<typeof GenericPretixAnswerSchema>;
declare const GenericPretixPositionSchema: z.ZodObject<{
    id: z.ZodNumber;
    order: z.ZodString;
    positionid: z.ZodNumber;
    item: z.ZodNumber;
    price: z.ZodString;
    attendee_name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    attendee_email: z.ZodNullable<z.ZodString>;
    subevent: z.ZodNullable<z.ZodNumber>;
    secret: z.ZodString;
    checkins: z.ZodArray<z.ZodObject<{
        datetime: z.ZodString;
        type: z.ZodEnum<["entry", "exit"]>;
    }, "strip", z.ZodTypeAny, {
        type: "entry" | "exit";
        datetime: string;
    }, {
        type: "entry" | "exit";
        datetime: string;
    }>, "many">;
    answers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        question: z.ZodNumber;
        answer: z.ZodString;
        question_identifier: z.ZodString;
        options: z.ZodArray<z.ZodNumber, "many">;
        option_identifiers: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        options: number[];
        question: number;
        answer: string;
        question_identifier: string;
        option_identifiers: string[];
    }, {
        options: number[];
        question: number;
        answer: string;
        question_identifier: string;
        option_identifiers: string[];
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    id: number;
    order: string;
    positionid: number;
    item: number;
    price: string;
    attendee_email: string | null;
    subevent: number | null;
    secret: string;
    checkins: {
        type: "entry" | "exit";
        datetime: string;
    }[];
    attendee_name?: string | null | undefined;
    answers?: {
        options: number[];
        question: number;
        answer: string;
        question_identifier: string;
        option_identifiers: string[];
    }[] | undefined;
}, {
    id: number;
    order: string;
    positionid: number;
    item: number;
    price: string;
    attendee_email: string | null;
    subevent: number | null;
    secret: string;
    checkins: {
        type: "entry" | "exit";
        datetime: string;
    }[];
    attendee_name?: string | null | undefined;
    answers?: {
        options: number[];
        question: number;
        answer: string;
        question_identifier: string;
        option_identifiers: string[];
    }[] | undefined;
}>;
export declare const GenericPretixOrderSchema: z.ZodObject<{
    code: z.ZodString;
    status: z.ZodString;
    testmode: z.ZodBoolean;
    secret: z.ZodString;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    email: z.ZodString;
    positions: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        order: z.ZodString;
        positionid: z.ZodNumber;
        item: z.ZodNumber;
        price: z.ZodString;
        attendee_name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        attendee_email: z.ZodNullable<z.ZodString>;
        subevent: z.ZodNullable<z.ZodNumber>;
        secret: z.ZodString;
        checkins: z.ZodArray<z.ZodObject<{
            datetime: z.ZodString;
            type: z.ZodEnum<["entry", "exit"]>;
        }, "strip", z.ZodTypeAny, {
            type: "entry" | "exit";
            datetime: string;
        }, {
            type: "entry" | "exit";
            datetime: string;
        }>, "many">;
        answers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            question: z.ZodNumber;
            answer: z.ZodString;
            question_identifier: z.ZodString;
            options: z.ZodArray<z.ZodNumber, "many">;
            option_identifiers: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            options: number[];
            question: number;
            answer: string;
            question_identifier: string;
            option_identifiers: string[];
        }, {
            options: number[];
            question: number;
            answer: string;
            question_identifier: string;
            option_identifiers: string[];
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        order: string;
        positionid: number;
        item: number;
        price: string;
        attendee_email: string | null;
        subevent: number | null;
        secret: string;
        checkins: {
            type: "entry" | "exit";
            datetime: string;
        }[];
        attendee_name?: string | null | undefined;
        answers?: {
            options: number[];
            question: number;
            answer: string;
            question_identifier: string;
            option_identifiers: string[];
        }[] | undefined;
    }, {
        id: number;
        order: string;
        positionid: number;
        item: number;
        price: string;
        attendee_email: string | null;
        subevent: number | null;
        secret: string;
        checkins: {
            type: "entry" | "exit";
            datetime: string;
        }[];
        attendee_name?: string | null | undefined;
        answers?: {
            options: number[];
            question: number;
            answer: string;
            question_identifier: string;
            option_identifiers: string[];
        }[] | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    code: string;
    status: string;
    email: string;
    secret: string;
    testmode: boolean;
    positions: {
        id: number;
        order: string;
        positionid: number;
        item: number;
        price: string;
        attendee_email: string | null;
        subevent: number | null;
        secret: string;
        checkins: {
            type: "entry" | "exit";
            datetime: string;
        }[];
        attendee_name?: string | null | undefined;
        answers?: {
            options: number[];
            question: number;
            answer: string;
            question_identifier: string;
            option_identifiers: string[];
        }[] | undefined;
    }[];
    name?: string | null | undefined;
}, {
    code: string;
    status: string;
    email: string;
    secret: string;
    testmode: boolean;
    positions: {
        id: number;
        order: string;
        positionid: number;
        item: number;
        price: string;
        attendee_email: string | null;
        subevent: number | null;
        secret: string;
        checkins: {
            type: "entry" | "exit";
            datetime: string;
        }[];
        attendee_name?: string | null | undefined;
        answers?: {
            options: number[];
            question: number;
            answer: string;
            question_identifier: string;
            option_identifiers: string[];
        }[] | undefined;
    }[];
    name?: string | null | undefined;
}>;
export declare const GenericPretixProductSchema: z.ZodObject<{
    id: z.ZodNumber;
    category: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
    admission: z.ZodBoolean;
    personalized: z.ZodBoolean;
    generate_tickets: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    name: z.ZodRecord<z.ZodString, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: Record<string, string>;
    id: number;
    admission: boolean;
    personalized: boolean;
    category?: number | null | undefined;
    generate_tickets?: boolean | null | undefined;
}, {
    name: Record<string, string>;
    id: number;
    admission: boolean;
    personalized: boolean;
    category?: number | null | undefined;
    generate_tickets?: boolean | null | undefined;
}>;
export declare const GenericPretixEventSchema: z.ZodObject<{
    slug: z.ZodString;
    name: z.ZodRecord<z.ZodString, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: Record<string, string>;
    slug: string;
}, {
    name: Record<string, string>;
    slug: string;
}>;
export declare const GenericPretixEventSettingsSchema: z.ZodObject<{
    attendee_emails_asked: z.ZodBoolean;
    attendee_emails_required: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    attendee_emails_asked: boolean;
    attendee_emails_required: boolean;
}, {
    attendee_emails_asked: boolean;
    attendee_emails_required: boolean;
}>;
/**
 * All tickets must be configured as "personalized", with the exception of
 * "add-ons", and an add-on is recognized by its category. The use-case
 * for non-personalized add-on tickets was Devconnect towels.
 *
 * To date, we only care about categories for the purpose of ensuring that
 * non-personalized tickets are, indeed, add-ons. No category data is persisted,
 * as it's used only for validation.
 *
 * Category API docs: https://docs.pretix.eu/en/latest/api/resources/categories.html
 *
 * See #1119 for original implementation.
 */
export declare const GenericPretixProductCategorySchema: z.ZodObject<{
    id: z.ZodNumber;
    is_addon: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    id: number;
    is_addon: boolean;
}, {
    id: number;
    is_addon: boolean;
}>;
export declare const GenericPretixCheckinListSchema: z.ZodObject<{
    id: z.ZodNumber;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: number;
}, {
    name: string;
    id: number;
}>;
export type GenericPretixI18nMap = z.infer<typeof GenericPretixI18MapSchema>;
export type GenericPretixOrder = z.infer<typeof GenericPretixOrderSchema>;
export type GenericPretixProduct = z.infer<typeof GenericPretixProductSchema>;
export type GenericPretixEvent = z.infer<typeof GenericPretixEventSchema>;
export type GenericPretixEventSettings = z.infer<typeof GenericPretixEventSettingsSchema>;
export type GenericPretixProductCategory = z.infer<typeof GenericPretixProductCategorySchema>;
export type GenericPretixCheckinList = z.infer<typeof GenericPretixCheckinListSchema>;
export type GenericPretixCheckin = z.infer<typeof GenericPretixCheckinSchema>;
export type GenericPretixPosition = z.infer<typeof GenericPretixPositionSchema>;
export {};
//# sourceMappingURL=genericPretixTypes.d.ts.map