import { FallbackDeserializeFunction, PCDCollection } from "@pcd/pcd-collection";
import { PCDPackage, SerializedPCD } from "@pcd/pcd-types";
import { FeedSubscriptionManager } from "./SubscriptionManager";
import { User } from "./zuzalu";
export interface SyncedEncryptedStorageV1 {
    self: {
        uuid: string;
        commitment: string;
        email: string;
        salt: string | null;
        terms_agreed: number;
    };
    pcds: SerializedPCD[];
}
export interface SyncedEncryptedStorageV2 {
    self: {
        uuid: string;
        commitment: string;
        email: string;
        salt: string | null;
        terms_agreed: number;
    };
    /**
     * Serialized {@link PCDCollection}.
     */
    pcds: string;
    _storage_version: "v2";
}
export interface SyncedEncryptedStorageV3 {
    self: {
        uuid: string;
        commitment: string;
        email: string;
        salt: string | null;
        terms_agreed: number;
    };
    /**
     * Serialized {@link PCDCollection}.
     */
    pcds: string;
    /**
     * Serialized {@link FeedSubscriptionManager}
     */
    subscriptions: string;
    _storage_version: "v3";
}
export interface SyncedEncryptedStorageV4 {
    self: {
        uuid: string;
        commitment: string;
        emails: string[];
        salt: string | null;
        terms_agreed: number;
    };
    /**
     * Serialized {@link PCDCollection}.
     */
    pcds: string;
    /**
     * Serialized {@link FeedSubscriptionManager}
     */
    subscriptions: string;
    _storage_version: "v4";
}
export interface SyncedEncryptedStorageV5 {
    self: {
        uuid: string;
        commitment: string;
        emails: string[];
        salt: string | null;
        terms_agreed: number;
        semaphore_v4_commitment?: string | null;
        semaphore_v4_pubkey?: string | null;
    };
    /**
     * Serialized {@link PCDCollection}.
     */
    pcds: string;
    /**
     * Serialized {@link FeedSubscriptionManager}
     */
    subscriptions: string;
    _storage_version: "v5";
}
export type SyncedEncryptedStorage = SyncedEncryptedStorageV1 | SyncedEncryptedStorageV2 | SyncedEncryptedStorageV3 | SyncedEncryptedStorageV4 | SyncedEncryptedStorageV5;
export declare function isSyncedEncryptedStorageV1(storage: any): storage is SyncedEncryptedStorageV1;
export declare function isSyncedEncryptedStorageV2(storage: any): storage is SyncedEncryptedStorageV2;
export declare function isSyncedEncryptedStorageV3(storage: any): storage is SyncedEncryptedStorageV3;
export declare function isSyncedEncryptedStorageV4(storage: any): storage is SyncedEncryptedStorageV4;
export declare function isSyncedEncryptedStorageV5(storage: any): storage is SyncedEncryptedStorageV5;
/**
 * Deserialize a decrypted storage object and set up the PCDCollection and
 * FeedSubscriptionManager to manage its data.  If the storage comes from
 * an older format which doesn't include subscriptions, then the
 * FeedSubscriptionManager will be empty.
 */
export declare function deserializeStorage(storage: SyncedEncryptedStorage, pcdPackages: PCDPackage[], fallbackDeserializeFunction?: FallbackDeserializeFunction): Promise<{
    pcds: PCDCollection;
    subscriptions: FeedSubscriptionManager;
    storageHash: string;
}>;
/**
 * Serializes a user's PCDs and relates state for storage.  The result is
 * unencrypted, and always uses the latest format.  The hash uniquely identifies
 * the content, as described in getStorageHash.
 */
export declare function serializeStorage(user: User, pcds: PCDCollection, subscriptions: FeedSubscriptionManager): Promise<{
    serializedStorage: SyncedEncryptedStorage;
    storageHash: string;
}>;
/**
 * Calculates a hash to uniquely identify the given seralized storage.
 */
export declare function getStorageHash(storage: SyncedEncryptedStorage): Promise<string>;
//# sourceMappingURL=EncryptedStorage.d.ts.map