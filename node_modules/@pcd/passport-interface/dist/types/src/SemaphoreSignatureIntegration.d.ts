import { SemaphoreSignaturePCD } from "@pcd/semaphore-signature-pcd";
/**
 * Opens a Zupass popup to generate a Semaphore signature proof.
 *
 * @param urlToZupassClient URL of the Zupass client
 * @param popupUrl Route where the useZupassPopupSetup hook is being served from
 * @param messageToSign Message being attested to
 * @param proveOnServer Boolean indicating whether proof should be generated on server
 */
export declare function openSemaphoreSignaturePopup(urlToZupassClient: string, popupUrl: string, messageToSign: string, proveOnServer?: boolean): void;
/**
 * WARNING: Deprecated for sign-in purposes!
 *
 * Opens a Zupass popup to generate a Semaphore signature proof on the user's
 * Zuzalu DB uuid, which can then be used to fetch user details from the Zupass
 * server. Built specifically for Zuzalu apps.
 *
 * @param urlToZupassClient URL of the Zupass client
 * @param popupUrl Route where the useZupassPopupSetup hook is being served from
 * @param originalSiteName Name of site requesting proof
 *
 * @deprecated
 */
export declare function openSignedZuzaluUUIDPopup(urlToZupassClient: string, popupUrl: string, originalSiteName: string): void;
/**
 * Opens a Zupass popup to generate a Semaphore signature proof on the user's
 * Zuzalu DB uuid and website referer, which can then be used to fetch user details
 * from the Zupass server, and ensure that the sign in signature was meant for this
 * website. Built specifically for Zuzalu apps.
 *
 * @param zupassClientUrl URL of the Zupass client
 * @param popupUrl Route where the useZupassPopupSetup hook is being served from
 * @param originalSiteName Name of site requesting proof
 */
export declare function openSignedZuzaluSignInPopup(zupassClientUrl: string, popupUrl: string, originalSiteName: string): void;
/**
 * React hook which can be used on 3rd party application websites that
 * parses and verifies a PCD representing a Semaphore signature proof.
 */
export declare function useSemaphoreSignatureProof(pcdStr: string, onVerified: (valid: boolean) => void): {
    signatureProof: SemaphoreSignaturePCD | undefined;
};
//# sourceMappingURL=SemaphoreSignatureIntegration.d.ts.map