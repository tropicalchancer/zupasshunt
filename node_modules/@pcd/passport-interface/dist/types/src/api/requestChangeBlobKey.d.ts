import { EncryptedPacket } from "@pcd/passport-crypto";
import { SerializedPCD } from "@pcd/pcd-types";
import { SemaphoreSignaturePCD } from "@pcd/semaphore-signature-pcd";
import { ChangeBlobKeyError, ChangeBlobKeyResponseValue } from "../RequestTypes";
import { APIResult } from "./apiResult";
/**
 * Updates the blob key that encrypts a user's storage and updates the salt used to
 * generate the preimage to that blob key. If this request succeeds, the user's storage
 * is no longer accessible with the old blob key and the user's salt is guaranteed to
 * be different.
 *
 * Never rejects. All information encoded in the resolved response.
 */
export declare function requestChangeBlobKey(zupassServerUrl: string, oldBlobKey: string, newBlobKey: string, uuid: string, newSalt: string, encryptedStorage: EncryptedPacket, knownRevision?: string, credential?: SerializedPCD<SemaphoreSignaturePCD>): Promise<ChangeBlobKeyResult>;
export type ChangeBlobKeyResult = APIResult<ChangeBlobKeyResponseValue, ChangeBlobKeyError>;
//# sourceMappingURL=requestChangeBlobKey.d.ts.map