/**
 * When we call the Zupass server, we encapsulate the result in a
 * {@link APIResult}. HTTP requests to the Zupass server never throw
 * exceptions or reject promises - all possible results are encoded
 * in this type.
 */
export type APIResult<TResult = unknown, TError = string> = {
    value: TResult;
    error?: never;
    success: true;
} | {
    value?: never;
    error: TError;
    success: false;
    code?: number;
};
/**
 * Given the string result an HTTP endpoint responds with, return
 * an {@link APIResult}.
 */
export type GetResultValue<T extends APIResult<unknown, unknown>> = (resText: string) => Promise<T>;
/**
 * In the case that an HTTP endpoint throws an error, responds with
 * anything other than a 200 status code, or in the case that a sibling
 * {@link GetResultValue} throws an error/rejects, this function will
 * return an {@link APIResult} representing a 'failure' or 'error' state.
 */
export type GetError<T extends APIResult<unknown, unknown>> = (resText: string, errorCode?: number | undefined) => Promise<T>;
/**
 * Used to convert an HTTP response into a statically-typed and
 * non-rejected {@link APIResult}.
 */
export type ResultMapper<T extends APIResult<unknown, unknown>> = {
    onValue: GetResultValue<T>;
    onError: GetError<T>;
};
/**
 * Convenience type for errors which have a machine-readable name which
 * can be provided by the server, or produced by the API layer
 */
export interface NamedAPIError {
    name: string;
    detailedMessage?: string;
    code?: number;
}
/**
 * Format a user-readable error message from a NamedAPIError instance.
 */
export declare function getNamedAPIErrorMessage(e: NamedAPIError): string;
/**
 * Default value for `NamedAPIError.name` for cases when a more
 * specific name cannot be determined.
 */
export declare const ERROR_NAME_UNKNOWN = "Unknown";
/**
 * Value for `NamedAPIError.name` for cases where a client-side check
 * indicates the server didn't respond properly.
 */
export declare const ERROR_NAME_BAD_RESPONSE = "BadResponse";
/**
 * Helper function which can be used directly in the `onError` field of a
 * ResultMapper to produce an error type of NamedAPIError.  This
 * can handle server-provided errors which conform to the right type, as well
 * as server or local errors which do not.
 *
 * This function will allow the server to specify error contents via
 * an `error` field in the resulting JSON.  Fields which aren't provided
 * by the server (or which aren't the expected type) will be filled in by
 * this function instead.  Unknown fields from the server will be passed
 * through unmodified.
 *
 * The APIResult returned is always an error with `success===false`.  The
 * result type here is only a placeholder.
 */
export declare function onNamedAPIError<TResult>(resText: string, errorCode: number | undefined): Promise<APIResult<TResult, NamedAPIError>>;
/**
 * Makes a best effort to pick a useful name code for a given error code.
 * The code is assumed to be an HTTP status code if it matches a known status.
 * This isn't intended to be an exhaustive list of possible code, just
 * a few codes known to be used in our API, which can be extended later.
 */
export declare function apiErrorReasonFromCode(code: number): string | undefined;
//# sourceMappingURL=apiResult.d.ts.map