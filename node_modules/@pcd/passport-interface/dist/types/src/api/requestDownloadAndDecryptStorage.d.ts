import { SyncedEncryptedStorage } from "../EncryptedStorage";
import { APIResult, NamedAPIError } from "./apiResult";
export type StorageWithRevision = {
    storage: SyncedEncryptedStorage;
    revision: string;
};
export type DownloadAndDecryptResult = APIResult<StorageWithRevision, NamedAPIError>;
/**
 * Downloads and decrypts a user's end-to-end encrypted backup of their
 * PCDs, given their encryption key. The server never learns the encryption
 * key.
 *
 * Never rejects. All information encoded in the resolved response.
 */
export declare function requestDownloadAndDecryptStorage(zupassServerUrl: string, encryptionKey: string): Promise<DownloadAndDecryptResult>;
export type OptionalStorageWithRevision = {
    storage?: SyncedEncryptedStorage;
    revision: string;
};
export type DownloadAndDecryptUpdateResult = APIResult<OptionalStorageWithRevision, NamedAPIError>;
/**
 * Downloads and decrypts a user's end-to-end encrypted backup of their
 * PCDs, given their encryption key. The server never learns the encryption
 * key.
 *
 * The knownRevision indicates the previous version already known to the client.
 * If that is the latest version, no storage is returned.
 *
 * Never rejects. All information encoded in the resolved response.
 */
export declare function requestDownloadAndDecryptUpdatedStorage(zupassServerUrl: string, encryptionKey: string, knownRevision: string | undefined): Promise<DownloadAndDecryptUpdateResult>;
//# sourceMappingURL=requestDownloadAndDecryptStorage.d.ts.map