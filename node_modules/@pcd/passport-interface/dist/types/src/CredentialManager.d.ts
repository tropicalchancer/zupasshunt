import { PCDCollection } from "@pcd/pcd-collection";
import { SerializedPCD } from "@pcd/pcd-types";
import { IdentityV3 } from "@pcd/semaphore-identity-pcd";
import { CredentialRequest } from "./SubscriptionManager";
export interface CredentialManagerAPI {
    canGenerateCredential(req: CredentialRequest): boolean;
    requestCredential(req: CredentialRequest): Promise<SerializedPCD>;
}
export type CredentialCache = Map<string, CacheEntry>;
interface CacheEntry {
    timestamp: number;
    value: SerializedPCD;
    request: CredentialRequest;
    cacheId: string;
}
/**
 * These constants are convenient values for credential requests.
 * PODBOX_CREDENTIAL_REQUEST requires an EmailPCD, since this is commonly
 * required for Podbox requests.
 * ZUPASS_CREDENTIAL_REQUEST does not, as Zupass can identify users by their
 * Semaphore ID alone.
 */
export declare const PODBOX_CREDENTIAL_REQUEST: CredentialRequest;
export declare const ZUPASS_CREDENTIAL_REQUEST: CredentialRequest;
export declare function createCredentialCache(): CredentialCache;
export declare function createStorageBackedCredentialCache(): CredentialCache;
/**
 * Handles generation of credentials for feeds.
 */
export declare class CredentialManager implements CredentialManagerAPI {
    private readonly identityV3;
    private readonly pcds;
    private readonly cache;
    private readonly credentialPromises;
    constructor(identity: IdentityV3, pcds: PCDCollection, cache: CredentialCache);
    canGenerateCredential(req: CredentialRequest): boolean;
    private getCachedCredentials;
    private getCurrentCacheId;
    private setCachedCredentials;
    private purgeExpiredCredentials;
    /**
     * Returns a requested credential, either from the cache or by generating it.
     */
    requestCredential(req: CredentialRequest): Promise<SerializedPCD>;
    /**
     * Generates the requested credential, if possible.
     * Takes a {@link CredentialRequest} and produces a serialized PCD which
     * consists of a signature PCD (e.g. a semaphore signature PCD) which wraps
     * a {@link FeedCredentialPayload}. This payload contains a timestamp, and
     * may contain a PCD if a) the feed requests one and b) CredentialManager
     * can find a matching PCD.
     */
    private generateCredential;
    private semaphoreSignPayload;
}
export {};
//# sourceMappingURL=CredentialManager.d.ts.map