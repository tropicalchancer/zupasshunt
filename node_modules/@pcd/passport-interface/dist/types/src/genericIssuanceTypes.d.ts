import { z } from "zod";
/**
 * Each new {@link Pipeline} type needs a corresponding entry in thie enum.
 */
export declare enum PipelineType {
    Lemonade = "Lemonade",
    Pretix = "Pretix",
    CSV = "CSV",
    POD = "POD",
    CSVTicket = "CSVTicket"
}
export declare enum IncidentPolicy {
    Everyone = "Everyone",
    JustIvan = "JustIvan",
    JustRichard = "JustRichard"
}
declare const BasePipelineDefinitionSchema: z.ZodObject<{
    id: z.ZodString;
    ownerUserId: z.ZodString;
    editorUserIds: z.ZodArray<z.ZodString, "many">;
    timeCreated: z.ZodString;
    timeUpdated: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}, {
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}>;
declare const AlertsOptionsSchema: z.ZodObject<{
    pagerduty: z.ZodOptional<z.ZodBoolean>;
    loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
    discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    discordAlerts: z.ZodOptional<z.ZodBoolean>;
    alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
    errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
    warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    pagerduty?: boolean | undefined;
    loadIncidentPagePolicy?: IncidentPolicy | undefined;
    discordTags?: string[] | undefined;
    discordAlerts?: boolean | undefined;
    alertOnLogErrors?: boolean | undefined;
    errorLogIgnoreRegexes?: string[] | undefined;
    alertOnLogWarnings?: boolean | undefined;
    warningLogIgnoreRegexes?: string[] | undefined;
    alertOnAtomMismatch?: boolean | undefined;
}, {
    pagerduty?: boolean | undefined;
    loadIncidentPagePolicy?: IncidentPolicy | undefined;
    discordTags?: string[] | undefined;
    discordAlerts?: boolean | undefined;
    alertOnLogErrors?: boolean | undefined;
    errorLogIgnoreRegexes?: string[] | undefined;
    alertOnLogWarnings?: boolean | undefined;
    warningLogIgnoreRegexes?: string[] | undefined;
    alertOnAtomMismatch?: boolean | undefined;
}>;
export type AlertsOptions = z.infer<typeof AlertsOptionsSchema>;
declare const BasePipelineOptionsSchema: z.ZodObject<{
    /**
     * Paused pipelines don't load data, but their APIs are still
     * accessible and enabled.
     */
    paused: z.ZodOptional<z.ZodBoolean>;
    name: z.ZodOptional<z.ZodString>;
    notes: z.ZodOptional<z.ZodString>;
    alerts: z.ZodOptional<z.ZodObject<{
        pagerduty: z.ZodOptional<z.ZodBoolean>;
        loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
        discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        discordAlerts: z.ZodOptional<z.ZodBoolean>;
        alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
        errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
        warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }>>;
    /**
     * Protected pipelines can't be deleted.
     */
    protected: z.ZodOptional<z.ZodBoolean>;
    important: z.ZodOptional<z.ZodBoolean>;
    disableCache: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    paused?: boolean | undefined;
    name?: string | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
}, {
    paused?: boolean | undefined;
    name?: string | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
}>;
export type BasePipelineOptions = z.infer<typeof BasePipelineOptionsSchema>;
/**
 * A pipeline definition is owned by the user who set it up. It's the
 * persisted representation of a pipeline on our backend. When a user
 * sets up a pipeline via the generic issuance UI, they are creating one
 * of these over a series of configuration steps - choosing which data
 * source to use, uploading an API key, selecting which data to load, etc.
 */
export type BasePipelineDefinition = z.infer<typeof BasePipelineDefinitionSchema>;
/**
 * Pipeline definitions can also include manually-added tickets. Pipelines that
 * support this will create tickets according to these specifications, in
 * addition to those loaded from their primary data source.
 */
declare const ManualTicketSchema: z.ZodObject<{
    /**
     * The ID of the ticket.
     */
    id: z.ZodString;
    /**
     * The generic issuance UUID of the event that the ticket is for.
     */
    eventId: z.ZodString;
    /**
     * The generic issuance UUID for the product/ticket type.
     */
    productId: z.ZodString;
    /**
     * The email to assign the ticket to.
     */
    attendeeEmail: z.ZodString;
    /**
     * The full name of the attendee.
     */
    attendeeName: z.ZodString;
    timeCreated: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    eventId: string;
    productId: string;
    attendeeEmail: string;
    attendeeName: string;
    timeCreated?: string | undefined;
}, {
    id: string;
    eventId: string;
    productId: string;
    attendeeEmail: string;
    attendeeName: string;
    timeCreated?: string | undefined;
}>;
export type ManualTicket = z.infer<typeof ManualTicketSchema>;
declare const LemonadePipelineTicketTypeConfigSchema: z.ZodObject<{
    /**
     * The ID of this ticket type on the Lemonade end.
     */
    externalId: z.ZodString;
    /**
     * The UUID of this ticket type used in {@link EdDSATicketPCD}.
     */
    genericIssuanceProductId: z.ZodString;
    /**
     * Whether this ticket type is allowed to check other tickets in or not.
     */
    isSuperUser: z.ZodBoolean;
    /**
     * Display name
     */
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    externalId: string;
    genericIssuanceProductId: string;
    isSuperUser: boolean;
}, {
    name: string;
    externalId: string;
    genericIssuanceProductId: string;
    isSuperUser: boolean;
}>;
export declare const MemberCriteriaSchema: z.ZodObject<{
    /**
     * generic issuance event id
     */
    eventId: z.ZodString;
    /**
     * generic issuance product id
     */
    productId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    eventId: string;
    productId?: string | undefined;
}, {
    eventId: string;
    productId?: string | undefined;
}>;
export type MemberCriteria = z.infer<typeof MemberCriteriaSchema>;
declare const SemaphoreGroupConfigSchema: z.ZodObject<{
    /**
     * Defines the set of event ID/product ID pairs that qualify a ticket-holder
     * for membership in this group. If no product ID is specified, then all
     * tickets for the event will qualify for group membership.
     *
     * The groupId is a UUID which the administrator should generate.
     */
    groupId: z.ZodString;
    name: z.ZodString;
    memberCriteria: z.ZodArray<z.ZodObject<{
        /**
         * generic issuance event id
         */
        eventId: z.ZodString;
        /**
         * generic issuance product id
         */
        productId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        eventId: string;
        productId?: string | undefined;
    }, {
        eventId: string;
        productId?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    groupId: string;
    memberCriteria: {
        eventId: string;
        productId?: string | undefined;
    }[];
}, {
    name: string;
    groupId: string;
    memberCriteria: {
        eventId: string;
        productId?: string | undefined;
    }[];
}>;
export type SemaphoreGroupConfig = z.infer<typeof SemaphoreGroupConfigSchema>;
/**
 * Generic Issuance-specific ticket type configuration - roughly corresponds to a
 * 'Product' in Pretix-land.
 */
export type LemonadePipelineTicketTypeConfig = z.infer<typeof LemonadePipelineTicketTypeConfigSchema>;
declare const LemonadePipelineEventConfigSchema: z.ZodObject<{
    /**
     * The ID of this event on the Lemonade end.
     */
    externalId: z.ZodString;
    /**
     * Display name.
     */
    name: z.ZodString;
    /**
     * The UUID of this event used for {@link EdDSATicketPCD}.
     */
    genericIssuanceEventId: z.ZodString;
    /**
     * Roughly translates to Products in {@link EdDSATicketPCD}.
     */
    ticketTypes: z.ZodArray<z.ZodObject<{
        /**
         * The ID of this ticket type on the Lemonade end.
         */
        externalId: z.ZodString;
        /**
         * The UUID of this ticket type used in {@link EdDSATicketPCD}.
         */
        genericIssuanceProductId: z.ZodString;
        /**
         * Whether this ticket type is allowed to check other tickets in or not.
         */
        isSuperUser: z.ZodBoolean;
        /**
         * Display name
         */
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        externalId: string;
        genericIssuanceProductId: string;
        isSuperUser: boolean;
    }, {
        name: string;
        externalId: string;
        genericIssuanceProductId: string;
        isSuperUser: boolean;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    externalId: string;
    genericIssuanceEventId: string;
    ticketTypes: {
        name: string;
        externalId: string;
        genericIssuanceProductId: string;
        isSuperUser: boolean;
    }[];
}, {
    name: string;
    externalId: string;
    genericIssuanceEventId: string;
    ticketTypes: {
        name: string;
        externalId: string;
        genericIssuanceProductId: string;
        isSuperUser: boolean;
    }[];
}>;
/**
 * Generic Issuance-specific event configuration. Should roughly match up to the
 * types defined above - {@link LemonadeTicket}, {@link LemonadeEvent}, and
 * {@link LemonadeTicketType}.
 */
export type LemonadePipelineEventConfig = z.infer<typeof LemonadePipelineEventConfigSchema>;
export declare const ActionScreenConfigSchema: z.ZodObject<{
    eventBannerUrl: z.ZodOptional<z.ZodString>;
    eventNameConfig: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    eventBannerUrl?: string | undefined;
    eventNameConfig?: string | undefined;
}, {
    eventBannerUrl?: string | undefined;
    eventNameConfig?: string | undefined;
}>;
export type ActionScreenConfig = z.infer<typeof ActionScreenConfigSchema>;
export declare const BadgeConfigSchema: z.ZodObject<{
    id: z.ZodString;
    eventName: z.ZodString;
    productName: z.ZodOptional<z.ZodString>;
    imageUrl: z.ZodString;
    givers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    grantOnCheckin: z.ZodOptional<z.ZodBoolean>;
    maxPerDay: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    id: string;
    eventName: string;
    imageUrl: string;
    productName?: string | undefined;
    givers?: string[] | undefined;
    grantOnCheckin?: boolean | undefined;
    maxPerDay?: number | undefined;
}, {
    id: string;
    eventName: string;
    imageUrl: string;
    productName?: string | undefined;
    givers?: string[] | undefined;
    grantOnCheckin?: boolean | undefined;
    maxPerDay?: number | undefined;
}>;
export type BadgeConfig = z.infer<typeof BadgeConfigSchema>;
export declare const BadgesConfigSchema: z.ZodObject<{
    enabled: z.ZodOptional<z.ZodBoolean>;
    choices: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        eventName: z.ZodString;
        productName: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodString;
        givers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        grantOnCheckin: z.ZodOptional<z.ZodBoolean>;
        maxPerDay: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        eventName: string;
        imageUrl: string;
        productName?: string | undefined;
        givers?: string[] | undefined;
        grantOnCheckin?: boolean | undefined;
        maxPerDay?: number | undefined;
    }, {
        id: string;
        eventName: string;
        imageUrl: string;
        productName?: string | undefined;
        givers?: string[] | undefined;
        grantOnCheckin?: boolean | undefined;
        maxPerDay?: number | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    enabled?: boolean | undefined;
    choices?: {
        id: string;
        eventName: string;
        imageUrl: string;
        productName?: string | undefined;
        givers?: string[] | undefined;
        grantOnCheckin?: boolean | undefined;
        maxPerDay?: number | undefined;
    }[] | undefined;
}, {
    enabled?: boolean | undefined;
    choices?: {
        id: string;
        eventName: string;
        imageUrl: string;
        productName?: string | undefined;
        givers?: string[] | undefined;
        grantOnCheckin?: boolean | undefined;
        maxPerDay?: number | undefined;
    }[] | undefined;
}>;
export type BadgesConfig = z.infer<typeof BadgesConfigSchema>;
export declare const ContactsConfigSchema: z.ZodObject<{
    enabled: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    enabled?: boolean | undefined;
}, {
    enabled?: boolean | undefined;
}>;
export type ContactsConfig = z.infer<typeof ContactsConfigSchema>;
/**
 * Configuration of actions Podbox enables subscribers of the same Pipeline
 * to perform on each other:
 * - checking in
 * - issuing 'badges'
 * - pushing a contact card to scanee's zupass
 * - potentially other actions, like throwing snowballs.
 */
declare const TicketActionsOptionsSchema: z.ZodObject<{
    badges: z.ZodOptional<z.ZodObject<{
        enabled: z.ZodOptional<z.ZodBoolean>;
        choices: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            eventName: z.ZodString;
            productName: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodString;
            givers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            grantOnCheckin: z.ZodOptional<z.ZodBoolean>;
            maxPerDay: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            eventName: string;
            imageUrl: string;
            productName?: string | undefined;
            givers?: string[] | undefined;
            grantOnCheckin?: boolean | undefined;
            maxPerDay?: number | undefined;
        }, {
            id: string;
            eventName: string;
            imageUrl: string;
            productName?: string | undefined;
            givers?: string[] | undefined;
            grantOnCheckin?: boolean | undefined;
            maxPerDay?: number | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        enabled?: boolean | undefined;
        choices?: {
            id: string;
            eventName: string;
            imageUrl: string;
            productName?: string | undefined;
            givers?: string[] | undefined;
            grantOnCheckin?: boolean | undefined;
            maxPerDay?: number | undefined;
        }[] | undefined;
    }, {
        enabled?: boolean | undefined;
        choices?: {
            id: string;
            eventName: string;
            imageUrl: string;
            productName?: string | undefined;
            givers?: string[] | undefined;
            grantOnCheckin?: boolean | undefined;
            maxPerDay?: number | undefined;
        }[] | undefined;
    }>>;
    contacts: z.ZodOptional<z.ZodObject<{
        enabled: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        enabled?: boolean | undefined;
    }, {
        enabled?: boolean | undefined;
    }>>;
    screenConfig: z.ZodOptional<z.ZodObject<{
        eventBannerUrl: z.ZodOptional<z.ZodString>;
        eventNameConfig: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        eventBannerUrl?: string | undefined;
        eventNameConfig?: string | undefined;
    }, {
        eventBannerUrl?: string | undefined;
        eventNameConfig?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    badges?: {
        enabled?: boolean | undefined;
        choices?: {
            id: string;
            eventName: string;
            imageUrl: string;
            productName?: string | undefined;
            givers?: string[] | undefined;
            grantOnCheckin?: boolean | undefined;
            maxPerDay?: number | undefined;
        }[] | undefined;
    } | undefined;
    contacts?: {
        enabled?: boolean | undefined;
    } | undefined;
    screenConfig?: {
        eventBannerUrl?: string | undefined;
        eventNameConfig?: string | undefined;
    } | undefined;
}, {
    badges?: {
        enabled?: boolean | undefined;
        choices?: {
            id: string;
            eventName: string;
            imageUrl: string;
            productName?: string | undefined;
            givers?: string[] | undefined;
            grantOnCheckin?: boolean | undefined;
            maxPerDay?: number | undefined;
        }[] | undefined;
    } | undefined;
    contacts?: {
        enabled?: boolean | undefined;
    } | undefined;
    screenConfig?: {
        eventBannerUrl?: string | undefined;
        eventNameConfig?: string | undefined;
    } | undefined;
}>;
export type TicketActions = z.infer<typeof TicketActionsOptionsSchema>;
declare const FeedIssuanceOptionsSchema: z.ZodObject<{
    feedId: z.ZodString;
    feedDisplayName: z.ZodString;
    feedDescription: z.ZodString;
    feedFolder: z.ZodString;
}, "strip", z.ZodTypeAny, {
    feedId: string;
    feedDisplayName: string;
    feedDescription: string;
    feedFolder: string;
}, {
    feedId: string;
    feedDisplayName: string;
    feedDescription: string;
    feedFolder: string;
}>;
export type FeedIssuanceOptions = z.infer<typeof FeedIssuanceOptionsSchema>;
declare const ImageOptionsSchema: z.ZodObject<{
    imageUrl: z.ZodString;
    requireCheckedIn: z.ZodBoolean;
    qrCodeOverrideImageUrl: z.ZodOptional<z.ZodString>;
    eventStartDate: z.ZodOptional<z.ZodString>;
    eventLocation: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    imageUrl: string;
    requireCheckedIn: boolean;
    qrCodeOverrideImageUrl?: string | undefined;
    eventStartDate?: string | undefined;
    eventLocation?: string | undefined;
}, {
    imageUrl: string;
    requireCheckedIn: boolean;
    qrCodeOverrideImageUrl?: string | undefined;
    eventStartDate?: string | undefined;
    eventLocation?: string | undefined;
}>;
export type ImageOptions = z.infer<typeof ImageOptionsSchema>;
declare const LemonadePipelineOptionsSchema: z.ZodEffects<z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    paused: z.ZodOptional<z.ZodBoolean>;
    notes: z.ZodOptional<z.ZodString>;
    alerts: z.ZodOptional<z.ZodObject<{
        pagerduty: z.ZodOptional<z.ZodBoolean>;
        loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
        discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        discordAlerts: z.ZodOptional<z.ZodBoolean>;
        alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
        errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
        warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }>>;
    protected: z.ZodOptional<z.ZodBoolean>;
    important: z.ZodOptional<z.ZodBoolean>;
    disableCache: z.ZodOptional<z.ZodBoolean>;
    oauthAudience: z.ZodString;
    oauthClientId: z.ZodString;
    oauthClientSecret: z.ZodString;
    oauthServerUrl: z.ZodString;
    backendUrl: z.ZodString;
    events: z.ZodArray<z.ZodObject<{
        /**
         * The ID of this event on the Lemonade end.
         */
        externalId: z.ZodString;
        /**
         * Display name.
         */
        name: z.ZodString;
        /**
         * The UUID of this event used for {@link EdDSATicketPCD}.
         */
        genericIssuanceEventId: z.ZodString;
        /**
         * Roughly translates to Products in {@link EdDSATicketPCD}.
         */
        ticketTypes: z.ZodArray<z.ZodObject<{
            /**
             * The ID of this ticket type on the Lemonade end.
             */
            externalId: z.ZodString;
            /**
             * The UUID of this ticket type used in {@link EdDSATicketPCD}.
             */
            genericIssuanceProductId: z.ZodString;
            /**
             * Whether this ticket type is allowed to check other tickets in or not.
             */
            isSuperUser: z.ZodBoolean;
            /**
             * Display name
             */
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            externalId: string;
            genericIssuanceProductId: string;
            isSuperUser: boolean;
        }, {
            name: string;
            externalId: string;
            genericIssuanceProductId: string;
            isSuperUser: boolean;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        externalId: string;
        genericIssuanceEventId: string;
        ticketTypes: {
            name: string;
            externalId: string;
            genericIssuanceProductId: string;
            isSuperUser: boolean;
        }[];
    }, {
        name: string;
        externalId: string;
        genericIssuanceEventId: string;
        ticketTypes: {
            name: string;
            externalId: string;
            genericIssuanceProductId: string;
            isSuperUser: boolean;
        }[];
    }>, "many">;
    superuserEmails: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    feedOptions: z.ZodObject<{
        feedId: z.ZodString;
        feedDisplayName: z.ZodString;
        feedDescription: z.ZodString;
        feedFolder: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    }, {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    }>;
    manualTickets: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
        /**
         * The ID of the ticket.
         */
        id: z.ZodString;
        /**
         * The generic issuance UUID of the event that the ticket is for.
         */
        eventId: z.ZodString;
        /**
         * The generic issuance UUID for the product/ticket type.
         */
        productId: z.ZodString;
        /**
         * The email to assign the ticket to.
         */
        attendeeEmail: z.ZodString;
        /**
         * The full name of the attendee.
         */
        attendeeName: z.ZodString;
        timeCreated: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }, {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }>, "many">>, {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined, {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined>;
    ticketActions: z.ZodOptional<z.ZodObject<{
        badges: z.ZodOptional<z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                eventName: z.ZodString;
                productName: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodString;
                givers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                grantOnCheckin: z.ZodOptional<z.ZodBoolean>;
                maxPerDay: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                eventName: string;
                imageUrl: string;
                productName?: string | undefined;
                givers?: string[] | undefined;
                grantOnCheckin?: boolean | undefined;
                maxPerDay?: number | undefined;
            }, {
                id: string;
                eventName: string;
                imageUrl: string;
                productName?: string | undefined;
                givers?: string[] | undefined;
                grantOnCheckin?: boolean | undefined;
                maxPerDay?: number | undefined;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean | undefined;
            choices?: {
                id: string;
                eventName: string;
                imageUrl: string;
                productName?: string | undefined;
                givers?: string[] | undefined;
                grantOnCheckin?: boolean | undefined;
                maxPerDay?: number | undefined;
            }[] | undefined;
        }, {
            enabled?: boolean | undefined;
            choices?: {
                id: string;
                eventName: string;
                imageUrl: string;
                productName?: string | undefined;
                givers?: string[] | undefined;
                grantOnCheckin?: boolean | undefined;
                maxPerDay?: number | undefined;
            }[] | undefined;
        }>>;
        contacts: z.ZodOptional<z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean | undefined;
        }, {
            enabled?: boolean | undefined;
        }>>;
        screenConfig: z.ZodOptional<z.ZodObject<{
            eventBannerUrl: z.ZodOptional<z.ZodString>;
            eventNameConfig: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            eventBannerUrl?: string | undefined;
            eventNameConfig?: string | undefined;
        }, {
            eventBannerUrl?: string | undefined;
            eventNameConfig?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        badges?: {
            enabled?: boolean | undefined;
            choices?: {
                id: string;
                eventName: string;
                imageUrl: string;
                productName?: string | undefined;
                givers?: string[] | undefined;
                grantOnCheckin?: boolean | undefined;
                maxPerDay?: number | undefined;
            }[] | undefined;
        } | undefined;
        contacts?: {
            enabled?: boolean | undefined;
        } | undefined;
        screenConfig?: {
            eventBannerUrl?: string | undefined;
            eventNameConfig?: string | undefined;
        } | undefined;
    }, {
        badges?: {
            enabled?: boolean | undefined;
            choices?: {
                id: string;
                eventName: string;
                imageUrl: string;
                productName?: string | undefined;
                givers?: string[] | undefined;
                grantOnCheckin?: boolean | undefined;
                maxPerDay?: number | undefined;
            }[] | undefined;
        } | undefined;
        contacts?: {
            enabled?: boolean | undefined;
        } | undefined;
        screenConfig?: {
            eventBannerUrl?: string | undefined;
            eventNameConfig?: string | undefined;
        } | undefined;
    }>>;
    semaphoreGroups: z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
        /**
         * Defines the set of event ID/product ID pairs that qualify a ticket-holder
         * for membership in this group. If no product ID is specified, then all
         * tickets for the event will qualify for group membership.
         *
         * The groupId is a UUID which the administrator should generate.
         */
        groupId: z.ZodString;
        name: z.ZodString;
        memberCriteria: z.ZodArray<z.ZodObject<{
            /**
             * generic issuance event id
             */
            eventId: z.ZodString;
            /**
             * generic issuance product id
             */
            productId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            eventId: string;
            productId?: string | undefined;
        }, {
            eventId: string;
            productId?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }>, "many">>, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined>, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined>;
    enablePODTickets: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    oauthAudience: string;
    oauthClientId: string;
    oauthClientSecret: string;
    oauthServerUrl: string;
    backendUrl: string;
    events: {
        name: string;
        externalId: string;
        genericIssuanceEventId: string;
        ticketTypes: {
            name: string;
            externalId: string;
            genericIssuanceProductId: string;
            isSuperUser: boolean;
        }[];
    }[];
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    superuserEmails?: string[] | undefined;
    manualTickets?: {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined;
    ticketActions?: {
        badges?: {
            enabled?: boolean | undefined;
            choices?: {
                id: string;
                eventName: string;
                imageUrl: string;
                productName?: string | undefined;
                givers?: string[] | undefined;
                grantOnCheckin?: boolean | undefined;
                maxPerDay?: number | undefined;
            }[] | undefined;
        } | undefined;
        contacts?: {
            enabled?: boolean | undefined;
        } | undefined;
        screenConfig?: {
            eventBannerUrl?: string | undefined;
            eventNameConfig?: string | undefined;
        } | undefined;
    } | undefined;
    semaphoreGroups?: {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined;
    enablePODTickets?: boolean | undefined;
}, {
    oauthAudience: string;
    oauthClientId: string;
    oauthClientSecret: string;
    oauthServerUrl: string;
    backendUrl: string;
    events: {
        name: string;
        externalId: string;
        genericIssuanceEventId: string;
        ticketTypes: {
            name: string;
            externalId: string;
            genericIssuanceProductId: string;
            isSuperUser: boolean;
        }[];
    }[];
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    superuserEmails?: string[] | undefined;
    manualTickets?: {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined;
    ticketActions?: {
        badges?: {
            enabled?: boolean | undefined;
            choices?: {
                id: string;
                eventName: string;
                imageUrl: string;
                productName?: string | undefined;
                givers?: string[] | undefined;
                grantOnCheckin?: boolean | undefined;
                maxPerDay?: number | undefined;
            }[] | undefined;
        } | undefined;
        contacts?: {
            enabled?: boolean | undefined;
        } | undefined;
        screenConfig?: {
            eventBannerUrl?: string | undefined;
            eventNameConfig?: string | undefined;
        } | undefined;
    } | undefined;
    semaphoreGroups?: {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined;
    enablePODTickets?: boolean | undefined;
}>, {
    oauthAudience: string;
    oauthClientId: string;
    oauthClientSecret: string;
    oauthServerUrl: string;
    backendUrl: string;
    events: {
        name: string;
        externalId: string;
        genericIssuanceEventId: string;
        ticketTypes: {
            name: string;
            externalId: string;
            genericIssuanceProductId: string;
            isSuperUser: boolean;
        }[];
    }[];
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    superuserEmails?: string[] | undefined;
    manualTickets?: {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined;
    ticketActions?: {
        badges?: {
            enabled?: boolean | undefined;
            choices?: {
                id: string;
                eventName: string;
                imageUrl: string;
                productName?: string | undefined;
                givers?: string[] | undefined;
                grantOnCheckin?: boolean | undefined;
                maxPerDay?: number | undefined;
            }[] | undefined;
        } | undefined;
        contacts?: {
            enabled?: boolean | undefined;
        } | undefined;
        screenConfig?: {
            eventBannerUrl?: string | undefined;
            eventNameConfig?: string | undefined;
        } | undefined;
    } | undefined;
    semaphoreGroups?: {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined;
    enablePODTickets?: boolean | undefined;
}, {
    oauthAudience: string;
    oauthClientId: string;
    oauthClientSecret: string;
    oauthServerUrl: string;
    backendUrl: string;
    events: {
        name: string;
        externalId: string;
        genericIssuanceEventId: string;
        ticketTypes: {
            name: string;
            externalId: string;
            genericIssuanceProductId: string;
            isSuperUser: boolean;
        }[];
    }[];
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    superuserEmails?: string[] | undefined;
    manualTickets?: {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined;
    ticketActions?: {
        badges?: {
            enabled?: boolean | undefined;
            choices?: {
                id: string;
                eventName: string;
                imageUrl: string;
                productName?: string | undefined;
                givers?: string[] | undefined;
                grantOnCheckin?: boolean | undefined;
                maxPerDay?: number | undefined;
            }[] | undefined;
        } | undefined;
        contacts?: {
            enabled?: boolean | undefined;
        } | undefined;
        screenConfig?: {
            eventBannerUrl?: string | undefined;
            eventNameConfig?: string | undefined;
        } | undefined;
    } | undefined;
    semaphoreGroups?: {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined;
    enablePODTickets?: boolean | undefined;
}>;
export type LemonadePipelineOptions = z.infer<typeof LemonadePipelineOptionsSchema>;
declare const LemonadePipelineDefinitionSchema: z.ZodObject<{
    id: z.ZodString;
    ownerUserId: z.ZodString;
    editorUserIds: z.ZodArray<z.ZodString, "many">;
    timeCreated: z.ZodString;
    timeUpdated: z.ZodString;
    type: z.ZodLiteral<PipelineType.Lemonade>;
    options: z.ZodEffects<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        paused: z.ZodOptional<z.ZodBoolean>;
        notes: z.ZodOptional<z.ZodString>;
        alerts: z.ZodOptional<z.ZodObject<{
            pagerduty: z.ZodOptional<z.ZodBoolean>;
            loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
            discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            discordAlerts: z.ZodOptional<z.ZodBoolean>;
            alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
            errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
            warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }>>;
        protected: z.ZodOptional<z.ZodBoolean>;
        important: z.ZodOptional<z.ZodBoolean>;
        disableCache: z.ZodOptional<z.ZodBoolean>;
        oauthAudience: z.ZodString;
        oauthClientId: z.ZodString;
        oauthClientSecret: z.ZodString;
        oauthServerUrl: z.ZodString;
        backendUrl: z.ZodString;
        events: z.ZodArray<z.ZodObject<{
            /**
             * The ID of this event on the Lemonade end.
             */
            externalId: z.ZodString;
            /**
             * Display name.
             */
            name: z.ZodString;
            /**
             * The UUID of this event used for {@link EdDSATicketPCD}.
             */
            genericIssuanceEventId: z.ZodString;
            /**
             * Roughly translates to Products in {@link EdDSATicketPCD}.
             */
            ticketTypes: z.ZodArray<z.ZodObject<{
                /**
                 * The ID of this ticket type on the Lemonade end.
                 */
                externalId: z.ZodString;
                /**
                 * The UUID of this ticket type used in {@link EdDSATicketPCD}.
                 */
                genericIssuanceProductId: z.ZodString;
                /**
                 * Whether this ticket type is allowed to check other tickets in or not.
                 */
                isSuperUser: z.ZodBoolean;
                /**
                 * Display name
                 */
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }, {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }, {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }>, "many">;
        superuserEmails: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        feedOptions: z.ZodObject<{
            feedId: z.ZodString;
            feedDisplayName: z.ZodString;
            feedDescription: z.ZodString;
            feedFolder: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }>;
        manualTickets: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The ID of the ticket.
             */
            id: z.ZodString;
            /**
             * The generic issuance UUID of the event that the ticket is for.
             */
            eventId: z.ZodString;
            /**
             * The generic issuance UUID for the product/ticket type.
             */
            productId: z.ZodString;
            /**
             * The email to assign the ticket to.
             */
            attendeeEmail: z.ZodString;
            /**
             * The full name of the attendee.
             */
            attendeeName: z.ZodString;
            timeCreated: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }>, "many">>, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined>;
        ticketActions: z.ZodOptional<z.ZodObject<{
            badges: z.ZodOptional<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodBoolean>;
                choices: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    eventName: z.ZodString;
                    productName: z.ZodOptional<z.ZodString>;
                    imageUrl: z.ZodString;
                    givers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    grantOnCheckin: z.ZodOptional<z.ZodBoolean>;
                    maxPerDay: z.ZodOptional<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }, {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            }, {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            }>>;
            contacts: z.ZodOptional<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                enabled?: boolean | undefined;
            }, {
                enabled?: boolean | undefined;
            }>>;
            screenConfig: z.ZodOptional<z.ZodObject<{
                eventBannerUrl: z.ZodOptional<z.ZodString>;
                eventNameConfig: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            }, {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        }, {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        }>>;
        semaphoreGroups: z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * Defines the set of event ID/product ID pairs that qualify a ticket-holder
             * for membership in this group. If no product ID is specified, then all
             * tickets for the event will qualify for group membership.
             *
             * The groupId is a UUID which the administrator should generate.
             */
            groupId: z.ZodString;
            name: z.ZodString;
            memberCriteria: z.ZodArray<z.ZodObject<{
                /**
                 * generic issuance event id
                 */
                eventId: z.ZodString;
                /**
                 * generic issuance product id
                 */
                productId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventId: string;
                productId?: string | undefined;
            }, {
                eventId: string;
                productId?: string | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }>, "many">>, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined>, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined>;
        enablePODTickets: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    }, {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    }>, {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    }, {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    options: {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    };
    type: PipelineType.Lemonade;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}, {
    options: {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    };
    type: PipelineType.Lemonade;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}>;
/**
 * A {@link LemonadePipelineDefinition} is a pipeline that has finished being
 * set up that configures the generic issuance service to load data on behalf
 * of a particular user from Lemonade and issue tickets for it.
 */
export type LemonadePipelineDefinition = z.infer<typeof LemonadePipelineDefinitionSchema>;
export declare function isLemonadePipelineDefinition(d: PipelineDefinition): d is LemonadePipelineDefinition;
declare const PretixProductConfigSchema: z.ZodObject<{
    /**
     * Pretix's item ID
     */
    externalId: z.ZodString;
    /**
     * Our UUID
     */
    genericIssuanceId: z.ZodString;
    /**
     * Display name
     */
    name: z.ZodString;
    /**
     * Is a user with this product a "superuser"?
     * Superusers are able to check tickets in to events.
     */
    isSuperUser: z.ZodBoolean;
    /**
     * If the attendee's name is collected by a question
     * other than the default attendee name question, this
     * field lets you configure Podbox to prefer to read
     * names from answers to the question with this `question_identifier`
     *
     * see pretix docs here: https://docs.pretix.eu/en/latest/api/resources/orders.html#order-position-resource
     */
    nameQuestionPretixQuestionIdentitifier: z.ZodOptional<z.ZodString>;
    /**
     * Whether the item is considereed an "add-on item" for the purposes of swag
     */
    isAddOnItem: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    externalId: string;
    isSuperUser: boolean;
    genericIssuanceId: string;
    nameQuestionPretixQuestionIdentitifier?: string | undefined;
    isAddOnItem?: boolean | undefined;
}, {
    name: string;
    externalId: string;
    isSuperUser: boolean;
    genericIssuanceId: string;
    nameQuestionPretixQuestionIdentitifier?: string | undefined;
    isAddOnItem?: boolean | undefined;
}>;
/**
 * Configuration for specific products available for the event. Does not need
 * to include all products available in Pretix, but any product listed here
 * must be available in Pretix.
 */
export type PretixProductConfig = z.infer<typeof PretixProductConfigSchema>;
declare const PretixEventConfigSchema: z.ZodObject<{
    /**
     * Pretix's event ID
     */
    externalId: z.ZodString;
    /**
     * Our UUID
     */
    genericIssuanceId: z.ZodString;
    /**
     * Display name for the event
     */
    name: z.ZodString;
    /**
     * Options to configure displaying an image instead of the QR code
     */
    imageOptions: z.ZodOptional<z.ZodObject<{
        imageUrl: z.ZodString;
        requireCheckedIn: z.ZodBoolean;
        qrCodeOverrideImageUrl: z.ZodOptional<z.ZodString>;
        eventStartDate: z.ZodOptional<z.ZodString>;
        eventLocation: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        imageUrl: string;
        requireCheckedIn: boolean;
        qrCodeOverrideImageUrl?: string | undefined;
        eventStartDate?: string | undefined;
        eventLocation?: string | undefined;
    }, {
        imageUrl: string;
        requireCheckedIn: boolean;
        qrCodeOverrideImageUrl?: string | undefined;
        eventStartDate?: string | undefined;
        eventLocation?: string | undefined;
    }>>;
    products: z.ZodArray<z.ZodObject<{
        /**
         * Pretix's item ID
         */
        externalId: z.ZodString;
        /**
         * Our UUID
         */
        genericIssuanceId: z.ZodString;
        /**
         * Display name
         */
        name: z.ZodString;
        /**
         * Is a user with this product a "superuser"?
         * Superusers are able to check tickets in to events.
         */
        isSuperUser: z.ZodBoolean;
        /**
         * If the attendee's name is collected by a question
         * other than the default attendee name question, this
         * field lets you configure Podbox to prefer to read
         * names from answers to the question with this `question_identifier`
         *
         * see pretix docs here: https://docs.pretix.eu/en/latest/api/resources/orders.html#order-position-resource
         */
        nameQuestionPretixQuestionIdentitifier: z.ZodOptional<z.ZodString>;
        /**
         * Whether the item is considereed an "add-on item" for the purposes of swag
         */
        isAddOnItem: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        externalId: string;
        isSuperUser: boolean;
        genericIssuanceId: string;
        nameQuestionPretixQuestionIdentitifier?: string | undefined;
        isAddOnItem?: boolean | undefined;
    }, {
        name: string;
        externalId: string;
        isSuperUser: boolean;
        genericIssuanceId: string;
        nameQuestionPretixQuestionIdentitifier?: string | undefined;
        isAddOnItem?: boolean | undefined;
    }>, "many">;
    /**
     * Skip validation of event settings - use with caution!
     */
    skipSettingsValidation: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    externalId: string;
    genericIssuanceId: string;
    products: {
        name: string;
        externalId: string;
        isSuperUser: boolean;
        genericIssuanceId: string;
        nameQuestionPretixQuestionIdentitifier?: string | undefined;
        isAddOnItem?: boolean | undefined;
    }[];
    imageOptions?: {
        imageUrl: string;
        requireCheckedIn: boolean;
        qrCodeOverrideImageUrl?: string | undefined;
        eventStartDate?: string | undefined;
        eventLocation?: string | undefined;
    } | undefined;
    skipSettingsValidation?: boolean | undefined;
}, {
    name: string;
    externalId: string;
    genericIssuanceId: string;
    products: {
        name: string;
        externalId: string;
        isSuperUser: boolean;
        genericIssuanceId: string;
        nameQuestionPretixQuestionIdentitifier?: string | undefined;
        isAddOnItem?: boolean | undefined;
    }[];
    imageOptions?: {
        imageUrl: string;
        requireCheckedIn: boolean;
        qrCodeOverrideImageUrl?: string | undefined;
        eventStartDate?: string | undefined;
        eventLocation?: string | undefined;
    } | undefined;
    skipSettingsValidation?: boolean | undefined;
}>;
/**
 * Configuration for a specific event, which is managed under the organizer's
 * Pretix account.
 */
export type PretixEventConfig = z.infer<typeof PretixEventConfigSchema>;
export declare const AutoIssuanceOptionsSchema: z.ZodObject<{
    memberCriteria: z.ZodArray<z.ZodObject<{
        /**
         * generic issuance event id
         */
        eventId: z.ZodString;
        /**
         * generic issuance product id
         */
        productId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        eventId: string;
        productId?: string | undefined;
    }, {
        eventId: string;
        productId?: string | undefined;
    }>, "many">;
    eventId: z.ZodString;
    productId: z.ZodString;
    quantity: z.ZodNumber;
    schedule: z.ZodObject<{
        startDate: z.ZodString;
        endDate: z.ZodOptional<z.ZodString>;
        intervalMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        startDate: string;
        intervalMs: number;
        endDate?: string | undefined;
    }, {
        startDate: string;
        intervalMs: number;
        endDate?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    eventId: string;
    productId: string;
    memberCriteria: {
        eventId: string;
        productId?: string | undefined;
    }[];
    quantity: number;
    schedule: {
        startDate: string;
        intervalMs: number;
        endDate?: string | undefined;
    };
}, {
    eventId: string;
    productId: string;
    memberCriteria: {
        eventId: string;
        productId?: string | undefined;
    }[];
    quantity: number;
    schedule: {
        startDate: string;
        intervalMs: number;
        endDate?: string | undefined;
    };
}>;
export type AutoIssuanceOptions = z.infer<typeof AutoIssuanceOptionsSchema>;
export declare const UserPermissionsOptionsSchema: z.ZodObject<{
    members: z.ZodArray<z.ZodObject<{
        /**
         * generic issuance event id
         */
        eventId: z.ZodString;
        /**
         * generic issuance product id
         */
        productId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        eventId: string;
        productId?: string | undefined;
    }, {
        eventId: string;
        productId?: string | undefined;
    }>, "many">;
    canCheckIn: z.ZodObject<{
        eventId: z.ZodString;
        productId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        eventId: string;
        productId?: string | undefined;
    }, {
        eventId: string;
        productId?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    members: {
        eventId: string;
        productId?: string | undefined;
    }[];
    canCheckIn: {
        eventId: string;
        productId?: string | undefined;
    };
}, {
    members: {
        eventId: string;
        productId?: string | undefined;
    }[];
    canCheckIn: {
        eventId: string;
        productId?: string | undefined;
    };
}>;
export type UserPermissionsOptions = z.infer<typeof UserPermissionsOptionsSchema>;
declare const PretixPipelineOptionsSchema: z.ZodEffects<z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    paused: z.ZodOptional<z.ZodBoolean>;
    notes: z.ZodOptional<z.ZodString>;
    alerts: z.ZodOptional<z.ZodObject<{
        pagerduty: z.ZodOptional<z.ZodBoolean>;
        loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
        discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        discordAlerts: z.ZodOptional<z.ZodBoolean>;
        alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
        errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
        warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }>>;
    protected: z.ZodOptional<z.ZodBoolean>;
    important: z.ZodOptional<z.ZodBoolean>;
    disableCache: z.ZodOptional<z.ZodBoolean>;
    pretixAPIKey: z.ZodString;
    pretixOrgUrl: z.ZodString;
    events: z.ZodArray<z.ZodObject<{
        /**
         * Pretix's event ID
         */
        externalId: z.ZodString;
        /**
         * Our UUID
         */
        genericIssuanceId: z.ZodString;
        /**
         * Display name for the event
         */
        name: z.ZodString;
        /**
         * Options to configure displaying an image instead of the QR code
         */
        imageOptions: z.ZodOptional<z.ZodObject<{
            imageUrl: z.ZodString;
            requireCheckedIn: z.ZodBoolean;
            qrCodeOverrideImageUrl: z.ZodOptional<z.ZodString>;
            eventStartDate: z.ZodOptional<z.ZodString>;
            eventLocation: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            imageUrl: string;
            requireCheckedIn: boolean;
            qrCodeOverrideImageUrl?: string | undefined;
            eventStartDate?: string | undefined;
            eventLocation?: string | undefined;
        }, {
            imageUrl: string;
            requireCheckedIn: boolean;
            qrCodeOverrideImageUrl?: string | undefined;
            eventStartDate?: string | undefined;
            eventLocation?: string | undefined;
        }>>;
        products: z.ZodArray<z.ZodObject<{
            /**
             * Pretix's item ID
             */
            externalId: z.ZodString;
            /**
             * Our UUID
             */
            genericIssuanceId: z.ZodString;
            /**
             * Display name
             */
            name: z.ZodString;
            /**
             * Is a user with this product a "superuser"?
             * Superusers are able to check tickets in to events.
             */
            isSuperUser: z.ZodBoolean;
            /**
             * If the attendee's name is collected by a question
             * other than the default attendee name question, this
             * field lets you configure Podbox to prefer to read
             * names from answers to the question with this `question_identifier`
             *
             * see pretix docs here: https://docs.pretix.eu/en/latest/api/resources/orders.html#order-position-resource
             */
            nameQuestionPretixQuestionIdentitifier: z.ZodOptional<z.ZodString>;
            /**
             * Whether the item is considereed an "add-on item" for the purposes of swag
             */
            isAddOnItem: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            externalId: string;
            isSuperUser: boolean;
            genericIssuanceId: string;
            nameQuestionPretixQuestionIdentitifier?: string | undefined;
            isAddOnItem?: boolean | undefined;
        }, {
            name: string;
            externalId: string;
            isSuperUser: boolean;
            genericIssuanceId: string;
            nameQuestionPretixQuestionIdentitifier?: string | undefined;
            isAddOnItem?: boolean | undefined;
        }>, "many">;
        /**
         * Skip validation of event settings - use with caution!
         */
        skipSettingsValidation: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        externalId: string;
        genericIssuanceId: string;
        products: {
            name: string;
            externalId: string;
            isSuperUser: boolean;
            genericIssuanceId: string;
            nameQuestionPretixQuestionIdentitifier?: string | undefined;
            isAddOnItem?: boolean | undefined;
        }[];
        imageOptions?: {
            imageUrl: string;
            requireCheckedIn: boolean;
            qrCodeOverrideImageUrl?: string | undefined;
            eventStartDate?: string | undefined;
            eventLocation?: string | undefined;
        } | undefined;
        skipSettingsValidation?: boolean | undefined;
    }, {
        name: string;
        externalId: string;
        genericIssuanceId: string;
        products: {
            name: string;
            externalId: string;
            isSuperUser: boolean;
            genericIssuanceId: string;
            nameQuestionPretixQuestionIdentitifier?: string | undefined;
            isAddOnItem?: boolean | undefined;
        }[];
        imageOptions?: {
            imageUrl: string;
            requireCheckedIn: boolean;
            qrCodeOverrideImageUrl?: string | undefined;
            eventStartDate?: string | undefined;
            eventLocation?: string | undefined;
        } | undefined;
        skipSettingsValidation?: boolean | undefined;
    }>, "many">;
    feedOptions: z.ZodObject<{
        feedId: z.ZodString;
        feedDisplayName: z.ZodString;
        feedDescription: z.ZodString;
        feedFolder: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    }, {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    }>;
    manualTickets: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
        /**
         * The ID of the ticket.
         */
        id: z.ZodString;
        /**
         * The generic issuance UUID of the event that the ticket is for.
         */
        eventId: z.ZodString;
        /**
         * The generic issuance UUID for the product/ticket type.
         */
        productId: z.ZodString;
        /**
         * The email to assign the ticket to.
         */
        attendeeEmail: z.ZodString;
        /**
         * The full name of the attendee.
         */
        attendeeName: z.ZodString;
        timeCreated: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }, {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }>, "many">>, {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined, {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined>;
    semaphoreGroups: z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
        /**
         * Defines the set of event ID/product ID pairs that qualify a ticket-holder
         * for membership in this group. If no product ID is specified, then all
         * tickets for the event will qualify for group membership.
         *
         * The groupId is a UUID which the administrator should generate.
         */
        groupId: z.ZodString;
        name: z.ZodString;
        memberCriteria: z.ZodArray<z.ZodObject<{
            /**
             * generic issuance event id
             */
            eventId: z.ZodString;
            /**
             * generic issuance product id
             */
            productId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            eventId: string;
            productId?: string | undefined;
        }, {
            eventId: string;
            productId?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }>, "many">>, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined>, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined, {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined>;
    enablePODTickets: z.ZodOptional<z.ZodBoolean>;
    autoIssuance: z.ZodOptional<z.ZodArray<z.ZodObject<{
        memberCriteria: z.ZodArray<z.ZodObject<{
            /**
             * generic issuance event id
             */
            eventId: z.ZodString;
            /**
             * generic issuance product id
             */
            productId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            eventId: string;
            productId?: string | undefined;
        }, {
            eventId: string;
            productId?: string | undefined;
        }>, "many">;
        eventId: z.ZodString;
        productId: z.ZodString;
        quantity: z.ZodNumber;
        schedule: z.ZodObject<{
            startDate: z.ZodString;
            endDate: z.ZodOptional<z.ZodString>;
            intervalMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            startDate: string;
            intervalMs: number;
            endDate?: string | undefined;
        }, {
            startDate: string;
            intervalMs: number;
            endDate?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        eventId: string;
        productId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
        quantity: number;
        schedule: {
            startDate: string;
            intervalMs: number;
            endDate?: string | undefined;
        };
    }, {
        eventId: string;
        productId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
        quantity: number;
        schedule: {
            startDate: string;
            intervalMs: number;
            endDate?: string | undefined;
        };
    }>, "many">>;
    userPermissions: z.ZodOptional<z.ZodArray<z.ZodObject<{
        members: z.ZodArray<z.ZodObject<{
            /**
             * generic issuance event id
             */
            eventId: z.ZodString;
            /**
             * generic issuance product id
             */
            productId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            eventId: string;
            productId?: string | undefined;
        }, {
            eventId: string;
            productId?: string | undefined;
        }>, "many">;
        canCheckIn: z.ZodObject<{
            eventId: z.ZodString;
            productId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            eventId: string;
            productId?: string | undefined;
        }, {
            eventId: string;
            productId?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        members: {
            eventId: string;
            productId?: string | undefined;
        }[];
        canCheckIn: {
            eventId: string;
            productId?: string | undefined;
        };
    }, {
        members: {
            eventId: string;
            productId?: string | undefined;
        }[];
        canCheckIn: {
            eventId: string;
            productId?: string | undefined;
        };
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    events: {
        name: string;
        externalId: string;
        genericIssuanceId: string;
        products: {
            name: string;
            externalId: string;
            isSuperUser: boolean;
            genericIssuanceId: string;
            nameQuestionPretixQuestionIdentitifier?: string | undefined;
            isAddOnItem?: boolean | undefined;
        }[];
        imageOptions?: {
            imageUrl: string;
            requireCheckedIn: boolean;
            qrCodeOverrideImageUrl?: string | undefined;
            eventStartDate?: string | undefined;
            eventLocation?: string | undefined;
        } | undefined;
        skipSettingsValidation?: boolean | undefined;
    }[];
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    pretixAPIKey: string;
    pretixOrgUrl: string;
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    manualTickets?: {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined;
    semaphoreGroups?: {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined;
    enablePODTickets?: boolean | undefined;
    autoIssuance?: {
        eventId: string;
        productId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
        quantity: number;
        schedule: {
            startDate: string;
            intervalMs: number;
            endDate?: string | undefined;
        };
    }[] | undefined;
    userPermissions?: {
        members: {
            eventId: string;
            productId?: string | undefined;
        }[];
        canCheckIn: {
            eventId: string;
            productId?: string | undefined;
        };
    }[] | undefined;
}, {
    events: {
        name: string;
        externalId: string;
        genericIssuanceId: string;
        products: {
            name: string;
            externalId: string;
            isSuperUser: boolean;
            genericIssuanceId: string;
            nameQuestionPretixQuestionIdentitifier?: string | undefined;
            isAddOnItem?: boolean | undefined;
        }[];
        imageOptions?: {
            imageUrl: string;
            requireCheckedIn: boolean;
            qrCodeOverrideImageUrl?: string | undefined;
            eventStartDate?: string | undefined;
            eventLocation?: string | undefined;
        } | undefined;
        skipSettingsValidation?: boolean | undefined;
    }[];
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    pretixAPIKey: string;
    pretixOrgUrl: string;
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    manualTickets?: {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined;
    semaphoreGroups?: {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined;
    enablePODTickets?: boolean | undefined;
    autoIssuance?: {
        eventId: string;
        productId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
        quantity: number;
        schedule: {
            startDate: string;
            intervalMs: number;
            endDate?: string | undefined;
        };
    }[] | undefined;
    userPermissions?: {
        members: {
            eventId: string;
            productId?: string | undefined;
        }[];
        canCheckIn: {
            eventId: string;
            productId?: string | undefined;
        };
    }[] | undefined;
}>, {
    events: {
        name: string;
        externalId: string;
        genericIssuanceId: string;
        products: {
            name: string;
            externalId: string;
            isSuperUser: boolean;
            genericIssuanceId: string;
            nameQuestionPretixQuestionIdentitifier?: string | undefined;
            isAddOnItem?: boolean | undefined;
        }[];
        imageOptions?: {
            imageUrl: string;
            requireCheckedIn: boolean;
            qrCodeOverrideImageUrl?: string | undefined;
            eventStartDate?: string | undefined;
            eventLocation?: string | undefined;
        } | undefined;
        skipSettingsValidation?: boolean | undefined;
    }[];
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    pretixAPIKey: string;
    pretixOrgUrl: string;
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    manualTickets?: {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined;
    semaphoreGroups?: {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined;
    enablePODTickets?: boolean | undefined;
    autoIssuance?: {
        eventId: string;
        productId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
        quantity: number;
        schedule: {
            startDate: string;
            intervalMs: number;
            endDate?: string | undefined;
        };
    }[] | undefined;
    userPermissions?: {
        members: {
            eventId: string;
            productId?: string | undefined;
        }[];
        canCheckIn: {
            eventId: string;
            productId?: string | undefined;
        };
    }[] | undefined;
}, {
    events: {
        name: string;
        externalId: string;
        genericIssuanceId: string;
        products: {
            name: string;
            externalId: string;
            isSuperUser: boolean;
            genericIssuanceId: string;
            nameQuestionPretixQuestionIdentitifier?: string | undefined;
            isAddOnItem?: boolean | undefined;
        }[];
        imageOptions?: {
            imageUrl: string;
            requireCheckedIn: boolean;
            qrCodeOverrideImageUrl?: string | undefined;
            eventStartDate?: string | undefined;
            eventLocation?: string | undefined;
        } | undefined;
        skipSettingsValidation?: boolean | undefined;
    }[];
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    pretixAPIKey: string;
    pretixOrgUrl: string;
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    manualTickets?: {
        id: string;
        eventId: string;
        productId: string;
        attendeeEmail: string;
        attendeeName: string;
        timeCreated?: string | undefined;
    }[] | undefined;
    semaphoreGroups?: {
        name: string;
        groupId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
    }[] | undefined;
    enablePODTickets?: boolean | undefined;
    autoIssuance?: {
        eventId: string;
        productId: string;
        memberCriteria: {
            eventId: string;
            productId?: string | undefined;
        }[];
        quantity: number;
        schedule: {
            startDate: string;
            intervalMs: number;
            endDate?: string | undefined;
        };
    }[] | undefined;
    userPermissions?: {
        members: {
            eventId: string;
            productId?: string | undefined;
        }[];
        canCheckIn: {
            eventId: string;
            productId?: string | undefined;
        };
    }[] | undefined;
}>;
export type PretixPipelineOptions = z.infer<typeof PretixPipelineOptionsSchema>;
declare const PretixPipelineDefinitionSchema: z.ZodObject<{
    id: z.ZodString;
    ownerUserId: z.ZodString;
    editorUserIds: z.ZodArray<z.ZodString, "many">;
    timeCreated: z.ZodString;
    timeUpdated: z.ZodString;
    type: z.ZodLiteral<PipelineType.Pretix>;
    options: z.ZodEffects<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        paused: z.ZodOptional<z.ZodBoolean>;
        notes: z.ZodOptional<z.ZodString>;
        alerts: z.ZodOptional<z.ZodObject<{
            pagerduty: z.ZodOptional<z.ZodBoolean>;
            loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
            discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            discordAlerts: z.ZodOptional<z.ZodBoolean>;
            alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
            errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
            warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }>>;
        protected: z.ZodOptional<z.ZodBoolean>;
        important: z.ZodOptional<z.ZodBoolean>;
        disableCache: z.ZodOptional<z.ZodBoolean>;
        pretixAPIKey: z.ZodString;
        pretixOrgUrl: z.ZodString;
        events: z.ZodArray<z.ZodObject<{
            /**
             * Pretix's event ID
             */
            externalId: z.ZodString;
            /**
             * Our UUID
             */
            genericIssuanceId: z.ZodString;
            /**
             * Display name for the event
             */
            name: z.ZodString;
            /**
             * Options to configure displaying an image instead of the QR code
             */
            imageOptions: z.ZodOptional<z.ZodObject<{
                imageUrl: z.ZodString;
                requireCheckedIn: z.ZodBoolean;
                qrCodeOverrideImageUrl: z.ZodOptional<z.ZodString>;
                eventStartDate: z.ZodOptional<z.ZodString>;
                eventLocation: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            }, {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            }>>;
            products: z.ZodArray<z.ZodObject<{
                /**
                 * Pretix's item ID
                 */
                externalId: z.ZodString;
                /**
                 * Our UUID
                 */
                genericIssuanceId: z.ZodString;
                /**
                 * Display name
                 */
                name: z.ZodString;
                /**
                 * Is a user with this product a "superuser"?
                 * Superusers are able to check tickets in to events.
                 */
                isSuperUser: z.ZodBoolean;
                /**
                 * If the attendee's name is collected by a question
                 * other than the default attendee name question, this
                 * field lets you configure Podbox to prefer to read
                 * names from answers to the question with this `question_identifier`
                 *
                 * see pretix docs here: https://docs.pretix.eu/en/latest/api/resources/orders.html#order-position-resource
                 */
                nameQuestionPretixQuestionIdentitifier: z.ZodOptional<z.ZodString>;
                /**
                 * Whether the item is considereed an "add-on item" for the purposes of swag
                 */
                isAddOnItem: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }, {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }>, "many">;
            /**
             * Skip validation of event settings - use with caution!
             */
            skipSettingsValidation: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }, {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }>, "many">;
        feedOptions: z.ZodObject<{
            feedId: z.ZodString;
            feedDisplayName: z.ZodString;
            feedDescription: z.ZodString;
            feedFolder: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }>;
        manualTickets: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The ID of the ticket.
             */
            id: z.ZodString;
            /**
             * The generic issuance UUID of the event that the ticket is for.
             */
            eventId: z.ZodString;
            /**
             * The generic issuance UUID for the product/ticket type.
             */
            productId: z.ZodString;
            /**
             * The email to assign the ticket to.
             */
            attendeeEmail: z.ZodString;
            /**
             * The full name of the attendee.
             */
            attendeeName: z.ZodString;
            timeCreated: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }>, "many">>, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined>;
        semaphoreGroups: z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * Defines the set of event ID/product ID pairs that qualify a ticket-holder
             * for membership in this group. If no product ID is specified, then all
             * tickets for the event will qualify for group membership.
             *
             * The groupId is a UUID which the administrator should generate.
             */
            groupId: z.ZodString;
            name: z.ZodString;
            memberCriteria: z.ZodArray<z.ZodObject<{
                /**
                 * generic issuance event id
                 */
                eventId: z.ZodString;
                /**
                 * generic issuance product id
                 */
                productId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventId: string;
                productId?: string | undefined;
            }, {
                eventId: string;
                productId?: string | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }>, "many">>, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined>, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined>;
        enablePODTickets: z.ZodOptional<z.ZodBoolean>;
        autoIssuance: z.ZodOptional<z.ZodArray<z.ZodObject<{
            memberCriteria: z.ZodArray<z.ZodObject<{
                /**
                 * generic issuance event id
                 */
                eventId: z.ZodString;
                /**
                 * generic issuance product id
                 */
                productId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventId: string;
                productId?: string | undefined;
            }, {
                eventId: string;
                productId?: string | undefined;
            }>, "many">;
            eventId: z.ZodString;
            productId: z.ZodString;
            quantity: z.ZodNumber;
            schedule: z.ZodObject<{
                startDate: z.ZodString;
                endDate: z.ZodOptional<z.ZodString>;
                intervalMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            }, {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }, {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }>, "many">>;
        userPermissions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            members: z.ZodArray<z.ZodObject<{
                /**
                 * generic issuance event id
                 */
                eventId: z.ZodString;
                /**
                 * generic issuance product id
                 */
                productId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventId: string;
                productId?: string | undefined;
            }, {
                eventId: string;
                productId?: string | undefined;
            }>, "many">;
            canCheckIn: z.ZodObject<{
                eventId: z.ZodString;
                productId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventId: string;
                productId?: string | undefined;
            }, {
                eventId: string;
                productId?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }, {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    }, {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    }>, {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    }, {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    options: {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    };
    type: PipelineType.Pretix;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}, {
    options: {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    };
    type: PipelineType.Pretix;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}>;
/**
 * Similar to {@link LemonadePipelineDefinition} but for Pretix-based Pipelines.
 */
export type PretixPipelineDefinition = z.infer<typeof PretixPipelineDefinitionSchema>;
export declare function isPretixPipelineDefinition(d: PipelineDefinition): d is PretixPipelineDefinition;
export declare enum CSVPipelineOutputType {
    /**
     * {@link EdDSAMessagePCD}
     */
    Message = "EdDSAMessage",
    Ticket = "EdDSATicket",
    PODTicket = "PODTicketPCD"
}
declare const CSVPipelineOptionsSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    paused: z.ZodOptional<z.ZodBoolean>;
    notes: z.ZodOptional<z.ZodString>;
    alerts: z.ZodOptional<z.ZodObject<{
        pagerduty: z.ZodOptional<z.ZodBoolean>;
        loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
        discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        discordAlerts: z.ZodOptional<z.ZodBoolean>;
        alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
        errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
        warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }>>;
    protected: z.ZodOptional<z.ZodBoolean>;
    important: z.ZodOptional<z.ZodBoolean>;
    disableCache: z.ZodOptional<z.ZodBoolean>;
    csv: z.ZodString;
    outputType: z.ZodOptional<z.ZodNativeEnum<typeof CSVPipelineOutputType>>;
    feedOptions: z.ZodObject<{
        feedId: z.ZodString;
        feedDisplayName: z.ZodString;
        feedDescription: z.ZodString;
        feedFolder: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    }, {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    }>;
    issueToUnmatchedEmail: z.ZodOptional<z.ZodBoolean>;
    semaphoreGroupName: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    csv: string;
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    outputType?: CSVPipelineOutputType | undefined;
    issueToUnmatchedEmail?: boolean | undefined;
    semaphoreGroupName?: string | undefined;
}, {
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    csv: string;
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    outputType?: CSVPipelineOutputType | undefined;
    issueToUnmatchedEmail?: boolean | undefined;
    semaphoreGroupName?: string | undefined;
}>;
export type CSVPipelineOptions = z.infer<typeof CSVPipelineOptionsSchema>;
declare const CSVPipelineDefinitionSchema: z.ZodObject<{
    id: z.ZodString;
    ownerUserId: z.ZodString;
    editorUserIds: z.ZodArray<z.ZodString, "many">;
    timeCreated: z.ZodString;
    timeUpdated: z.ZodString;
    type: z.ZodLiteral<PipelineType.CSV>;
    options: z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        paused: z.ZodOptional<z.ZodBoolean>;
        notes: z.ZodOptional<z.ZodString>;
        alerts: z.ZodOptional<z.ZodObject<{
            pagerduty: z.ZodOptional<z.ZodBoolean>;
            loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
            discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            discordAlerts: z.ZodOptional<z.ZodBoolean>;
            alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
            errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
            warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }>>;
        protected: z.ZodOptional<z.ZodBoolean>;
        important: z.ZodOptional<z.ZodBoolean>;
        disableCache: z.ZodOptional<z.ZodBoolean>;
        csv: z.ZodString;
        outputType: z.ZodOptional<z.ZodNativeEnum<typeof CSVPipelineOutputType>>;
        feedOptions: z.ZodObject<{
            feedId: z.ZodString;
            feedDisplayName: z.ZodString;
            feedDescription: z.ZodString;
            feedFolder: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }>;
        issueToUnmatchedEmail: z.ZodOptional<z.ZodBoolean>;
        semaphoreGroupName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        outputType?: CSVPipelineOutputType | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    }, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        outputType?: CSVPipelineOutputType | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    options: {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        outputType?: CSVPipelineOutputType | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    };
    type: PipelineType.CSV;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}, {
    options: {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        outputType?: CSVPipelineOutputType | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    };
    type: PipelineType.CSV;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}>;
/**
 * Similar to {@link LemonadePipelineDefinition} but for CSV-based Pipelines.
 */
export type CSVPipelineDefinition = z.infer<typeof CSVPipelineDefinitionSchema>;
export declare function isCSVPipelineDefinition(d: PipelineDefinition): d is CSVPipelineDefinition;
/**
 * POD Pipeline.
 */
export declare enum PODPipelineInputType {
    CSV = "CSV"
}
export declare enum PODPipelineInputFieldType {
    String = "string",
    Int = "int",
    Date = "date",
    Boolean = "boolean",
    UUID = "uuid",
    Cryptographic = "cryptographic",
    EdDSAPubKey = "eddsa_pubkey"
}
declare const PODPipelineInputFieldSchema: z.ZodObject<{
    type: z.ZodNativeEnum<typeof PODPipelineInputFieldType>;
}, "strip", z.ZodTypeAny, {
    type: PODPipelineInputFieldType;
}, {
    type: PODPipelineInputFieldType;
}>;
declare const PODPipelineInputColumnsSchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    type: z.ZodNativeEnum<typeof PODPipelineInputFieldType>;
}, "strip", z.ZodTypeAny, {
    type: PODPipelineInputFieldType;
}, {
    type: PODPipelineInputFieldType;
}>>;
export type PODPipelineInputColumns = z.infer<typeof PODPipelineInputColumnsSchema>;
declare const PODPipelineBaseInputSchema: z.ZodObject<{
    type: z.ZodNativeEnum<typeof PODPipelineInputType>;
    columns: z.ZodRecord<z.ZodString, z.ZodObject<{
        type: z.ZodNativeEnum<typeof PODPipelineInputFieldType>;
    }, "strip", z.ZodTypeAny, {
        type: PODPipelineInputFieldType;
    }, {
        type: PODPipelineInputFieldType;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: PODPipelineInputType;
    columns: Record<string, {
        type: PODPipelineInputFieldType;
    }>;
}, {
    type: PODPipelineInputType;
    columns: Record<string, {
        type: PODPipelineInputFieldType;
    }>;
}>;
export type PODPipelineBaseInput = z.infer<typeof PODPipelineBaseInputSchema>;
export type PODPipelineInputField = z.infer<typeof PODPipelineInputFieldSchema>;
declare const PODPipelineCSVInputSchema: z.ZodObject<{
    columns: z.ZodRecord<z.ZodString, z.ZodObject<{
        type: z.ZodNativeEnum<typeof PODPipelineInputFieldType>;
    }, "strip", z.ZodTypeAny, {
        type: PODPipelineInputFieldType;
    }, {
        type: PODPipelineInputFieldType;
    }>>;
    type: z.ZodLiteral<PODPipelineInputType>;
    csv: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: PODPipelineInputType;
    csv: string;
    columns: Record<string, {
        type: PODPipelineInputFieldType;
    }>;
}, {
    type: PODPipelineInputType;
    csv: string;
    columns: Record<string, {
        type: PODPipelineInputFieldType;
    }>;
}>;
export type PODPipelineCSVInput = z.infer<typeof PODPipelineCSVInputSchema>;
declare const PODPipelineInputSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    columns: z.ZodRecord<z.ZodString, z.ZodObject<{
        type: z.ZodNativeEnum<typeof PODPipelineInputFieldType>;
    }, "strip", z.ZodTypeAny, {
        type: PODPipelineInputFieldType;
    }, {
        type: PODPipelineInputFieldType;
    }>>;
    type: z.ZodLiteral<PODPipelineInputType>;
    csv: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: PODPipelineInputType;
    csv: string;
    columns: Record<string, {
        type: PODPipelineInputFieldType;
    }>;
}, {
    type: PODPipelineInputType;
    csv: string;
    columns: Record<string, {
        type: PODPipelineInputFieldType;
    }>;
}>]>;
export type PODPipelineInput = z.infer<typeof PODPipelineInputSchema>;
export declare enum PODPipelinePCDTypes {
    PODPCD = "PODPCD",
    PODTicketPCD = "PODTicketPCD"
}
declare const PODPipelineSupportedPODValueTypes: z.ZodEnum<["string", "int", "cryptographic", "eddsa_pubkey"]>;
export type PODPipelineSupportedPODValueTypes = z.infer<typeof PODPipelineSupportedPODValueTypes>;
declare const PODPipelinePODEntrySchema: z.ZodObject<{
    type: z.ZodEnum<["string", "int", "cryptographic", "eddsa_pubkey"]>;
    source: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"input">;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "input";
        name: string;
    }, {
        type: "input";
        name: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"credentialSemaphoreID">;
    }, "strip", z.ZodTypeAny, {
        type: "credentialSemaphoreID";
    }, {
        type: "credentialSemaphoreID";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"credentialEmail">;
    }, "strip", z.ZodTypeAny, {
        type: "credentialEmail";
    }, {
        type: "credentialEmail";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"configured">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "configured";
        value: string;
    }, {
        type: "configured";
        value: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
    source: {
        type: "input";
        name: string;
    } | {
        type: "credentialSemaphoreID";
    } | {
        type: "credentialEmail";
    } | {
        type: "configured";
        value: string;
    };
}, {
    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
    source: {
        type: "input";
        name: string;
    } | {
        type: "credentialSemaphoreID";
    } | {
        type: "credentialEmail";
    } | {
        type: "configured";
        value: string;
    };
}>;
export type PODPipelinePODEntry = z.infer<typeof PODPipelinePODEntrySchema>;
declare const PODPipelinePODEntriesSchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    type: z.ZodEnum<["string", "int", "cryptographic", "eddsa_pubkey"]>;
    source: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"input">;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "input";
        name: string;
    }, {
        type: "input";
        name: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"credentialSemaphoreID">;
    }, "strip", z.ZodTypeAny, {
        type: "credentialSemaphoreID";
    }, {
        type: "credentialSemaphoreID";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"credentialEmail">;
    }, "strip", z.ZodTypeAny, {
        type: "credentialEmail";
    }, {
        type: "credentialEmail";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"configured">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "configured";
        value: string;
    }, {
        type: "configured";
        value: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
    source: {
        type: "input";
        name: string;
    } | {
        type: "credentialSemaphoreID";
    } | {
        type: "credentialEmail";
    } | {
        type: "configured";
        value: string;
    };
}, {
    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
    source: {
        type: "input";
        name: string;
    } | {
        type: "credentialSemaphoreID";
    } | {
        type: "credentialEmail";
    } | {
        type: "configured";
        value: string;
    };
}>>;
export type PODPipelinePODEntries = z.infer<typeof PODPipelinePODEntriesSchema>;
export declare const PODPipelineOutputMatchSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"semaphoreID">;
    entry: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "semaphoreID";
    entry: string;
}, {
    type: "semaphoreID";
    entry: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"email">;
    entry: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "email";
    entry: string;
}, {
    type: "email";
    entry: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"none">;
}, "strip", z.ZodTypeAny, {
    type: "none";
}, {
    type: "none";
}>]>;
export type PODPipelineOutputMatch = z.infer<typeof PODPipelineOutputMatchSchema>;
declare const PODPipelineOutputSchema: z.ZodObject<{
    pcdType: z.ZodNativeEnum<typeof PODPipelinePCDTypes>;
    /**
     * @todo verify that all input-derived entries have matching columns and
     * possibly that column types match entry types
     */
    entries: z.ZodRecord<z.ZodString, z.ZodObject<{
        type: z.ZodEnum<["string", "int", "cryptographic", "eddsa_pubkey"]>;
        source: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"input">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "input";
            name: string;
        }, {
            type: "input";
            name: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"credentialSemaphoreID">;
        }, "strip", z.ZodTypeAny, {
            type: "credentialSemaphoreID";
        }, {
            type: "credentialSemaphoreID";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"credentialEmail">;
        }, "strip", z.ZodTypeAny, {
            type: "credentialEmail";
        }, {
            type: "credentialEmail";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"configured">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "configured";
            value: string;
        }, {
            type: "configured";
            value: string;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
        source: {
            type: "input";
            name: string;
        } | {
            type: "credentialSemaphoreID";
        } | {
            type: "credentialEmail";
        } | {
            type: "configured";
            value: string;
        };
    }, {
        type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
        source: {
            type: "input";
            name: string;
        } | {
            type: "credentialSemaphoreID";
        } | {
            type: "credentialEmail";
        } | {
            type: "configured";
            value: string;
        };
    }>>;
    match: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"semaphoreID">;
        entry: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "semaphoreID";
        entry: string;
    }, {
        type: "semaphoreID";
        entry: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"email">;
        entry: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "email";
        entry: string;
    }, {
        type: "email";
        entry: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"none">;
    }, "strip", z.ZodTypeAny, {
        type: "none";
    }, {
        type: "none";
    }>]>;
}, "strip", z.ZodTypeAny, {
    entries: Record<string, {
        type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
        source: {
            type: "input";
            name: string;
        } | {
            type: "credentialSemaphoreID";
        } | {
            type: "credentialEmail";
        } | {
            type: "configured";
            value: string;
        };
    }>;
    pcdType: PODPipelinePCDTypes;
    match: {
        type: "semaphoreID";
        entry: string;
    } | {
        type: "email";
        entry: string;
    } | {
        type: "none";
    };
}, {
    entries: Record<string, {
        type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
        source: {
            type: "input";
            name: string;
        } | {
            type: "credentialSemaphoreID";
        } | {
            type: "credentialEmail";
        } | {
            type: "configured";
            value: string;
        };
    }>;
    pcdType: PODPipelinePCDTypes;
    match: {
        type: "semaphoreID";
        entry: string;
    } | {
        type: "email";
        entry: string;
    } | {
        type: "none";
    };
}>;
export type PODPipelineOutput = z.infer<typeof PODPipelineOutputSchema>;
export declare function validatePODPipelineOptions(options: PODPipelineOptions): void;
declare const PODPipelineFeedOptionsSchema: z.ZodObject<{
    feedId: z.ZodString;
    feedDisplayName: z.ZodString;
    feedDescription: z.ZodString;
    feedFolder: z.ZodString;
    feedType: z.ZodEnum<["deleteAndReplace", "replace"]>;
}, "strip", z.ZodTypeAny, {
    feedId: string;
    feedDisplayName: string;
    feedDescription: string;
    feedFolder: string;
    feedType: "replace" | "deleteAndReplace";
}, {
    feedId: string;
    feedDisplayName: string;
    feedDescription: string;
    feedFolder: string;
    feedType: "replace" | "deleteAndReplace";
}>;
export type PODPipelineFeedOptions = z.infer<typeof PODPipelineFeedOptionsSchema>;
declare const PODPipelineOptionsSchema: z.ZodEffects<z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    paused: z.ZodOptional<z.ZodBoolean>;
    notes: z.ZodOptional<z.ZodString>;
    alerts: z.ZodOptional<z.ZodObject<{
        pagerduty: z.ZodOptional<z.ZodBoolean>;
        loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
        discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        discordAlerts: z.ZodOptional<z.ZodBoolean>;
        alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
        errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
        warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }>>;
    protected: z.ZodOptional<z.ZodBoolean>;
    important: z.ZodOptional<z.ZodBoolean>;
    disableCache: z.ZodOptional<z.ZodBoolean>;
    input: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        columns: z.ZodRecord<z.ZodString, z.ZodObject<{
            type: z.ZodNativeEnum<typeof PODPipelineInputFieldType>;
        }, "strip", z.ZodTypeAny, {
            type: PODPipelineInputFieldType;
        }, {
            type: PODPipelineInputFieldType;
        }>>;
        type: z.ZodLiteral<PODPipelineInputType>;
        csv: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: PODPipelineInputType;
        csv: string;
        columns: Record<string, {
            type: PODPipelineInputFieldType;
        }>;
    }, {
        type: PODPipelineInputType;
        csv: string;
        columns: Record<string, {
            type: PODPipelineInputFieldType;
        }>;
    }>]>;
    outputs: z.ZodRecord<z.ZodString, z.ZodObject<{
        pcdType: z.ZodNativeEnum<typeof PODPipelinePCDTypes>;
        /**
         * @todo verify that all input-derived entries have matching columns and
         * possibly that column types match entry types
         */
        entries: z.ZodRecord<z.ZodString, z.ZodObject<{
            type: z.ZodEnum<["string", "int", "cryptographic", "eddsa_pubkey"]>;
            source: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"input">;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "input";
                name: string;
            }, {
                type: "input";
                name: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"credentialSemaphoreID">;
            }, "strip", z.ZodTypeAny, {
                type: "credentialSemaphoreID";
            }, {
                type: "credentialSemaphoreID";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"credentialEmail">;
            }, "strip", z.ZodTypeAny, {
                type: "credentialEmail";
            }, {
                type: "credentialEmail";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"configured">;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "configured";
                value: string;
            }, {
                type: "configured";
                value: string;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
            source: {
                type: "input";
                name: string;
            } | {
                type: "credentialSemaphoreID";
            } | {
                type: "credentialEmail";
            } | {
                type: "configured";
                value: string;
            };
        }, {
            type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
            source: {
                type: "input";
                name: string;
            } | {
                type: "credentialSemaphoreID";
            } | {
                type: "credentialEmail";
            } | {
                type: "configured";
                value: string;
            };
        }>>;
        match: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"semaphoreID">;
            entry: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "semaphoreID";
            entry: string;
        }, {
            type: "semaphoreID";
            entry: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"email">;
            entry: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "email";
            entry: string;
        }, {
            type: "email";
            entry: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"none">;
        }, "strip", z.ZodTypeAny, {
            type: "none";
        }, {
            type: "none";
        }>]>;
    }, "strip", z.ZodTypeAny, {
        entries: Record<string, {
            type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
            source: {
                type: "input";
                name: string;
            } | {
                type: "credentialSemaphoreID";
            } | {
                type: "credentialEmail";
            } | {
                type: "configured";
                value: string;
            };
        }>;
        pcdType: PODPipelinePCDTypes;
        match: {
            type: "semaphoreID";
            entry: string;
        } | {
            type: "email";
            entry: string;
        } | {
            type: "none";
        };
    }, {
        entries: Record<string, {
            type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
            source: {
                type: "input";
                name: string;
            } | {
                type: "credentialSemaphoreID";
            } | {
                type: "credentialEmail";
            } | {
                type: "configured";
                value: string;
            };
        }>;
        pcdType: PODPipelinePCDTypes;
        match: {
            type: "semaphoreID";
            entry: string;
        } | {
            type: "email";
            entry: string;
        } | {
            type: "none";
        };
    }>>;
    feedOptions: z.ZodObject<{
        feedId: z.ZodString;
        feedDisplayName: z.ZodString;
        feedDescription: z.ZodString;
        feedFolder: z.ZodString;
        feedType: z.ZodEnum<["deleteAndReplace", "replace"]>;
    }, "strip", z.ZodTypeAny, {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
        feedType: "replace" | "deleteAndReplace";
    }, {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
        feedType: "replace" | "deleteAndReplace";
    }>;
}, "strip", z.ZodTypeAny, {
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
        feedType: "replace" | "deleteAndReplace";
    };
    input: {
        type: PODPipelineInputType;
        csv: string;
        columns: Record<string, {
            type: PODPipelineInputFieldType;
        }>;
    };
    outputs: Record<string, {
        entries: Record<string, {
            type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
            source: {
                type: "input";
                name: string;
            } | {
                type: "credentialSemaphoreID";
            } | {
                type: "credentialEmail";
            } | {
                type: "configured";
                value: string;
            };
        }>;
        pcdType: PODPipelinePCDTypes;
        match: {
            type: "semaphoreID";
            entry: string;
        } | {
            type: "email";
            entry: string;
        } | {
            type: "none";
        };
    }>;
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
}, {
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
        feedType: "replace" | "deleteAndReplace";
    };
    input: {
        type: PODPipelineInputType;
        csv: string;
        columns: Record<string, {
            type: PODPipelineInputFieldType;
        }>;
    };
    outputs: Record<string, {
        entries: Record<string, {
            type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
            source: {
                type: "input";
                name: string;
            } | {
                type: "credentialSemaphoreID";
            } | {
                type: "credentialEmail";
            } | {
                type: "configured";
                value: string;
            };
        }>;
        pcdType: PODPipelinePCDTypes;
        match: {
            type: "semaphoreID";
            entry: string;
        } | {
            type: "email";
            entry: string;
        } | {
            type: "none";
        };
    }>;
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
}>, {
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
        feedType: "replace" | "deleteAndReplace";
    };
    input: {
        type: PODPipelineInputType;
        csv: string;
        columns: Record<string, {
            type: PODPipelineInputFieldType;
        }>;
    };
    outputs: Record<string, {
        entries: Record<string, {
            type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
            source: {
                type: "input";
                name: string;
            } | {
                type: "credentialSemaphoreID";
            } | {
                type: "credentialEmail";
            } | {
                type: "configured";
                value: string;
            };
        }>;
        pcdType: PODPipelinePCDTypes;
        match: {
            type: "semaphoreID";
            entry: string;
        } | {
            type: "email";
            entry: string;
        } | {
            type: "none";
        };
    }>;
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
}, {
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
        feedType: "replace" | "deleteAndReplace";
    };
    input: {
        type: PODPipelineInputType;
        csv: string;
        columns: Record<string, {
            type: PODPipelineInputFieldType;
        }>;
    };
    outputs: Record<string, {
        entries: Record<string, {
            type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
            source: {
                type: "input";
                name: string;
            } | {
                type: "credentialSemaphoreID";
            } | {
                type: "credentialEmail";
            } | {
                type: "configured";
                value: string;
            };
        }>;
        pcdType: PODPipelinePCDTypes;
        match: {
            type: "semaphoreID";
            entry: string;
        } | {
            type: "email";
            entry: string;
        } | {
            type: "none";
        };
    }>;
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
}>;
export declare const PODPipelineDefinitionSchema: z.ZodObject<{
    id: z.ZodString;
    ownerUserId: z.ZodString;
    editorUserIds: z.ZodArray<z.ZodString, "many">;
    timeCreated: z.ZodString;
    timeUpdated: z.ZodString;
    type: z.ZodLiteral<PipelineType.POD>;
    options: z.ZodEffects<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        paused: z.ZodOptional<z.ZodBoolean>;
        notes: z.ZodOptional<z.ZodString>;
        alerts: z.ZodOptional<z.ZodObject<{
            pagerduty: z.ZodOptional<z.ZodBoolean>;
            loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
            discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            discordAlerts: z.ZodOptional<z.ZodBoolean>;
            alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
            errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
            warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }>>;
        protected: z.ZodOptional<z.ZodBoolean>;
        important: z.ZodOptional<z.ZodBoolean>;
        disableCache: z.ZodOptional<z.ZodBoolean>;
        input: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            columns: z.ZodRecord<z.ZodString, z.ZodObject<{
                type: z.ZodNativeEnum<typeof PODPipelineInputFieldType>;
            }, "strip", z.ZodTypeAny, {
                type: PODPipelineInputFieldType;
            }, {
                type: PODPipelineInputFieldType;
            }>>;
            type: z.ZodLiteral<PODPipelineInputType>;
            csv: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        }, {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        }>]>;
        outputs: z.ZodRecord<z.ZodString, z.ZodObject<{
            pcdType: z.ZodNativeEnum<typeof PODPipelinePCDTypes>;
            /**
             * @todo verify that all input-derived entries have matching columns and
             * possibly that column types match entry types
             */
            entries: z.ZodRecord<z.ZodString, z.ZodObject<{
                type: z.ZodEnum<["string", "int", "cryptographic", "eddsa_pubkey"]>;
                source: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"input">;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "input";
                    name: string;
                }, {
                    type: "input";
                    name: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"credentialSemaphoreID">;
                }, "strip", z.ZodTypeAny, {
                    type: "credentialSemaphoreID";
                }, {
                    type: "credentialSemaphoreID";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"credentialEmail">;
                }, "strip", z.ZodTypeAny, {
                    type: "credentialEmail";
                }, {
                    type: "credentialEmail";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"configured">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "configured";
                    value: string;
                }, {
                    type: "configured";
                    value: string;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>>;
            match: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"semaphoreID">;
                entry: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "semaphoreID";
                entry: string;
            }, {
                type: "semaphoreID";
                entry: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"email">;
                entry: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "email";
                entry: string;
            }, {
                type: "email";
                entry: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"none">;
            }, "strip", z.ZodTypeAny, {
                type: "none";
            }, {
                type: "none";
            }>]>;
        }, "strip", z.ZodTypeAny, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>>;
        feedOptions: z.ZodObject<{
            feedId: z.ZodString;
            feedDisplayName: z.ZodString;
            feedDescription: z.ZodString;
            feedFolder: z.ZodString;
            feedType: z.ZodEnum<["deleteAndReplace", "replace"]>;
        }, "strip", z.ZodTypeAny, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        }, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        }>;
    }, "strip", z.ZodTypeAny, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    }, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    }>, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    }, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    options: {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    };
    type: PipelineType.POD;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}, {
    options: {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    };
    type: PipelineType.POD;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}>;
export type PODPipelineOptions = z.infer<typeof PODPipelineOptionsSchema>;
export type PODPipelineDefinition = z.infer<typeof PODPipelineDefinitionSchema>;
export declare function isPODPipelineDefinition(d: PipelineDefinition): d is PODPipelineDefinition;
/**
 * CSVTicket Pipeline.
 */
declare const CSVTicketPipelineOptionsSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    paused: z.ZodOptional<z.ZodBoolean>;
    notes: z.ZodOptional<z.ZodString>;
    alerts: z.ZodOptional<z.ZodObject<{
        pagerduty: z.ZodOptional<z.ZodBoolean>;
        loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
        discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        discordAlerts: z.ZodOptional<z.ZodBoolean>;
        alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
        errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
        warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }, {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    }>>;
    protected: z.ZodOptional<z.ZodBoolean>;
    important: z.ZodOptional<z.ZodBoolean>;
    disableCache: z.ZodOptional<z.ZodBoolean>;
    eventName: z.ZodString;
    csv: z.ZodString;
    feedOptions: z.ZodObject<{
        feedId: z.ZodString;
        feedDisplayName: z.ZodString;
        feedDescription: z.ZodString;
        feedFolder: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    }, {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    }>;
    pcdTypes: z.ZodArray<z.ZodEnum<["EdDSATicketPCD", "PODTicketPCD"]>, "many">;
    issueToUnmatchedEmail: z.ZodOptional<z.ZodBoolean>;
    semaphoreGroupName: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    eventName: string;
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    csv: string;
    pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    issueToUnmatchedEmail?: boolean | undefined;
    semaphoreGroupName?: string | undefined;
}, {
    eventName: string;
    feedOptions: {
        feedId: string;
        feedDisplayName: string;
        feedDescription: string;
        feedFolder: string;
    };
    csv: string;
    pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
    name?: string | undefined;
    paused?: boolean | undefined;
    notes?: string | undefined;
    alerts?: {
        pagerduty?: boolean | undefined;
        loadIncidentPagePolicy?: IncidentPolicy | undefined;
        discordTags?: string[] | undefined;
        discordAlerts?: boolean | undefined;
        alertOnLogErrors?: boolean | undefined;
        errorLogIgnoreRegexes?: string[] | undefined;
        alertOnLogWarnings?: boolean | undefined;
        warningLogIgnoreRegexes?: string[] | undefined;
        alertOnAtomMismatch?: boolean | undefined;
    } | undefined;
    protected?: boolean | undefined;
    important?: boolean | undefined;
    disableCache?: boolean | undefined;
    issueToUnmatchedEmail?: boolean | undefined;
    semaphoreGroupName?: string | undefined;
}>;
export type CSVTicketPipelineOptions = z.infer<typeof CSVTicketPipelineOptionsSchema>;
declare const CSVTicketPipelineDefinitionSchema: z.ZodObject<{
    id: z.ZodString;
    ownerUserId: z.ZodString;
    editorUserIds: z.ZodArray<z.ZodString, "many">;
    timeCreated: z.ZodString;
    timeUpdated: z.ZodString;
    type: z.ZodLiteral<PipelineType.CSVTicket>;
    options: z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        paused: z.ZodOptional<z.ZodBoolean>;
        notes: z.ZodOptional<z.ZodString>;
        alerts: z.ZodOptional<z.ZodObject<{
            pagerduty: z.ZodOptional<z.ZodBoolean>;
            loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
            discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            discordAlerts: z.ZodOptional<z.ZodBoolean>;
            alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
            errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
            warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }>>;
        protected: z.ZodOptional<z.ZodBoolean>;
        important: z.ZodOptional<z.ZodBoolean>;
        disableCache: z.ZodOptional<z.ZodBoolean>;
        eventName: z.ZodString;
        csv: z.ZodString;
        feedOptions: z.ZodObject<{
            feedId: z.ZodString;
            feedDisplayName: z.ZodString;
            feedDescription: z.ZodString;
            feedFolder: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }>;
        pcdTypes: z.ZodArray<z.ZodEnum<["EdDSATicketPCD", "PODTicketPCD"]>, "many">;
        issueToUnmatchedEmail: z.ZodOptional<z.ZodBoolean>;
        semaphoreGroupName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        eventName: string;
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    }, {
        eventName: string;
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    options: {
        eventName: string;
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    };
    type: PipelineType.CSVTicket;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}, {
    options: {
        eventName: string;
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    };
    type: PipelineType.CSVTicket;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}>;
export type CSVTicketPipelineDefinition = z.infer<typeof CSVTicketPipelineDefinitionSchema>;
export declare function isCSVTicketPipelineDefinition(d: PipelineDefinition): d is CSVTicketPipelineDefinition;
/**
 * This item is exported so that we can use it for validation on generic issuance server.
 */
export declare const PipelineDefinitionSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    id: z.ZodString;
    ownerUserId: z.ZodString;
    editorUserIds: z.ZodArray<z.ZodString, "many">;
    timeCreated: z.ZodString;
    timeUpdated: z.ZodString;
    type: z.ZodLiteral<PipelineType.Lemonade>;
    options: z.ZodEffects<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        paused: z.ZodOptional<z.ZodBoolean>;
        notes: z.ZodOptional<z.ZodString>;
        alerts: z.ZodOptional<z.ZodObject<{
            pagerduty: z.ZodOptional<z.ZodBoolean>;
            loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
            discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            discordAlerts: z.ZodOptional<z.ZodBoolean>;
            alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
            errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
            warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }>>;
        protected: z.ZodOptional<z.ZodBoolean>;
        important: z.ZodOptional<z.ZodBoolean>;
        disableCache: z.ZodOptional<z.ZodBoolean>;
        oauthAudience: z.ZodString;
        oauthClientId: z.ZodString;
        oauthClientSecret: z.ZodString;
        oauthServerUrl: z.ZodString;
        backendUrl: z.ZodString;
        events: z.ZodArray<z.ZodObject<{
            /**
             * The ID of this event on the Lemonade end.
             */
            externalId: z.ZodString;
            /**
             * Display name.
             */
            name: z.ZodString;
            /**
             * The UUID of this event used for {@link EdDSATicketPCD}.
             */
            genericIssuanceEventId: z.ZodString;
            /**
             * Roughly translates to Products in {@link EdDSATicketPCD}.
             */
            ticketTypes: z.ZodArray<z.ZodObject<{
                /**
                 * The ID of this ticket type on the Lemonade end.
                 */
                externalId: z.ZodString;
                /**
                 * The UUID of this ticket type used in {@link EdDSATicketPCD}.
                 */
                genericIssuanceProductId: z.ZodString;
                /**
                 * Whether this ticket type is allowed to check other tickets in or not.
                 */
                isSuperUser: z.ZodBoolean;
                /**
                 * Display name
                 */
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }, {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }, {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }>, "many">;
        superuserEmails: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        feedOptions: z.ZodObject<{
            feedId: z.ZodString;
            feedDisplayName: z.ZodString;
            feedDescription: z.ZodString;
            feedFolder: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }>;
        manualTickets: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The ID of the ticket.
             */
            id: z.ZodString;
            /**
             * The generic issuance UUID of the event that the ticket is for.
             */
            eventId: z.ZodString;
            /**
             * The generic issuance UUID for the product/ticket type.
             */
            productId: z.ZodString;
            /**
             * The email to assign the ticket to.
             */
            attendeeEmail: z.ZodString;
            /**
             * The full name of the attendee.
             */
            attendeeName: z.ZodString;
            timeCreated: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }>, "many">>, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined>;
        ticketActions: z.ZodOptional<z.ZodObject<{
            badges: z.ZodOptional<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodBoolean>;
                choices: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    eventName: z.ZodString;
                    productName: z.ZodOptional<z.ZodString>;
                    imageUrl: z.ZodString;
                    givers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    grantOnCheckin: z.ZodOptional<z.ZodBoolean>;
                    maxPerDay: z.ZodOptional<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }, {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            }, {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            }>>;
            contacts: z.ZodOptional<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                enabled?: boolean | undefined;
            }, {
                enabled?: boolean | undefined;
            }>>;
            screenConfig: z.ZodOptional<z.ZodObject<{
                eventBannerUrl: z.ZodOptional<z.ZodString>;
                eventNameConfig: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            }, {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        }, {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        }>>;
        semaphoreGroups: z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * Defines the set of event ID/product ID pairs that qualify a ticket-holder
             * for membership in this group. If no product ID is specified, then all
             * tickets for the event will qualify for group membership.
             *
             * The groupId is a UUID which the administrator should generate.
             */
            groupId: z.ZodString;
            name: z.ZodString;
            memberCriteria: z.ZodArray<z.ZodObject<{
                /**
                 * generic issuance event id
                 */
                eventId: z.ZodString;
                /**
                 * generic issuance product id
                 */
                productId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventId: string;
                productId?: string | undefined;
            }, {
                eventId: string;
                productId?: string | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }>, "many">>, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined>, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined>;
        enablePODTickets: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    }, {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    }>, {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    }, {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    options: {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    };
    type: PipelineType.Lemonade;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}, {
    options: {
        oauthAudience: string;
        oauthClientId: string;
        oauthClientSecret: string;
        oauthServerUrl: string;
        backendUrl: string;
        events: {
            name: string;
            externalId: string;
            genericIssuanceEventId: string;
            ticketTypes: {
                name: string;
                externalId: string;
                genericIssuanceProductId: string;
                isSuperUser: boolean;
            }[];
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        superuserEmails?: string[] | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        ticketActions?: {
            badges?: {
                enabled?: boolean | undefined;
                choices?: {
                    id: string;
                    eventName: string;
                    imageUrl: string;
                    productName?: string | undefined;
                    givers?: string[] | undefined;
                    grantOnCheckin?: boolean | undefined;
                    maxPerDay?: number | undefined;
                }[] | undefined;
            } | undefined;
            contacts?: {
                enabled?: boolean | undefined;
            } | undefined;
            screenConfig?: {
                eventBannerUrl?: string | undefined;
                eventNameConfig?: string | undefined;
            } | undefined;
        } | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
    };
    type: PipelineType.Lemonade;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}>, z.ZodObject<{
    id: z.ZodString;
    ownerUserId: z.ZodString;
    editorUserIds: z.ZodArray<z.ZodString, "many">;
    timeCreated: z.ZodString;
    timeUpdated: z.ZodString;
    type: z.ZodLiteral<PipelineType.Pretix>;
    options: z.ZodEffects<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        paused: z.ZodOptional<z.ZodBoolean>;
        notes: z.ZodOptional<z.ZodString>;
        alerts: z.ZodOptional<z.ZodObject<{
            pagerduty: z.ZodOptional<z.ZodBoolean>;
            loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
            discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            discordAlerts: z.ZodOptional<z.ZodBoolean>;
            alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
            errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
            warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }>>;
        protected: z.ZodOptional<z.ZodBoolean>;
        important: z.ZodOptional<z.ZodBoolean>;
        disableCache: z.ZodOptional<z.ZodBoolean>;
        pretixAPIKey: z.ZodString;
        pretixOrgUrl: z.ZodString;
        events: z.ZodArray<z.ZodObject<{
            /**
             * Pretix's event ID
             */
            externalId: z.ZodString;
            /**
             * Our UUID
             */
            genericIssuanceId: z.ZodString;
            /**
             * Display name for the event
             */
            name: z.ZodString;
            /**
             * Options to configure displaying an image instead of the QR code
             */
            imageOptions: z.ZodOptional<z.ZodObject<{
                imageUrl: z.ZodString;
                requireCheckedIn: z.ZodBoolean;
                qrCodeOverrideImageUrl: z.ZodOptional<z.ZodString>;
                eventStartDate: z.ZodOptional<z.ZodString>;
                eventLocation: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            }, {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            }>>;
            products: z.ZodArray<z.ZodObject<{
                /**
                 * Pretix's item ID
                 */
                externalId: z.ZodString;
                /**
                 * Our UUID
                 */
                genericIssuanceId: z.ZodString;
                /**
                 * Display name
                 */
                name: z.ZodString;
                /**
                 * Is a user with this product a "superuser"?
                 * Superusers are able to check tickets in to events.
                 */
                isSuperUser: z.ZodBoolean;
                /**
                 * If the attendee's name is collected by a question
                 * other than the default attendee name question, this
                 * field lets you configure Podbox to prefer to read
                 * names from answers to the question with this `question_identifier`
                 *
                 * see pretix docs here: https://docs.pretix.eu/en/latest/api/resources/orders.html#order-position-resource
                 */
                nameQuestionPretixQuestionIdentitifier: z.ZodOptional<z.ZodString>;
                /**
                 * Whether the item is considereed an "add-on item" for the purposes of swag
                 */
                isAddOnItem: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }, {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }>, "many">;
            /**
             * Skip validation of event settings - use with caution!
             */
            skipSettingsValidation: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }, {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }>, "many">;
        feedOptions: z.ZodObject<{
            feedId: z.ZodString;
            feedDisplayName: z.ZodString;
            feedDescription: z.ZodString;
            feedFolder: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }>;
        manualTickets: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The ID of the ticket.
             */
            id: z.ZodString;
            /**
             * The generic issuance UUID of the event that the ticket is for.
             */
            eventId: z.ZodString;
            /**
             * The generic issuance UUID for the product/ticket type.
             */
            productId: z.ZodString;
            /**
             * The email to assign the ticket to.
             */
            attendeeEmail: z.ZodString;
            /**
             * The full name of the attendee.
             */
            attendeeName: z.ZodString;
            timeCreated: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }>, "many">>, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined, {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined>;
        semaphoreGroups: z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * Defines the set of event ID/product ID pairs that qualify a ticket-holder
             * for membership in this group. If no product ID is specified, then all
             * tickets for the event will qualify for group membership.
             *
             * The groupId is a UUID which the administrator should generate.
             */
            groupId: z.ZodString;
            name: z.ZodString;
            memberCriteria: z.ZodArray<z.ZodObject<{
                /**
                 * generic issuance event id
                 */
                eventId: z.ZodString;
                /**
                 * generic issuance product id
                 */
                productId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventId: string;
                productId?: string | undefined;
            }, {
                eventId: string;
                productId?: string | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }>, "many">>, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined>, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined, {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined>;
        enablePODTickets: z.ZodOptional<z.ZodBoolean>;
        autoIssuance: z.ZodOptional<z.ZodArray<z.ZodObject<{
            memberCriteria: z.ZodArray<z.ZodObject<{
                /**
                 * generic issuance event id
                 */
                eventId: z.ZodString;
                /**
                 * generic issuance product id
                 */
                productId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventId: string;
                productId?: string | undefined;
            }, {
                eventId: string;
                productId?: string | undefined;
            }>, "many">;
            eventId: z.ZodString;
            productId: z.ZodString;
            quantity: z.ZodNumber;
            schedule: z.ZodObject<{
                startDate: z.ZodString;
                endDate: z.ZodOptional<z.ZodString>;
                intervalMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            }, {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }, {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }>, "many">>;
        userPermissions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            members: z.ZodArray<z.ZodObject<{
                /**
                 * generic issuance event id
                 */
                eventId: z.ZodString;
                /**
                 * generic issuance product id
                 */
                productId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventId: string;
                productId?: string | undefined;
            }, {
                eventId: string;
                productId?: string | undefined;
            }>, "many">;
            canCheckIn: z.ZodObject<{
                eventId: z.ZodString;
                productId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                eventId: string;
                productId?: string | undefined;
            }, {
                eventId: string;
                productId?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }, {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    }, {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    }>, {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    }, {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    options: {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    };
    type: PipelineType.Pretix;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}, {
    options: {
        events: {
            name: string;
            externalId: string;
            genericIssuanceId: string;
            products: {
                name: string;
                externalId: string;
                isSuperUser: boolean;
                genericIssuanceId: string;
                nameQuestionPretixQuestionIdentitifier?: string | undefined;
                isAddOnItem?: boolean | undefined;
            }[];
            imageOptions?: {
                imageUrl: string;
                requireCheckedIn: boolean;
                qrCodeOverrideImageUrl?: string | undefined;
                eventStartDate?: string | undefined;
                eventLocation?: string | undefined;
            } | undefined;
            skipSettingsValidation?: boolean | undefined;
        }[];
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        pretixAPIKey: string;
        pretixOrgUrl: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        manualTickets?: {
            id: string;
            eventId: string;
            productId: string;
            attendeeEmail: string;
            attendeeName: string;
            timeCreated?: string | undefined;
        }[] | undefined;
        semaphoreGroups?: {
            name: string;
            groupId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
        }[] | undefined;
        enablePODTickets?: boolean | undefined;
        autoIssuance?: {
            eventId: string;
            productId: string;
            memberCriteria: {
                eventId: string;
                productId?: string | undefined;
            }[];
            quantity: number;
            schedule: {
                startDate: string;
                intervalMs: number;
                endDate?: string | undefined;
            };
        }[] | undefined;
        userPermissions?: {
            members: {
                eventId: string;
                productId?: string | undefined;
            }[];
            canCheckIn: {
                eventId: string;
                productId?: string | undefined;
            };
        }[] | undefined;
    };
    type: PipelineType.Pretix;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}>, z.ZodObject<{
    id: z.ZodString;
    ownerUserId: z.ZodString;
    editorUserIds: z.ZodArray<z.ZodString, "many">;
    timeCreated: z.ZodString;
    timeUpdated: z.ZodString;
    type: z.ZodLiteral<PipelineType.CSV>;
    options: z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        paused: z.ZodOptional<z.ZodBoolean>;
        notes: z.ZodOptional<z.ZodString>;
        alerts: z.ZodOptional<z.ZodObject<{
            pagerduty: z.ZodOptional<z.ZodBoolean>;
            loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
            discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            discordAlerts: z.ZodOptional<z.ZodBoolean>;
            alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
            errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
            warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }>>;
        protected: z.ZodOptional<z.ZodBoolean>;
        important: z.ZodOptional<z.ZodBoolean>;
        disableCache: z.ZodOptional<z.ZodBoolean>;
        csv: z.ZodString;
        outputType: z.ZodOptional<z.ZodNativeEnum<typeof CSVPipelineOutputType>>;
        feedOptions: z.ZodObject<{
            feedId: z.ZodString;
            feedDisplayName: z.ZodString;
            feedDescription: z.ZodString;
            feedFolder: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }>;
        issueToUnmatchedEmail: z.ZodOptional<z.ZodBoolean>;
        semaphoreGroupName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        outputType?: CSVPipelineOutputType | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    }, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        outputType?: CSVPipelineOutputType | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    options: {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        outputType?: CSVPipelineOutputType | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    };
    type: PipelineType.CSV;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}, {
    options: {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        outputType?: CSVPipelineOutputType | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    };
    type: PipelineType.CSV;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}>, z.ZodObject<{
    id: z.ZodString;
    ownerUserId: z.ZodString;
    editorUserIds: z.ZodArray<z.ZodString, "many">;
    timeCreated: z.ZodString;
    timeUpdated: z.ZodString;
    type: z.ZodLiteral<PipelineType.POD>;
    options: z.ZodEffects<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        paused: z.ZodOptional<z.ZodBoolean>;
        notes: z.ZodOptional<z.ZodString>;
        alerts: z.ZodOptional<z.ZodObject<{
            pagerduty: z.ZodOptional<z.ZodBoolean>;
            loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
            discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            discordAlerts: z.ZodOptional<z.ZodBoolean>;
            alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
            errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
            warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }>>;
        protected: z.ZodOptional<z.ZodBoolean>;
        important: z.ZodOptional<z.ZodBoolean>;
        disableCache: z.ZodOptional<z.ZodBoolean>;
        input: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            columns: z.ZodRecord<z.ZodString, z.ZodObject<{
                type: z.ZodNativeEnum<typeof PODPipelineInputFieldType>;
            }, "strip", z.ZodTypeAny, {
                type: PODPipelineInputFieldType;
            }, {
                type: PODPipelineInputFieldType;
            }>>;
            type: z.ZodLiteral<PODPipelineInputType>;
            csv: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        }, {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        }>]>;
        outputs: z.ZodRecord<z.ZodString, z.ZodObject<{
            pcdType: z.ZodNativeEnum<typeof PODPipelinePCDTypes>;
            /**
             * @todo verify that all input-derived entries have matching columns and
             * possibly that column types match entry types
             */
            entries: z.ZodRecord<z.ZodString, z.ZodObject<{
                type: z.ZodEnum<["string", "int", "cryptographic", "eddsa_pubkey"]>;
                source: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"input">;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "input";
                    name: string;
                }, {
                    type: "input";
                    name: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"credentialSemaphoreID">;
                }, "strip", z.ZodTypeAny, {
                    type: "credentialSemaphoreID";
                }, {
                    type: "credentialSemaphoreID";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"credentialEmail">;
                }, "strip", z.ZodTypeAny, {
                    type: "credentialEmail";
                }, {
                    type: "credentialEmail";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"configured">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "configured";
                    value: string;
                }, {
                    type: "configured";
                    value: string;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>>;
            match: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"semaphoreID">;
                entry: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "semaphoreID";
                entry: string;
            }, {
                type: "semaphoreID";
                entry: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"email">;
                entry: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "email";
                entry: string;
            }, {
                type: "email";
                entry: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"none">;
            }, "strip", z.ZodTypeAny, {
                type: "none";
            }, {
                type: "none";
            }>]>;
        }, "strip", z.ZodTypeAny, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>>;
        feedOptions: z.ZodObject<{
            feedId: z.ZodString;
            feedDisplayName: z.ZodString;
            feedDescription: z.ZodString;
            feedFolder: z.ZodString;
            feedType: z.ZodEnum<["deleteAndReplace", "replace"]>;
        }, "strip", z.ZodTypeAny, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        }, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        }>;
    }, "strip", z.ZodTypeAny, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    }, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    }>, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    }, {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    options: {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    };
    type: PipelineType.POD;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}, {
    options: {
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
            feedType: "replace" | "deleteAndReplace";
        };
        input: {
            type: PODPipelineInputType;
            csv: string;
            columns: Record<string, {
                type: PODPipelineInputFieldType;
            }>;
        };
        outputs: Record<string, {
            entries: Record<string, {
                type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                source: {
                    type: "input";
                    name: string;
                } | {
                    type: "credentialSemaphoreID";
                } | {
                    type: "credentialEmail";
                } | {
                    type: "configured";
                    value: string;
                };
            }>;
            pcdType: PODPipelinePCDTypes;
            match: {
                type: "semaphoreID";
                entry: string;
            } | {
                type: "email";
                entry: string;
            } | {
                type: "none";
            };
        }>;
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
    };
    type: PipelineType.POD;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}>, z.ZodObject<{
    id: z.ZodString;
    ownerUserId: z.ZodString;
    editorUserIds: z.ZodArray<z.ZodString, "many">;
    timeCreated: z.ZodString;
    timeUpdated: z.ZodString;
    type: z.ZodLiteral<PipelineType.CSVTicket>;
    options: z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        paused: z.ZodOptional<z.ZodBoolean>;
        notes: z.ZodOptional<z.ZodString>;
        alerts: z.ZodOptional<z.ZodObject<{
            pagerduty: z.ZodOptional<z.ZodBoolean>;
            loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
            discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            discordAlerts: z.ZodOptional<z.ZodBoolean>;
            alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
            errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
            warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }, {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        }>>;
        protected: z.ZodOptional<z.ZodBoolean>;
        important: z.ZodOptional<z.ZodBoolean>;
        disableCache: z.ZodOptional<z.ZodBoolean>;
        eventName: z.ZodString;
        csv: z.ZodString;
        feedOptions: z.ZodObject<{
            feedId: z.ZodString;
            feedDisplayName: z.ZodString;
            feedDescription: z.ZodString;
            feedFolder: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }, {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        }>;
        pcdTypes: z.ZodArray<z.ZodEnum<["EdDSATicketPCD", "PODTicketPCD"]>, "many">;
        issueToUnmatchedEmail: z.ZodOptional<z.ZodBoolean>;
        semaphoreGroupName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        eventName: string;
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    }, {
        eventName: string;
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    options: {
        eventName: string;
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    };
    type: PipelineType.CSVTicket;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}, {
    options: {
        eventName: string;
        feedOptions: {
            feedId: string;
            feedDisplayName: string;
            feedDescription: string;
            feedFolder: string;
        };
        csv: string;
        pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
        name?: string | undefined;
        paused?: boolean | undefined;
        notes?: string | undefined;
        alerts?: {
            pagerduty?: boolean | undefined;
            loadIncidentPagePolicy?: IncidentPolicy | undefined;
            discordTags?: string[] | undefined;
            discordAlerts?: boolean | undefined;
            alertOnLogErrors?: boolean | undefined;
            errorLogIgnoreRegexes?: string[] | undefined;
            alertOnLogWarnings?: boolean | undefined;
            warningLogIgnoreRegexes?: string[] | undefined;
            alertOnAtomMismatch?: boolean | undefined;
        } | undefined;
        protected?: boolean | undefined;
        important?: boolean | undefined;
        disableCache?: boolean | undefined;
        issueToUnmatchedEmail?: boolean | undefined;
        semaphoreGroupName?: string | undefined;
    };
    type: PipelineType.CSVTicket;
    id: string;
    ownerUserId: string;
    editorUserIds: string[];
    timeCreated: string;
    timeUpdated: string;
}>]>;
/**
 * Any new pipeline definitions need to be added to this type declaration. Note
 * that the way I've set it up a {@link Pipeline} appears to only be able to have
 * one data source. However, that is not the case. In the future, if needed, it
 * would be possible to create Pipelines that load from an arbitrary quantity
 * of data sources.
 */
export type PipelineDefinition = z.infer<typeof PipelineDefinitionSchema>;
declare const PipelineHistoryEntrySchema: z.ZodObject<{
    id: z.ZodString;
    pipeline: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        id: z.ZodString;
        ownerUserId: z.ZodString;
        editorUserIds: z.ZodArray<z.ZodString, "many">;
        timeCreated: z.ZodString;
        timeUpdated: z.ZodString;
        type: z.ZodLiteral<PipelineType.Lemonade>;
        options: z.ZodEffects<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            paused: z.ZodOptional<z.ZodBoolean>;
            notes: z.ZodOptional<z.ZodString>;
            alerts: z.ZodOptional<z.ZodObject<{
                pagerduty: z.ZodOptional<z.ZodBoolean>;
                loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
                discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                discordAlerts: z.ZodOptional<z.ZodBoolean>;
                alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
                errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
                warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            }, {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            }>>;
            protected: z.ZodOptional<z.ZodBoolean>;
            important: z.ZodOptional<z.ZodBoolean>;
            disableCache: z.ZodOptional<z.ZodBoolean>;
            oauthAudience: z.ZodString;
            oauthClientId: z.ZodString;
            oauthClientSecret: z.ZodString;
            oauthServerUrl: z.ZodString;
            backendUrl: z.ZodString;
            events: z.ZodArray<z.ZodObject<{
                /**
                 * The ID of this event on the Lemonade end.
                 */
                externalId: z.ZodString;
                /**
                 * Display name.
                 */
                name: z.ZodString;
                /**
                 * The UUID of this event used for {@link EdDSATicketPCD}.
                 */
                genericIssuanceEventId: z.ZodString;
                /**
                 * Roughly translates to Products in {@link EdDSATicketPCD}.
                 */
                ticketTypes: z.ZodArray<z.ZodObject<{
                    /**
                     * The ID of this ticket type on the Lemonade end.
                     */
                    externalId: z.ZodString;
                    /**
                     * The UUID of this ticket type used in {@link EdDSATicketPCD}.
                     */
                    genericIssuanceProductId: z.ZodString;
                    /**
                     * Whether this ticket type is allowed to check other tickets in or not.
                     */
                    isSuperUser: z.ZodBoolean;
                    /**
                     * Display name
                     */
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }, {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                externalId: string;
                genericIssuanceEventId: string;
                ticketTypes: {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }[];
            }, {
                name: string;
                externalId: string;
                genericIssuanceEventId: string;
                ticketTypes: {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }[];
            }>, "many">;
            superuserEmails: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            feedOptions: z.ZodObject<{
                feedId: z.ZodString;
                feedDisplayName: z.ZodString;
                feedDescription: z.ZodString;
                feedFolder: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            }, {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            }>;
            manualTickets: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * The ID of the ticket.
                 */
                id: z.ZodString;
                /**
                 * The generic issuance UUID of the event that the ticket is for.
                 */
                eventId: z.ZodString;
                /**
                 * The generic issuance UUID for the product/ticket type.
                 */
                productId: z.ZodString;
                /**
                 * The email to assign the ticket to.
                 */
                attendeeEmail: z.ZodString;
                /**
                 * The full name of the attendee.
                 */
                attendeeName: z.ZodString;
                timeCreated: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }, {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }>, "many">>, {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined, {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined>;
            ticketActions: z.ZodOptional<z.ZodObject<{
                badges: z.ZodOptional<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodBoolean>;
                    choices: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        id: z.ZodString;
                        eventName: z.ZodString;
                        productName: z.ZodOptional<z.ZodString>;
                        imageUrl: z.ZodString;
                        givers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                        grantOnCheckin: z.ZodOptional<z.ZodBoolean>;
                        maxPerDay: z.ZodOptional<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }, {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                }, {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                }>>;
                contacts: z.ZodOptional<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    enabled?: boolean | undefined;
                }, {
                    enabled?: boolean | undefined;
                }>>;
                screenConfig: z.ZodOptional<z.ZodObject<{
                    eventBannerUrl: z.ZodOptional<z.ZodString>;
                    eventNameConfig: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                }, {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                badges?: {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                } | undefined;
                contacts?: {
                    enabled?: boolean | undefined;
                } | undefined;
                screenConfig?: {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                } | undefined;
            }, {
                badges?: {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                } | undefined;
                contacts?: {
                    enabled?: boolean | undefined;
                } | undefined;
                screenConfig?: {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                } | undefined;
            }>>;
            semaphoreGroups: z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * Defines the set of event ID/product ID pairs that qualify a ticket-holder
                 * for membership in this group. If no product ID is specified, then all
                 * tickets for the event will qualify for group membership.
                 *
                 * The groupId is a UUID which the administrator should generate.
                 */
                groupId: z.ZodString;
                name: z.ZodString;
                memberCriteria: z.ZodArray<z.ZodObject<{
                    /**
                     * generic issuance event id
                     */
                    eventId: z.ZodString;
                    /**
                     * generic issuance product id
                     */
                    productId: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    eventId: string;
                    productId?: string | undefined;
                }, {
                    eventId: string;
                    productId?: string | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }>, "many">>, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined>, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined>;
            enablePODTickets: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            oauthAudience: string;
            oauthClientId: string;
            oauthClientSecret: string;
            oauthServerUrl: string;
            backendUrl: string;
            events: {
                name: string;
                externalId: string;
                genericIssuanceEventId: string;
                ticketTypes: {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }[];
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            superuserEmails?: string[] | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            ticketActions?: {
                badges?: {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                } | undefined;
                contacts?: {
                    enabled?: boolean | undefined;
                } | undefined;
                screenConfig?: {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                } | undefined;
            } | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
        }, {
            oauthAudience: string;
            oauthClientId: string;
            oauthClientSecret: string;
            oauthServerUrl: string;
            backendUrl: string;
            events: {
                name: string;
                externalId: string;
                genericIssuanceEventId: string;
                ticketTypes: {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }[];
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            superuserEmails?: string[] | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            ticketActions?: {
                badges?: {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                } | undefined;
                contacts?: {
                    enabled?: boolean | undefined;
                } | undefined;
                screenConfig?: {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                } | undefined;
            } | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
        }>, {
            oauthAudience: string;
            oauthClientId: string;
            oauthClientSecret: string;
            oauthServerUrl: string;
            backendUrl: string;
            events: {
                name: string;
                externalId: string;
                genericIssuanceEventId: string;
                ticketTypes: {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }[];
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            superuserEmails?: string[] | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            ticketActions?: {
                badges?: {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                } | undefined;
                contacts?: {
                    enabled?: boolean | undefined;
                } | undefined;
                screenConfig?: {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                } | undefined;
            } | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
        }, {
            oauthAudience: string;
            oauthClientId: string;
            oauthClientSecret: string;
            oauthServerUrl: string;
            backendUrl: string;
            events: {
                name: string;
                externalId: string;
                genericIssuanceEventId: string;
                ticketTypes: {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }[];
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            superuserEmails?: string[] | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            ticketActions?: {
                badges?: {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                } | undefined;
                contacts?: {
                    enabled?: boolean | undefined;
                } | undefined;
                screenConfig?: {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                } | undefined;
            } | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        options: {
            oauthAudience: string;
            oauthClientId: string;
            oauthClientSecret: string;
            oauthServerUrl: string;
            backendUrl: string;
            events: {
                name: string;
                externalId: string;
                genericIssuanceEventId: string;
                ticketTypes: {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }[];
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            superuserEmails?: string[] | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            ticketActions?: {
                badges?: {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                } | undefined;
                contacts?: {
                    enabled?: boolean | undefined;
                } | undefined;
                screenConfig?: {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                } | undefined;
            } | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
        };
        type: PipelineType.Lemonade;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    }, {
        options: {
            oauthAudience: string;
            oauthClientId: string;
            oauthClientSecret: string;
            oauthServerUrl: string;
            backendUrl: string;
            events: {
                name: string;
                externalId: string;
                genericIssuanceEventId: string;
                ticketTypes: {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }[];
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            superuserEmails?: string[] | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            ticketActions?: {
                badges?: {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                } | undefined;
                contacts?: {
                    enabled?: boolean | undefined;
                } | undefined;
                screenConfig?: {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                } | undefined;
            } | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
        };
        type: PipelineType.Lemonade;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    }>, z.ZodObject<{
        id: z.ZodString;
        ownerUserId: z.ZodString;
        editorUserIds: z.ZodArray<z.ZodString, "many">;
        timeCreated: z.ZodString;
        timeUpdated: z.ZodString;
        type: z.ZodLiteral<PipelineType.Pretix>;
        options: z.ZodEffects<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            paused: z.ZodOptional<z.ZodBoolean>;
            notes: z.ZodOptional<z.ZodString>;
            alerts: z.ZodOptional<z.ZodObject<{
                pagerduty: z.ZodOptional<z.ZodBoolean>;
                loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
                discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                discordAlerts: z.ZodOptional<z.ZodBoolean>;
                alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
                errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
                warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            }, {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            }>>;
            protected: z.ZodOptional<z.ZodBoolean>;
            important: z.ZodOptional<z.ZodBoolean>;
            disableCache: z.ZodOptional<z.ZodBoolean>;
            pretixAPIKey: z.ZodString;
            pretixOrgUrl: z.ZodString;
            events: z.ZodArray<z.ZodObject<{
                /**
                 * Pretix's event ID
                 */
                externalId: z.ZodString;
                /**
                 * Our UUID
                 */
                genericIssuanceId: z.ZodString;
                /**
                 * Display name for the event
                 */
                name: z.ZodString;
                /**
                 * Options to configure displaying an image instead of the QR code
                 */
                imageOptions: z.ZodOptional<z.ZodObject<{
                    imageUrl: z.ZodString;
                    requireCheckedIn: z.ZodBoolean;
                    qrCodeOverrideImageUrl: z.ZodOptional<z.ZodString>;
                    eventStartDate: z.ZodOptional<z.ZodString>;
                    eventLocation: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                }, {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                }>>;
                products: z.ZodArray<z.ZodObject<{
                    /**
                     * Pretix's item ID
                     */
                    externalId: z.ZodString;
                    /**
                     * Our UUID
                     */
                    genericIssuanceId: z.ZodString;
                    /**
                     * Display name
                     */
                    name: z.ZodString;
                    /**
                     * Is a user with this product a "superuser"?
                     * Superusers are able to check tickets in to events.
                     */
                    isSuperUser: z.ZodBoolean;
                    /**
                     * If the attendee's name is collected by a question
                     * other than the default attendee name question, this
                     * field lets you configure Podbox to prefer to read
                     * names from answers to the question with this `question_identifier`
                     *
                     * see pretix docs here: https://docs.pretix.eu/en/latest/api/resources/orders.html#order-position-resource
                     */
                    nameQuestionPretixQuestionIdentitifier: z.ZodOptional<z.ZodString>;
                    /**
                     * Whether the item is considereed an "add-on item" for the purposes of swag
                     */
                    isAddOnItem: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }, {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }>, "many">;
                /**
                 * Skip validation of event settings - use with caution!
                 */
                skipSettingsValidation: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                externalId: string;
                genericIssuanceId: string;
                products: {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }[];
                imageOptions?: {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                } | undefined;
                skipSettingsValidation?: boolean | undefined;
            }, {
                name: string;
                externalId: string;
                genericIssuanceId: string;
                products: {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }[];
                imageOptions?: {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                } | undefined;
                skipSettingsValidation?: boolean | undefined;
            }>, "many">;
            feedOptions: z.ZodObject<{
                feedId: z.ZodString;
                feedDisplayName: z.ZodString;
                feedDescription: z.ZodString;
                feedFolder: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            }, {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            }>;
            manualTickets: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * The ID of the ticket.
                 */
                id: z.ZodString;
                /**
                 * The generic issuance UUID of the event that the ticket is for.
                 */
                eventId: z.ZodString;
                /**
                 * The generic issuance UUID for the product/ticket type.
                 */
                productId: z.ZodString;
                /**
                 * The email to assign the ticket to.
                 */
                attendeeEmail: z.ZodString;
                /**
                 * The full name of the attendee.
                 */
                attendeeName: z.ZodString;
                timeCreated: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }, {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }>, "many">>, {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined, {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined>;
            semaphoreGroups: z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * Defines the set of event ID/product ID pairs that qualify a ticket-holder
                 * for membership in this group. If no product ID is specified, then all
                 * tickets for the event will qualify for group membership.
                 *
                 * The groupId is a UUID which the administrator should generate.
                 */
                groupId: z.ZodString;
                name: z.ZodString;
                memberCriteria: z.ZodArray<z.ZodObject<{
                    /**
                     * generic issuance event id
                     */
                    eventId: z.ZodString;
                    /**
                     * generic issuance product id
                     */
                    productId: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    eventId: string;
                    productId?: string | undefined;
                }, {
                    eventId: string;
                    productId?: string | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }>, "many">>, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined>, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined, {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined>;
            enablePODTickets: z.ZodOptional<z.ZodBoolean>;
            autoIssuance: z.ZodOptional<z.ZodArray<z.ZodObject<{
                memberCriteria: z.ZodArray<z.ZodObject<{
                    /**
                     * generic issuance event id
                     */
                    eventId: z.ZodString;
                    /**
                     * generic issuance product id
                     */
                    productId: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    eventId: string;
                    productId?: string | undefined;
                }, {
                    eventId: string;
                    productId?: string | undefined;
                }>, "many">;
                eventId: z.ZodString;
                productId: z.ZodString;
                quantity: z.ZodNumber;
                schedule: z.ZodObject<{
                    startDate: z.ZodString;
                    endDate: z.ZodOptional<z.ZodString>;
                    intervalMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                }, {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                eventId: string;
                productId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                quantity: number;
                schedule: {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                };
            }, {
                eventId: string;
                productId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                quantity: number;
                schedule: {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                };
            }>, "many">>;
            userPermissions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                members: z.ZodArray<z.ZodObject<{
                    /**
                     * generic issuance event id
                     */
                    eventId: z.ZodString;
                    /**
                     * generic issuance product id
                     */
                    productId: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    eventId: string;
                    productId?: string | undefined;
                }, {
                    eventId: string;
                    productId?: string | undefined;
                }>, "many">;
                canCheckIn: z.ZodObject<{
                    eventId: z.ZodString;
                    productId: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    eventId: string;
                    productId?: string | undefined;
                }, {
                    eventId: string;
                    productId?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                members: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                canCheckIn: {
                    eventId: string;
                    productId?: string | undefined;
                };
            }, {
                members: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                canCheckIn: {
                    eventId: string;
                    productId?: string | undefined;
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            events: {
                name: string;
                externalId: string;
                genericIssuanceId: string;
                products: {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }[];
                imageOptions?: {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                } | undefined;
                skipSettingsValidation?: boolean | undefined;
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            pretixAPIKey: string;
            pretixOrgUrl: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
            autoIssuance?: {
                eventId: string;
                productId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                quantity: number;
                schedule: {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                };
            }[] | undefined;
            userPermissions?: {
                members: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                canCheckIn: {
                    eventId: string;
                    productId?: string | undefined;
                };
            }[] | undefined;
        }, {
            events: {
                name: string;
                externalId: string;
                genericIssuanceId: string;
                products: {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }[];
                imageOptions?: {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                } | undefined;
                skipSettingsValidation?: boolean | undefined;
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            pretixAPIKey: string;
            pretixOrgUrl: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
            autoIssuance?: {
                eventId: string;
                productId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                quantity: number;
                schedule: {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                };
            }[] | undefined;
            userPermissions?: {
                members: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                canCheckIn: {
                    eventId: string;
                    productId?: string | undefined;
                };
            }[] | undefined;
        }>, {
            events: {
                name: string;
                externalId: string;
                genericIssuanceId: string;
                products: {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }[];
                imageOptions?: {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                } | undefined;
                skipSettingsValidation?: boolean | undefined;
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            pretixAPIKey: string;
            pretixOrgUrl: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
            autoIssuance?: {
                eventId: string;
                productId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                quantity: number;
                schedule: {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                };
            }[] | undefined;
            userPermissions?: {
                members: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                canCheckIn: {
                    eventId: string;
                    productId?: string | undefined;
                };
            }[] | undefined;
        }, {
            events: {
                name: string;
                externalId: string;
                genericIssuanceId: string;
                products: {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }[];
                imageOptions?: {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                } | undefined;
                skipSettingsValidation?: boolean | undefined;
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            pretixAPIKey: string;
            pretixOrgUrl: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
            autoIssuance?: {
                eventId: string;
                productId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                quantity: number;
                schedule: {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                };
            }[] | undefined;
            userPermissions?: {
                members: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                canCheckIn: {
                    eventId: string;
                    productId?: string | undefined;
                };
            }[] | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        options: {
            events: {
                name: string;
                externalId: string;
                genericIssuanceId: string;
                products: {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }[];
                imageOptions?: {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                } | undefined;
                skipSettingsValidation?: boolean | undefined;
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            pretixAPIKey: string;
            pretixOrgUrl: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
            autoIssuance?: {
                eventId: string;
                productId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                quantity: number;
                schedule: {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                };
            }[] | undefined;
            userPermissions?: {
                members: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                canCheckIn: {
                    eventId: string;
                    productId?: string | undefined;
                };
            }[] | undefined;
        };
        type: PipelineType.Pretix;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    }, {
        options: {
            events: {
                name: string;
                externalId: string;
                genericIssuanceId: string;
                products: {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }[];
                imageOptions?: {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                } | undefined;
                skipSettingsValidation?: boolean | undefined;
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            pretixAPIKey: string;
            pretixOrgUrl: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
            autoIssuance?: {
                eventId: string;
                productId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                quantity: number;
                schedule: {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                };
            }[] | undefined;
            userPermissions?: {
                members: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                canCheckIn: {
                    eventId: string;
                    productId?: string | undefined;
                };
            }[] | undefined;
        };
        type: PipelineType.Pretix;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    }>, z.ZodObject<{
        id: z.ZodString;
        ownerUserId: z.ZodString;
        editorUserIds: z.ZodArray<z.ZodString, "many">;
        timeCreated: z.ZodString;
        timeUpdated: z.ZodString;
        type: z.ZodLiteral<PipelineType.CSV>;
        options: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            paused: z.ZodOptional<z.ZodBoolean>;
            notes: z.ZodOptional<z.ZodString>;
            alerts: z.ZodOptional<z.ZodObject<{
                pagerduty: z.ZodOptional<z.ZodBoolean>;
                loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
                discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                discordAlerts: z.ZodOptional<z.ZodBoolean>;
                alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
                errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
                warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            }, {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            }>>;
            protected: z.ZodOptional<z.ZodBoolean>;
            important: z.ZodOptional<z.ZodBoolean>;
            disableCache: z.ZodOptional<z.ZodBoolean>;
            csv: z.ZodString;
            outputType: z.ZodOptional<z.ZodNativeEnum<typeof CSVPipelineOutputType>>;
            feedOptions: z.ZodObject<{
                feedId: z.ZodString;
                feedDisplayName: z.ZodString;
                feedDescription: z.ZodString;
                feedFolder: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            }, {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            }>;
            issueToUnmatchedEmail: z.ZodOptional<z.ZodBoolean>;
            semaphoreGroupName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            outputType?: CSVPipelineOutputType | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        }, {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            outputType?: CSVPipelineOutputType | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        options: {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            outputType?: CSVPipelineOutputType | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        };
        type: PipelineType.CSV;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    }, {
        options: {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            outputType?: CSVPipelineOutputType | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        };
        type: PipelineType.CSV;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    }>, z.ZodObject<{
        id: z.ZodString;
        ownerUserId: z.ZodString;
        editorUserIds: z.ZodArray<z.ZodString, "many">;
        timeCreated: z.ZodString;
        timeUpdated: z.ZodString;
        type: z.ZodLiteral<PipelineType.POD>;
        options: z.ZodEffects<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            paused: z.ZodOptional<z.ZodBoolean>;
            notes: z.ZodOptional<z.ZodString>;
            alerts: z.ZodOptional<z.ZodObject<{
                pagerduty: z.ZodOptional<z.ZodBoolean>;
                loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
                discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                discordAlerts: z.ZodOptional<z.ZodBoolean>;
                alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
                errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
                warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            }, {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            }>>;
            protected: z.ZodOptional<z.ZodBoolean>;
            important: z.ZodOptional<z.ZodBoolean>;
            disableCache: z.ZodOptional<z.ZodBoolean>;
            input: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                columns: z.ZodRecord<z.ZodString, z.ZodObject<{
                    type: z.ZodNativeEnum<typeof PODPipelineInputFieldType>;
                }, "strip", z.ZodTypeAny, {
                    type: PODPipelineInputFieldType;
                }, {
                    type: PODPipelineInputFieldType;
                }>>;
                type: z.ZodLiteral<PODPipelineInputType>;
                csv: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: PODPipelineInputType;
                csv: string;
                columns: Record<string, {
                    type: PODPipelineInputFieldType;
                }>;
            }, {
                type: PODPipelineInputType;
                csv: string;
                columns: Record<string, {
                    type: PODPipelineInputFieldType;
                }>;
            }>]>;
            outputs: z.ZodRecord<z.ZodString, z.ZodObject<{
                pcdType: z.ZodNativeEnum<typeof PODPipelinePCDTypes>;
                /**
                 * @todo verify that all input-derived entries have matching columns and
                 * possibly that column types match entry types
                 */
                entries: z.ZodRecord<z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<["string", "int", "cryptographic", "eddsa_pubkey"]>;
                    source: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"input">;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "input";
                        name: string;
                    }, {
                        type: "input";
                        name: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"credentialSemaphoreID">;
                    }, "strip", z.ZodTypeAny, {
                        type: "credentialSemaphoreID";
                    }, {
                        type: "credentialSemaphoreID";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"credentialEmail">;
                    }, "strip", z.ZodTypeAny, {
                        type: "credentialEmail";
                    }, {
                        type: "credentialEmail";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"configured">;
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "configured";
                        value: string;
                    }, {
                        type: "configured";
                        value: string;
                    }>]>;
                }, "strip", z.ZodTypeAny, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }>>;
                match: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"semaphoreID">;
                    entry: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "semaphoreID";
                    entry: string;
                }, {
                    type: "semaphoreID";
                    entry: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"email">;
                    entry: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "email";
                    entry: string;
                }, {
                    type: "email";
                    entry: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"none">;
                }, "strip", z.ZodTypeAny, {
                    type: "none";
                }, {
                    type: "none";
                }>]>;
            }, "strip", z.ZodTypeAny, {
                entries: Record<string, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }>;
                pcdType: PODPipelinePCDTypes;
                match: {
                    type: "semaphoreID";
                    entry: string;
                } | {
                    type: "email";
                    entry: string;
                } | {
                    type: "none";
                };
            }, {
                entries: Record<string, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }>;
                pcdType: PODPipelinePCDTypes;
                match: {
                    type: "semaphoreID";
                    entry: string;
                } | {
                    type: "email";
                    entry: string;
                } | {
                    type: "none";
                };
            }>>;
            feedOptions: z.ZodObject<{
                feedId: z.ZodString;
                feedDisplayName: z.ZodString;
                feedDescription: z.ZodString;
                feedFolder: z.ZodString;
                feedType: z.ZodEnum<["deleteAndReplace", "replace"]>;
            }, "strip", z.ZodTypeAny, {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
                feedType: "replace" | "deleteAndReplace";
            }, {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
                feedType: "replace" | "deleteAndReplace";
            }>;
        }, "strip", z.ZodTypeAny, {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
                feedType: "replace" | "deleteAndReplace";
            };
            input: {
                type: PODPipelineInputType;
                csv: string;
                columns: Record<string, {
                    type: PODPipelineInputFieldType;
                }>;
            };
            outputs: Record<string, {
                entries: Record<string, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }>;
                pcdType: PODPipelinePCDTypes;
                match: {
                    type: "semaphoreID";
                    entry: string;
                } | {
                    type: "email";
                    entry: string;
                } | {
                    type: "none";
                };
            }>;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
        }, {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
                feedType: "replace" | "deleteAndReplace";
            };
            input: {
                type: PODPipelineInputType;
                csv: string;
                columns: Record<string, {
                    type: PODPipelineInputFieldType;
                }>;
            };
            outputs: Record<string, {
                entries: Record<string, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }>;
                pcdType: PODPipelinePCDTypes;
                match: {
                    type: "semaphoreID";
                    entry: string;
                } | {
                    type: "email";
                    entry: string;
                } | {
                    type: "none";
                };
            }>;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
        }>, {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
                feedType: "replace" | "deleteAndReplace";
            };
            input: {
                type: PODPipelineInputType;
                csv: string;
                columns: Record<string, {
                    type: PODPipelineInputFieldType;
                }>;
            };
            outputs: Record<string, {
                entries: Record<string, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }>;
                pcdType: PODPipelinePCDTypes;
                match: {
                    type: "semaphoreID";
                    entry: string;
                } | {
                    type: "email";
                    entry: string;
                } | {
                    type: "none";
                };
            }>;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
        }, {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
                feedType: "replace" | "deleteAndReplace";
            };
            input: {
                type: PODPipelineInputType;
                csv: string;
                columns: Record<string, {
                    type: PODPipelineInputFieldType;
                }>;
            };
            outputs: Record<string, {
                entries: Record<string, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }>;
                pcdType: PODPipelinePCDTypes;
                match: {
                    type: "semaphoreID";
                    entry: string;
                } | {
                    type: "email";
                    entry: string;
                } | {
                    type: "none";
                };
            }>;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        options: {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
                feedType: "replace" | "deleteAndReplace";
            };
            input: {
                type: PODPipelineInputType;
                csv: string;
                columns: Record<string, {
                    type: PODPipelineInputFieldType;
                }>;
            };
            outputs: Record<string, {
                entries: Record<string, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }>;
                pcdType: PODPipelinePCDTypes;
                match: {
                    type: "semaphoreID";
                    entry: string;
                } | {
                    type: "email";
                    entry: string;
                } | {
                    type: "none";
                };
            }>;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
        };
        type: PipelineType.POD;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    }, {
        options: {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
                feedType: "replace" | "deleteAndReplace";
            };
            input: {
                type: PODPipelineInputType;
                csv: string;
                columns: Record<string, {
                    type: PODPipelineInputFieldType;
                }>;
            };
            outputs: Record<string, {
                entries: Record<string, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }>;
                pcdType: PODPipelinePCDTypes;
                match: {
                    type: "semaphoreID";
                    entry: string;
                } | {
                    type: "email";
                    entry: string;
                } | {
                    type: "none";
                };
            }>;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
        };
        type: PipelineType.POD;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    }>, z.ZodObject<{
        id: z.ZodString;
        ownerUserId: z.ZodString;
        editorUserIds: z.ZodArray<z.ZodString, "many">;
        timeCreated: z.ZodString;
        timeUpdated: z.ZodString;
        type: z.ZodLiteral<PipelineType.CSVTicket>;
        options: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            paused: z.ZodOptional<z.ZodBoolean>;
            notes: z.ZodOptional<z.ZodString>;
            alerts: z.ZodOptional<z.ZodObject<{
                pagerduty: z.ZodOptional<z.ZodBoolean>;
                loadIncidentPagePolicy: z.ZodOptional<z.ZodNativeEnum<typeof IncidentPolicy>>;
                discordTags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                discordAlerts: z.ZodOptional<z.ZodBoolean>;
                alertOnLogErrors: z.ZodOptional<z.ZodBoolean>;
                errorLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                alertOnLogWarnings: z.ZodOptional<z.ZodBoolean>;
                warningLogIgnoreRegexes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                alertOnAtomMismatch: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            }, {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            }>>;
            protected: z.ZodOptional<z.ZodBoolean>;
            important: z.ZodOptional<z.ZodBoolean>;
            disableCache: z.ZodOptional<z.ZodBoolean>;
            eventName: z.ZodString;
            csv: z.ZodString;
            feedOptions: z.ZodObject<{
                feedId: z.ZodString;
                feedDisplayName: z.ZodString;
                feedDescription: z.ZodString;
                feedFolder: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            }, {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            }>;
            pcdTypes: z.ZodArray<z.ZodEnum<["EdDSATicketPCD", "PODTicketPCD"]>, "many">;
            issueToUnmatchedEmail: z.ZodOptional<z.ZodBoolean>;
            semaphoreGroupName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            eventName: string;
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        }, {
            eventName: string;
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        options: {
            eventName: string;
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        };
        type: PipelineType.CSVTicket;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    }, {
        options: {
            eventName: string;
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        };
        type: PipelineType.CSVTicket;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    }>]>;
    timeCreated: z.ZodString;
    editorUserId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    timeCreated: string;
    pipeline: {
        options: {
            oauthAudience: string;
            oauthClientId: string;
            oauthClientSecret: string;
            oauthServerUrl: string;
            backendUrl: string;
            events: {
                name: string;
                externalId: string;
                genericIssuanceEventId: string;
                ticketTypes: {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }[];
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            superuserEmails?: string[] | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            ticketActions?: {
                badges?: {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                } | undefined;
                contacts?: {
                    enabled?: boolean | undefined;
                } | undefined;
                screenConfig?: {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                } | undefined;
            } | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
        };
        type: PipelineType.Lemonade;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    } | {
        options: {
            events: {
                name: string;
                externalId: string;
                genericIssuanceId: string;
                products: {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }[];
                imageOptions?: {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                } | undefined;
                skipSettingsValidation?: boolean | undefined;
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            pretixAPIKey: string;
            pretixOrgUrl: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
            autoIssuance?: {
                eventId: string;
                productId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                quantity: number;
                schedule: {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                };
            }[] | undefined;
            userPermissions?: {
                members: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                canCheckIn: {
                    eventId: string;
                    productId?: string | undefined;
                };
            }[] | undefined;
        };
        type: PipelineType.Pretix;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    } | {
        options: {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            outputType?: CSVPipelineOutputType | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        };
        type: PipelineType.CSV;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    } | {
        options: {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
                feedType: "replace" | "deleteAndReplace";
            };
            input: {
                type: PODPipelineInputType;
                csv: string;
                columns: Record<string, {
                    type: PODPipelineInputFieldType;
                }>;
            };
            outputs: Record<string, {
                entries: Record<string, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }>;
                pcdType: PODPipelinePCDTypes;
                match: {
                    type: "semaphoreID";
                    entry: string;
                } | {
                    type: "email";
                    entry: string;
                } | {
                    type: "none";
                };
            }>;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
        };
        type: PipelineType.POD;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    } | {
        options: {
            eventName: string;
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        };
        type: PipelineType.CSVTicket;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    };
    editorUserId?: string | undefined;
}, {
    id: string;
    timeCreated: string;
    pipeline: {
        options: {
            oauthAudience: string;
            oauthClientId: string;
            oauthClientSecret: string;
            oauthServerUrl: string;
            backendUrl: string;
            events: {
                name: string;
                externalId: string;
                genericIssuanceEventId: string;
                ticketTypes: {
                    name: string;
                    externalId: string;
                    genericIssuanceProductId: string;
                    isSuperUser: boolean;
                }[];
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            superuserEmails?: string[] | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            ticketActions?: {
                badges?: {
                    enabled?: boolean | undefined;
                    choices?: {
                        id: string;
                        eventName: string;
                        imageUrl: string;
                        productName?: string | undefined;
                        givers?: string[] | undefined;
                        grantOnCheckin?: boolean | undefined;
                        maxPerDay?: number | undefined;
                    }[] | undefined;
                } | undefined;
                contacts?: {
                    enabled?: boolean | undefined;
                } | undefined;
                screenConfig?: {
                    eventBannerUrl?: string | undefined;
                    eventNameConfig?: string | undefined;
                } | undefined;
            } | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
        };
        type: PipelineType.Lemonade;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    } | {
        options: {
            events: {
                name: string;
                externalId: string;
                genericIssuanceId: string;
                products: {
                    name: string;
                    externalId: string;
                    isSuperUser: boolean;
                    genericIssuanceId: string;
                    nameQuestionPretixQuestionIdentitifier?: string | undefined;
                    isAddOnItem?: boolean | undefined;
                }[];
                imageOptions?: {
                    imageUrl: string;
                    requireCheckedIn: boolean;
                    qrCodeOverrideImageUrl?: string | undefined;
                    eventStartDate?: string | undefined;
                    eventLocation?: string | undefined;
                } | undefined;
                skipSettingsValidation?: boolean | undefined;
            }[];
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            pretixAPIKey: string;
            pretixOrgUrl: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            manualTickets?: {
                id: string;
                eventId: string;
                productId: string;
                attendeeEmail: string;
                attendeeName: string;
                timeCreated?: string | undefined;
            }[] | undefined;
            semaphoreGroups?: {
                name: string;
                groupId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
            }[] | undefined;
            enablePODTickets?: boolean | undefined;
            autoIssuance?: {
                eventId: string;
                productId: string;
                memberCriteria: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                quantity: number;
                schedule: {
                    startDate: string;
                    intervalMs: number;
                    endDate?: string | undefined;
                };
            }[] | undefined;
            userPermissions?: {
                members: {
                    eventId: string;
                    productId?: string | undefined;
                }[];
                canCheckIn: {
                    eventId: string;
                    productId?: string | undefined;
                };
            }[] | undefined;
        };
        type: PipelineType.Pretix;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    } | {
        options: {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            outputType?: CSVPipelineOutputType | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        };
        type: PipelineType.CSV;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    } | {
        options: {
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
                feedType: "replace" | "deleteAndReplace";
            };
            input: {
                type: PODPipelineInputType;
                csv: string;
                columns: Record<string, {
                    type: PODPipelineInputFieldType;
                }>;
            };
            outputs: Record<string, {
                entries: Record<string, {
                    type: "string" | "int" | "cryptographic" | "eddsa_pubkey";
                    source: {
                        type: "input";
                        name: string;
                    } | {
                        type: "credentialSemaphoreID";
                    } | {
                        type: "credentialEmail";
                    } | {
                        type: "configured";
                        value: string;
                    };
                }>;
                pcdType: PODPipelinePCDTypes;
                match: {
                    type: "semaphoreID";
                    entry: string;
                } | {
                    type: "email";
                    entry: string;
                } | {
                    type: "none";
                };
            }>;
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
        };
        type: PipelineType.POD;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    } | {
        options: {
            eventName: string;
            feedOptions: {
                feedId: string;
                feedDisplayName: string;
                feedDescription: string;
                feedFolder: string;
            };
            csv: string;
            pcdTypes: ("PODTicketPCD" | "EdDSATicketPCD")[];
            name?: string | undefined;
            paused?: boolean | undefined;
            notes?: string | undefined;
            alerts?: {
                pagerduty?: boolean | undefined;
                loadIncidentPagePolicy?: IncidentPolicy | undefined;
                discordTags?: string[] | undefined;
                discordAlerts?: boolean | undefined;
                alertOnLogErrors?: boolean | undefined;
                errorLogIgnoreRegexes?: string[] | undefined;
                alertOnLogWarnings?: boolean | undefined;
                warningLogIgnoreRegexes?: string[] | undefined;
                alertOnAtomMismatch?: boolean | undefined;
            } | undefined;
            protected?: boolean | undefined;
            important?: boolean | undefined;
            disableCache?: boolean | undefined;
            issueToUnmatchedEmail?: boolean | undefined;
            semaphoreGroupName?: string | undefined;
        };
        type: PipelineType.CSVTicket;
        id: string;
        ownerUserId: string;
        editorUserIds: string[];
        timeCreated: string;
        timeUpdated: string;
    };
    editorUserId?: string | undefined;
}>;
export type PipelineHistoryEntry = z.infer<typeof PipelineHistoryEntrySchema>;
export interface HydratedPipelineHistoryEntry extends PipelineHistoryEntry {
    editorEmail?: string;
}
/**
 * {@link Pipeline}s offer PCDs to users via authenticated channels such as
 * feeds. When a user authenticates in order to receive a PCD, we record this
 * in the DB, allowing us to reconstruct a list of authenticated users for
 * purposes such as Semaphore group management.
 */
export interface PipelineConsumer {
    email: string;
    commitment: string;
    timeCreated: Date;
    timeUpdated: Date;
}
export {};
//# sourceMappingURL=genericIssuanceTypes.d.ts.map