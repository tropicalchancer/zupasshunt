/**
 * A JavaScript map which syncs its entries to local storage, and loads them
 * during construction.
 */
export declare class StorageBackedMap<K, V> extends Map<K, V> {
    /**
     *  The local storage key
     */
    private readonly storageKey;
    /**
     *  Whether we're currently syncing to local storage
     */
    private syncing;
    constructor(storageKey: string);
    /**
     * Queues a microtask to sync to local storage once the current event loop
     *  has finished processing
     */
    private queueSync;
    /**
     * Sync the map entries to local storage
     */
    private syncToStorage;
    /**
     * Reloads data from storage, called in response to storage changes that
     * come from other tabs.
     */
    private reloadFromStorage;
    /**
     * Wraps Map.set(), and queues a sync after the change
     */
    set(key: K, value: V): this;
    /**
     * Wraps Map.delete(), and queues a sync after the change
     */
    delete(key: K): boolean;
    /**
     * Wraps Map.clear(), and queues a sync after the change
     */
    clear(): void;
    /**
     * Wraps Map.forEach(), and queues a sync.
     * This is necessary because callbackfn can mutate map entries.
     */
    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: unknown): void;
}
//# sourceMappingURL=StorageBackedMap.d.ts.map