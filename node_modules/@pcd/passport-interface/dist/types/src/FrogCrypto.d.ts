import { EdDSAFrogPCDPackage, Rarity } from "@pcd/eddsa-frog-pcd";
import { z } from "zod";
import { Feed } from "./SubscriptionManager";
/**
 * Number of free rolls that a user globally
 *
 * User's lastFetchedAt is set to 0 if their score is less than this value
 */
export declare const FROG_FREEROLLS = 2;
/**
 * The maximum score that a user can have
 *
 * Once a user reaches this score, they will no longer be able to earn more PCDs from this feed
 */
export declare const FROG_SCORE_CAP = 10000;
/**
 * Map of configs for Biome(s) where PCDs can be issued from this feed
 */
export declare const FrogCryptoFeedBiomeConfigSchema: z.ZodObject<{
    /**
     * A scaling factor that is multiplied to the weight of the frog to affect
     * the probability of the frog being issued
     *
     * For example, if a feed has 3 frogs:
     *
     * * JungleFrog1's drop weight is 1
     * * JungleFrog2's drop weight is 2
     * * DesertFrog3's drop weight is 3
     *
     *  If the Jungle's dropWeightScaler is 2 and the Desert's
     *   dropWeightScaler is 1, then
     *
     * * JungleFrog1's probability of being issued is 2/9
     * * JungleFrog2's probability of being issued is 4/9
     * * DesertFrog3's probability of being issued is 3/9
     */
    dropWeightScaler: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    dropWeightScaler: number;
}, {
    dropWeightScaler: number;
}>;
export declare const FrogCryptoFeedBiomeConfigsSchema: z.ZodObject<{
    readonly [x: number]: z.ZodOptional<z.ZodObject<{
        /**
         * A scaling factor that is multiplied to the weight of the frog to affect
         * the probability of the frog being issued
         *
         * For example, if a feed has 3 frogs:
         *
         * * JungleFrog1's drop weight is 1
         * * JungleFrog2's drop weight is 2
         * * DesertFrog3's drop weight is 3
         *
         *  If the Jungle's dropWeightScaler is 2 and the Desert's
         *   dropWeightScaler is 1, then
         *
         * * JungleFrog1's probability of being issued is 2/9
         * * JungleFrog2's probability of being issued is 4/9
         * * DesertFrog3's probability of being issued is 3/9
         */
        dropWeightScaler: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dropWeightScaler: number;
    }, {
        dropWeightScaler: number;
    }>>;
    readonly Unknown: z.ZodOptional<z.ZodObject<{
        /**
         * A scaling factor that is multiplied to the weight of the frog to affect
         * the probability of the frog being issued
         *
         * For example, if a feed has 3 frogs:
         *
         * * JungleFrog1's drop weight is 1
         * * JungleFrog2's drop weight is 2
         * * DesertFrog3's drop weight is 3
         *
         *  If the Jungle's dropWeightScaler is 2 and the Desert's
         *   dropWeightScaler is 1, then
         *
         * * JungleFrog1's probability of being issued is 2/9
         * * JungleFrog2's probability of being issued is 4/9
         * * DesertFrog3's probability of being issued is 3/9
         */
        dropWeightScaler: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dropWeightScaler: number;
    }, {
        dropWeightScaler: number;
    }>>;
    readonly Jungle: z.ZodOptional<z.ZodObject<{
        /**
         * A scaling factor that is multiplied to the weight of the frog to affect
         * the probability of the frog being issued
         *
         * For example, if a feed has 3 frogs:
         *
         * * JungleFrog1's drop weight is 1
         * * JungleFrog2's drop weight is 2
         * * DesertFrog3's drop weight is 3
         *
         *  If the Jungle's dropWeightScaler is 2 and the Desert's
         *   dropWeightScaler is 1, then
         *
         * * JungleFrog1's probability of being issued is 2/9
         * * JungleFrog2's probability of being issued is 4/9
         * * DesertFrog3's probability of being issued is 3/9
         */
        dropWeightScaler: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dropWeightScaler: number;
    }, {
        dropWeightScaler: number;
    }>>;
    readonly Desert: z.ZodOptional<z.ZodObject<{
        /**
         * A scaling factor that is multiplied to the weight of the frog to affect
         * the probability of the frog being issued
         *
         * For example, if a feed has 3 frogs:
         *
         * * JungleFrog1's drop weight is 1
         * * JungleFrog2's drop weight is 2
         * * DesertFrog3's drop weight is 3
         *
         *  If the Jungle's dropWeightScaler is 2 and the Desert's
         *   dropWeightScaler is 1, then
         *
         * * JungleFrog1's probability of being issued is 2/9
         * * JungleFrog2's probability of being issued is 4/9
         * * DesertFrog3's probability of being issued is 3/9
         */
        dropWeightScaler: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dropWeightScaler: number;
    }, {
        dropWeightScaler: number;
    }>>;
    readonly Swamp: z.ZodOptional<z.ZodObject<{
        /**
         * A scaling factor that is multiplied to the weight of the frog to affect
         * the probability of the frog being issued
         *
         * For example, if a feed has 3 frogs:
         *
         * * JungleFrog1's drop weight is 1
         * * JungleFrog2's drop weight is 2
         * * DesertFrog3's drop weight is 3
         *
         *  If the Jungle's dropWeightScaler is 2 and the Desert's
         *   dropWeightScaler is 1, then
         *
         * * JungleFrog1's probability of being issued is 2/9
         * * JungleFrog2's probability of being issued is 4/9
         * * DesertFrog3's probability of being issued is 3/9
         */
        dropWeightScaler: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dropWeightScaler: number;
    }, {
        dropWeightScaler: number;
    }>>;
    readonly TheCapital: z.ZodOptional<z.ZodObject<{
        /**
         * A scaling factor that is multiplied to the weight of the frog to affect
         * the probability of the frog being issued
         *
         * For example, if a feed has 3 frogs:
         *
         * * JungleFrog1's drop weight is 1
         * * JungleFrog2's drop weight is 2
         * * DesertFrog3's drop weight is 3
         *
         *  If the Jungle's dropWeightScaler is 2 and the Desert's
         *   dropWeightScaler is 1, then
         *
         * * JungleFrog1's probability of being issued is 2/9
         * * JungleFrog2's probability of being issued is 4/9
         * * DesertFrog3's probability of being issued is 3/9
         */
        dropWeightScaler: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dropWeightScaler: number;
    }, {
        dropWeightScaler: number;
    }>>;
    readonly PutridSwamp: z.ZodOptional<z.ZodObject<{
        /**
         * A scaling factor that is multiplied to the weight of the frog to affect
         * the probability of the frog being issued
         *
         * For example, if a feed has 3 frogs:
         *
         * * JungleFrog1's drop weight is 1
         * * JungleFrog2's drop weight is 2
         * * DesertFrog3's drop weight is 3
         *
         *  If the Jungle's dropWeightScaler is 2 and the Desert's
         *   dropWeightScaler is 1, then
         *
         * * JungleFrog1's probability of being issued is 2/9
         * * JungleFrog2's probability of being issued is 4/9
         * * DesertFrog3's probability of being issued is 3/9
         */
        dropWeightScaler: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dropWeightScaler: number;
    }, {
        dropWeightScaler: number;
    }>>;
    readonly CelestialPond: z.ZodOptional<z.ZodObject<{
        /**
         * A scaling factor that is multiplied to the weight of the frog to affect
         * the probability of the frog being issued
         *
         * For example, if a feed has 3 frogs:
         *
         * * JungleFrog1's drop weight is 1
         * * JungleFrog2's drop weight is 2
         * * DesertFrog3's drop weight is 3
         *
         *  If the Jungle's dropWeightScaler is 2 and the Desert's
         *   dropWeightScaler is 1, then
         *
         * * JungleFrog1's probability of being issued is 2/9
         * * JungleFrog2's probability of being issued is 4/9
         * * DesertFrog3's probability of being issued is 3/9
         */
        dropWeightScaler: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dropWeightScaler: number;
    }, {
        dropWeightScaler: number;
    }>>;
    readonly TheWrithingVoid: z.ZodOptional<z.ZodObject<{
        /**
         * A scaling factor that is multiplied to the weight of the frog to affect
         * the probability of the frog being issued
         *
         * For example, if a feed has 3 frogs:
         *
         * * JungleFrog1's drop weight is 1
         * * JungleFrog2's drop weight is 2
         * * DesertFrog3's drop weight is 3
         *
         *  If the Jungle's dropWeightScaler is 2 and the Desert's
         *   dropWeightScaler is 1, then
         *
         * * JungleFrog1's probability of being issued is 2/9
         * * JungleFrog2's probability of being issued is 4/9
         * * DesertFrog3's probability of being issued is 3/9
         */
        dropWeightScaler: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dropWeightScaler: number;
    }, {
        dropWeightScaler: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    readonly [x: number]: {
        dropWeightScaler: number;
    } | undefined;
    readonly Unknown?: {
        dropWeightScaler: number;
    } | undefined;
    readonly Jungle?: {
        dropWeightScaler: number;
    } | undefined;
    readonly Desert?: {
        dropWeightScaler: number;
    } | undefined;
    readonly Swamp?: {
        dropWeightScaler: number;
    } | undefined;
    readonly TheCapital?: {
        dropWeightScaler: number;
    } | undefined;
    readonly PutridSwamp?: {
        dropWeightScaler: number;
    } | undefined;
    readonly CelestialPond?: {
        dropWeightScaler: number;
    } | undefined;
    readonly TheWrithingVoid?: {
        dropWeightScaler: number;
    } | undefined;
}, {
    readonly [x: number]: {
        dropWeightScaler: number;
    } | undefined;
    readonly Unknown?: {
        dropWeightScaler: number;
    } | undefined;
    readonly Jungle?: {
        dropWeightScaler: number;
    } | undefined;
    readonly Desert?: {
        dropWeightScaler: number;
    } | undefined;
    readonly Swamp?: {
        dropWeightScaler: number;
    } | undefined;
    readonly TheCapital?: {
        dropWeightScaler: number;
    } | undefined;
    readonly PutridSwamp?: {
        dropWeightScaler: number;
    } | undefined;
    readonly CelestialPond?: {
        dropWeightScaler: number;
    } | undefined;
    readonly TheWrithingVoid?: {
        dropWeightScaler: number;
    } | undefined;
}>;
export type FrogCryptoFeedBiomeConfigs = z.infer<typeof FrogCryptoFeedBiomeConfigsSchema>;
/**
 * Schema for FrogCrypto specific feed interface
 */
export declare const IFrogCryptoFeedSchema: z.ZodObject<{
    /**
     * Whether this feed is discoverable in GET /feeds
     *
     * A feed can still be queried as GET /feeds/:feedId or polled as POST /feeds even if it is not discoverable
     * as long as the user knows the feed ID.
     * @default false
     */
    private: z.ZodBoolean;
    /**
     * Unix timestamp in seconds of when this feed will become inactive
     *
     * PCD can only be issued from this feed if it is active
     * @default 0 means the feed is inactive
     */
    activeUntil: z.ZodNumber;
    /**
     * How long to wait between each PCD issuance in seconds
     */
    cooldown: z.ZodNumber;
    /**
     * Map of configs for Biome(s) where PCDs can be issued from this feed
     */
    biomes: z.ZodObject<{
        readonly [x: number]: z.ZodOptional<z.ZodObject<{
            /**
             * A scaling factor that is multiplied to the weight of the frog to affect
             * the probability of the frog being issued
             *
             * For example, if a feed has 3 frogs:
             *
             * * JungleFrog1's drop weight is 1
             * * JungleFrog2's drop weight is 2
             * * DesertFrog3's drop weight is 3
             *
             *  If the Jungle's dropWeightScaler is 2 and the Desert's
             *   dropWeightScaler is 1, then
             *
             * * JungleFrog1's probability of being issued is 2/9
             * * JungleFrog2's probability of being issued is 4/9
             * * DesertFrog3's probability of being issued is 3/9
             */
            dropWeightScaler: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dropWeightScaler: number;
        }, {
            dropWeightScaler: number;
        }>>;
        readonly Unknown: z.ZodOptional<z.ZodObject<{
            /**
             * A scaling factor that is multiplied to the weight of the frog to affect
             * the probability of the frog being issued
             *
             * For example, if a feed has 3 frogs:
             *
             * * JungleFrog1's drop weight is 1
             * * JungleFrog2's drop weight is 2
             * * DesertFrog3's drop weight is 3
             *
             *  If the Jungle's dropWeightScaler is 2 and the Desert's
             *   dropWeightScaler is 1, then
             *
             * * JungleFrog1's probability of being issued is 2/9
             * * JungleFrog2's probability of being issued is 4/9
             * * DesertFrog3's probability of being issued is 3/9
             */
            dropWeightScaler: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dropWeightScaler: number;
        }, {
            dropWeightScaler: number;
        }>>;
        readonly Jungle: z.ZodOptional<z.ZodObject<{
            /**
             * A scaling factor that is multiplied to the weight of the frog to affect
             * the probability of the frog being issued
             *
             * For example, if a feed has 3 frogs:
             *
             * * JungleFrog1's drop weight is 1
             * * JungleFrog2's drop weight is 2
             * * DesertFrog3's drop weight is 3
             *
             *  If the Jungle's dropWeightScaler is 2 and the Desert's
             *   dropWeightScaler is 1, then
             *
             * * JungleFrog1's probability of being issued is 2/9
             * * JungleFrog2's probability of being issued is 4/9
             * * DesertFrog3's probability of being issued is 3/9
             */
            dropWeightScaler: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dropWeightScaler: number;
        }, {
            dropWeightScaler: number;
        }>>;
        readonly Desert: z.ZodOptional<z.ZodObject<{
            /**
             * A scaling factor that is multiplied to the weight of the frog to affect
             * the probability of the frog being issued
             *
             * For example, if a feed has 3 frogs:
             *
             * * JungleFrog1's drop weight is 1
             * * JungleFrog2's drop weight is 2
             * * DesertFrog3's drop weight is 3
             *
             *  If the Jungle's dropWeightScaler is 2 and the Desert's
             *   dropWeightScaler is 1, then
             *
             * * JungleFrog1's probability of being issued is 2/9
             * * JungleFrog2's probability of being issued is 4/9
             * * DesertFrog3's probability of being issued is 3/9
             */
            dropWeightScaler: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dropWeightScaler: number;
        }, {
            dropWeightScaler: number;
        }>>;
        readonly Swamp: z.ZodOptional<z.ZodObject<{
            /**
             * A scaling factor that is multiplied to the weight of the frog to affect
             * the probability of the frog being issued
             *
             * For example, if a feed has 3 frogs:
             *
             * * JungleFrog1's drop weight is 1
             * * JungleFrog2's drop weight is 2
             * * DesertFrog3's drop weight is 3
             *
             *  If the Jungle's dropWeightScaler is 2 and the Desert's
             *   dropWeightScaler is 1, then
             *
             * * JungleFrog1's probability of being issued is 2/9
             * * JungleFrog2's probability of being issued is 4/9
             * * DesertFrog3's probability of being issued is 3/9
             */
            dropWeightScaler: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dropWeightScaler: number;
        }, {
            dropWeightScaler: number;
        }>>;
        readonly TheCapital: z.ZodOptional<z.ZodObject<{
            /**
             * A scaling factor that is multiplied to the weight of the frog to affect
             * the probability of the frog being issued
             *
             * For example, if a feed has 3 frogs:
             *
             * * JungleFrog1's drop weight is 1
             * * JungleFrog2's drop weight is 2
             * * DesertFrog3's drop weight is 3
             *
             *  If the Jungle's dropWeightScaler is 2 and the Desert's
             *   dropWeightScaler is 1, then
             *
             * * JungleFrog1's probability of being issued is 2/9
             * * JungleFrog2's probability of being issued is 4/9
             * * DesertFrog3's probability of being issued is 3/9
             */
            dropWeightScaler: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dropWeightScaler: number;
        }, {
            dropWeightScaler: number;
        }>>;
        readonly PutridSwamp: z.ZodOptional<z.ZodObject<{
            /**
             * A scaling factor that is multiplied to the weight of the frog to affect
             * the probability of the frog being issued
             *
             * For example, if a feed has 3 frogs:
             *
             * * JungleFrog1's drop weight is 1
             * * JungleFrog2's drop weight is 2
             * * DesertFrog3's drop weight is 3
             *
             *  If the Jungle's dropWeightScaler is 2 and the Desert's
             *   dropWeightScaler is 1, then
             *
             * * JungleFrog1's probability of being issued is 2/9
             * * JungleFrog2's probability of being issued is 4/9
             * * DesertFrog3's probability of being issued is 3/9
             */
            dropWeightScaler: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dropWeightScaler: number;
        }, {
            dropWeightScaler: number;
        }>>;
        readonly CelestialPond: z.ZodOptional<z.ZodObject<{
            /**
             * A scaling factor that is multiplied to the weight of the frog to affect
             * the probability of the frog being issued
             *
             * For example, if a feed has 3 frogs:
             *
             * * JungleFrog1's drop weight is 1
             * * JungleFrog2's drop weight is 2
             * * DesertFrog3's drop weight is 3
             *
             *  If the Jungle's dropWeightScaler is 2 and the Desert's
             *   dropWeightScaler is 1, then
             *
             * * JungleFrog1's probability of being issued is 2/9
             * * JungleFrog2's probability of being issued is 4/9
             * * DesertFrog3's probability of being issued is 3/9
             */
            dropWeightScaler: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dropWeightScaler: number;
        }, {
            dropWeightScaler: number;
        }>>;
        readonly TheWrithingVoid: z.ZodOptional<z.ZodObject<{
            /**
             * A scaling factor that is multiplied to the weight of the frog to affect
             * the probability of the frog being issued
             *
             * For example, if a feed has 3 frogs:
             *
             * * JungleFrog1's drop weight is 1
             * * JungleFrog2's drop weight is 2
             * * DesertFrog3's drop weight is 3
             *
             *  If the Jungle's dropWeightScaler is 2 and the Desert's
             *   dropWeightScaler is 1, then
             *
             * * JungleFrog1's probability of being issued is 2/9
             * * JungleFrog2's probability of being issued is 4/9
             * * DesertFrog3's probability of being issued is 3/9
             */
            dropWeightScaler: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dropWeightScaler: number;
        }, {
            dropWeightScaler: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        readonly [x: number]: {
            dropWeightScaler: number;
        } | undefined;
        readonly Unknown?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Jungle?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Desert?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Swamp?: {
            dropWeightScaler: number;
        } | undefined;
        readonly TheCapital?: {
            dropWeightScaler: number;
        } | undefined;
        readonly PutridSwamp?: {
            dropWeightScaler: number;
        } | undefined;
        readonly CelestialPond?: {
            dropWeightScaler: number;
        } | undefined;
        readonly TheWrithingVoid?: {
            dropWeightScaler: number;
        } | undefined;
    }, {
        readonly [x: number]: {
            dropWeightScaler: number;
        } | undefined;
        readonly Unknown?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Jungle?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Desert?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Swamp?: {
            dropWeightScaler: number;
        } | undefined;
        readonly TheCapital?: {
            dropWeightScaler: number;
        } | undefined;
        readonly PutridSwamp?: {
            dropWeightScaler: number;
        } | undefined;
        readonly CelestialPond?: {
            dropWeightScaler: number;
        } | undefined;
        readonly TheWrithingVoid?: {
            dropWeightScaler: number;
        } | undefined;
    }>;
    /**
     * A list of secret codes that can be used to look up this feed
     */
    codes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    private: boolean;
    activeUntil: number;
    cooldown: number;
    biomes: {
        readonly [x: number]: {
            dropWeightScaler: number;
        } | undefined;
        readonly Unknown?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Jungle?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Desert?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Swamp?: {
            dropWeightScaler: number;
        } | undefined;
        readonly TheCapital?: {
            dropWeightScaler: number;
        } | undefined;
        readonly PutridSwamp?: {
            dropWeightScaler: number;
        } | undefined;
        readonly CelestialPond?: {
            dropWeightScaler: number;
        } | undefined;
        readonly TheWrithingVoid?: {
            dropWeightScaler: number;
        } | undefined;
    };
    codes?: string[] | undefined;
}, {
    private: boolean;
    activeUntil: number;
    cooldown: number;
    biomes: {
        readonly [x: number]: {
            dropWeightScaler: number;
        } | undefined;
        readonly Unknown?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Jungle?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Desert?: {
            dropWeightScaler: number;
        } | undefined;
        readonly Swamp?: {
            dropWeightScaler: number;
        } | undefined;
        readonly TheCapital?: {
            dropWeightScaler: number;
        } | undefined;
        readonly PutridSwamp?: {
            dropWeightScaler: number;
        } | undefined;
        readonly CelestialPond?: {
            dropWeightScaler: number;
        } | undefined;
        readonly TheWrithingVoid?: {
            dropWeightScaler: number;
        } | undefined;
    };
    codes?: string[] | undefined;
}>;
/**
 * A subset of `IFrogCryptoFeed` that is exposed to the client
 */
export declare const IFrogCryptoClientFeedSchema: z.ZodObject<{
    private: z.ZodBoolean;
    activeUntil: z.ZodNumber;
    cooldown: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    private: boolean;
    activeUntil: number;
    cooldown: number;
}, {
    private: boolean;
    activeUntil: number;
    cooldown: number;
}>;
/**
 * FrogCrypto specific feed configuration
 *
 * Note: It is important to ensure that the feed cannot be discovered by guessing the {@link Feed#id}
 */
export type FrogCryptoFeed = Feed<typeof EdDSAFrogPCDPackage> & z.infer<typeof IFrogCryptoFeedSchema>;
/**
 * FrogCrypto specific feed configuration that is exposed to the client
 */
export type FrogCryptoClientFeed = Feed<typeof EdDSAFrogPCDPackage> & z.infer<typeof IFrogCryptoClientFeedSchema>;
/**
 * DB schema for feed data
 */
export declare const FrogCryptoDbFeedDataSchema: z.ZodObject<{
    uuid: z.ZodString;
    feed: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        private: z.ZodBoolean;
        activeUntil: z.ZodNumber;
        cooldown: z.ZodNumber;
        biomes: z.ZodObject<{
            readonly [x: number]: z.ZodOptional<z.ZodObject<{
                /**
                 * A scaling factor that is multiplied to the weight of the frog to affect
                 * the probability of the frog being issued
                 *
                 * For example, if a feed has 3 frogs:
                 *
                 * * JungleFrog1's drop weight is 1
                 * * JungleFrog2's drop weight is 2
                 * * DesertFrog3's drop weight is 3
                 *
                 *  If the Jungle's dropWeightScaler is 2 and the Desert's
                 *   dropWeightScaler is 1, then
                 *
                 * * JungleFrog1's probability of being issued is 2/9
                 * * JungleFrog2's probability of being issued is 4/9
                 * * DesertFrog3's probability of being issued is 3/9
                 */
                dropWeightScaler: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                dropWeightScaler: number;
            }, {
                dropWeightScaler: number;
            }>>;
            readonly Unknown: z.ZodOptional<z.ZodObject<{
                /**
                 * A scaling factor that is multiplied to the weight of the frog to affect
                 * the probability of the frog being issued
                 *
                 * For example, if a feed has 3 frogs:
                 *
                 * * JungleFrog1's drop weight is 1
                 * * JungleFrog2's drop weight is 2
                 * * DesertFrog3's drop weight is 3
                 *
                 *  If the Jungle's dropWeightScaler is 2 and the Desert's
                 *   dropWeightScaler is 1, then
                 *
                 * * JungleFrog1's probability of being issued is 2/9
                 * * JungleFrog2's probability of being issued is 4/9
                 * * DesertFrog3's probability of being issued is 3/9
                 */
                dropWeightScaler: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                dropWeightScaler: number;
            }, {
                dropWeightScaler: number;
            }>>;
            readonly Jungle: z.ZodOptional<z.ZodObject<{
                /**
                 * A scaling factor that is multiplied to the weight of the frog to affect
                 * the probability of the frog being issued
                 *
                 * For example, if a feed has 3 frogs:
                 *
                 * * JungleFrog1's drop weight is 1
                 * * JungleFrog2's drop weight is 2
                 * * DesertFrog3's drop weight is 3
                 *
                 *  If the Jungle's dropWeightScaler is 2 and the Desert's
                 *   dropWeightScaler is 1, then
                 *
                 * * JungleFrog1's probability of being issued is 2/9
                 * * JungleFrog2's probability of being issued is 4/9
                 * * DesertFrog3's probability of being issued is 3/9
                 */
                dropWeightScaler: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                dropWeightScaler: number;
            }, {
                dropWeightScaler: number;
            }>>;
            readonly Desert: z.ZodOptional<z.ZodObject<{
                /**
                 * A scaling factor that is multiplied to the weight of the frog to affect
                 * the probability of the frog being issued
                 *
                 * For example, if a feed has 3 frogs:
                 *
                 * * JungleFrog1's drop weight is 1
                 * * JungleFrog2's drop weight is 2
                 * * DesertFrog3's drop weight is 3
                 *
                 *  If the Jungle's dropWeightScaler is 2 and the Desert's
                 *   dropWeightScaler is 1, then
                 *
                 * * JungleFrog1's probability of being issued is 2/9
                 * * JungleFrog2's probability of being issued is 4/9
                 * * DesertFrog3's probability of being issued is 3/9
                 */
                dropWeightScaler: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                dropWeightScaler: number;
            }, {
                dropWeightScaler: number;
            }>>;
            readonly Swamp: z.ZodOptional<z.ZodObject<{
                /**
                 * A scaling factor that is multiplied to the weight of the frog to affect
                 * the probability of the frog being issued
                 *
                 * For example, if a feed has 3 frogs:
                 *
                 * * JungleFrog1's drop weight is 1
                 * * JungleFrog2's drop weight is 2
                 * * DesertFrog3's drop weight is 3
                 *
                 *  If the Jungle's dropWeightScaler is 2 and the Desert's
                 *   dropWeightScaler is 1, then
                 *
                 * * JungleFrog1's probability of being issued is 2/9
                 * * JungleFrog2's probability of being issued is 4/9
                 * * DesertFrog3's probability of being issued is 3/9
                 */
                dropWeightScaler: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                dropWeightScaler: number;
            }, {
                dropWeightScaler: number;
            }>>;
            readonly TheCapital: z.ZodOptional<z.ZodObject<{
                /**
                 * A scaling factor that is multiplied to the weight of the frog to affect
                 * the probability of the frog being issued
                 *
                 * For example, if a feed has 3 frogs:
                 *
                 * * JungleFrog1's drop weight is 1
                 * * JungleFrog2's drop weight is 2
                 * * DesertFrog3's drop weight is 3
                 *
                 *  If the Jungle's dropWeightScaler is 2 and the Desert's
                 *   dropWeightScaler is 1, then
                 *
                 * * JungleFrog1's probability of being issued is 2/9
                 * * JungleFrog2's probability of being issued is 4/9
                 * * DesertFrog3's probability of being issued is 3/9
                 */
                dropWeightScaler: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                dropWeightScaler: number;
            }, {
                dropWeightScaler: number;
            }>>;
            readonly PutridSwamp: z.ZodOptional<z.ZodObject<{
                /**
                 * A scaling factor that is multiplied to the weight of the frog to affect
                 * the probability of the frog being issued
                 *
                 * For example, if a feed has 3 frogs:
                 *
                 * * JungleFrog1's drop weight is 1
                 * * JungleFrog2's drop weight is 2
                 * * DesertFrog3's drop weight is 3
                 *
                 *  If the Jungle's dropWeightScaler is 2 and the Desert's
                 *   dropWeightScaler is 1, then
                 *
                 * * JungleFrog1's probability of being issued is 2/9
                 * * JungleFrog2's probability of being issued is 4/9
                 * * DesertFrog3's probability of being issued is 3/9
                 */
                dropWeightScaler: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                dropWeightScaler: number;
            }, {
                dropWeightScaler: number;
            }>>;
            readonly CelestialPond: z.ZodOptional<z.ZodObject<{
                /**
                 * A scaling factor that is multiplied to the weight of the frog to affect
                 * the probability of the frog being issued
                 *
                 * For example, if a feed has 3 frogs:
                 *
                 * * JungleFrog1's drop weight is 1
                 * * JungleFrog2's drop weight is 2
                 * * DesertFrog3's drop weight is 3
                 *
                 *  If the Jungle's dropWeightScaler is 2 and the Desert's
                 *   dropWeightScaler is 1, then
                 *
                 * * JungleFrog1's probability of being issued is 2/9
                 * * JungleFrog2's probability of being issued is 4/9
                 * * DesertFrog3's probability of being issued is 3/9
                 */
                dropWeightScaler: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                dropWeightScaler: number;
            }, {
                dropWeightScaler: number;
            }>>;
            readonly TheWrithingVoid: z.ZodOptional<z.ZodObject<{
                /**
                 * A scaling factor that is multiplied to the weight of the frog to affect
                 * the probability of the frog being issued
                 *
                 * For example, if a feed has 3 frogs:
                 *
                 * * JungleFrog1's drop weight is 1
                 * * JungleFrog2's drop weight is 2
                 * * DesertFrog3's drop weight is 3
                 *
                 *  If the Jungle's dropWeightScaler is 2 and the Desert's
                 *   dropWeightScaler is 1, then
                 *
                 * * JungleFrog1's probability of being issued is 2/9
                 * * JungleFrog2's probability of being issued is 4/9
                 * * DesertFrog3's probability of being issued is 3/9
                 */
                dropWeightScaler: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                dropWeightScaler: number;
            }, {
                dropWeightScaler: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            readonly [x: number]: {
                dropWeightScaler: number;
            } | undefined;
            readonly Unknown?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Jungle?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Desert?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Swamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheCapital?: {
                dropWeightScaler: number;
            } | undefined;
            readonly PutridSwamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly CelestialPond?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheWrithingVoid?: {
                dropWeightScaler: number;
            } | undefined;
        }, {
            readonly [x: number]: {
                dropWeightScaler: number;
            } | undefined;
            readonly Unknown?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Jungle?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Desert?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Swamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheCapital?: {
                dropWeightScaler: number;
            } | undefined;
            readonly PutridSwamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly CelestialPond?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheWrithingVoid?: {
                dropWeightScaler: number;
            } | undefined;
        }>;
        codes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        private: boolean;
        activeUntil: number;
        cooldown: number;
        biomes: {
            readonly [x: number]: {
                dropWeightScaler: number;
            } | undefined;
            readonly Unknown?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Jungle?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Desert?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Swamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheCapital?: {
                dropWeightScaler: number;
            } | undefined;
            readonly PutridSwamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly CelestialPond?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheWrithingVoid?: {
                dropWeightScaler: number;
            } | undefined;
        };
        description: string;
        name: string;
        codes?: string[] | undefined;
    }, {
        private: boolean;
        activeUntil: number;
        cooldown: number;
        biomes: {
            readonly [x: number]: {
                dropWeightScaler: number;
            } | undefined;
            readonly Unknown?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Jungle?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Desert?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Swamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheCapital?: {
                dropWeightScaler: number;
            } | undefined;
            readonly PutridSwamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly CelestialPond?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheWrithingVoid?: {
                dropWeightScaler: number;
            } | undefined;
        };
        description: string;
        name: string;
        codes?: string[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    uuid: string;
    feed: {
        private: boolean;
        activeUntil: number;
        cooldown: number;
        biomes: {
            readonly [x: number]: {
                dropWeightScaler: number;
            } | undefined;
            readonly Unknown?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Jungle?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Desert?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Swamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheCapital?: {
                dropWeightScaler: number;
            } | undefined;
            readonly PutridSwamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly CelestialPond?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheWrithingVoid?: {
                dropWeightScaler: number;
            } | undefined;
        };
        description: string;
        name: string;
        codes?: string[] | undefined;
    };
}, {
    uuid: string;
    feed: {
        private: boolean;
        activeUntil: number;
        cooldown: number;
        biomes: {
            readonly [x: number]: {
                dropWeightScaler: number;
            } | undefined;
            readonly Unknown?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Jungle?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Desert?: {
                dropWeightScaler: number;
            } | undefined;
            readonly Swamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheCapital?: {
                dropWeightScaler: number;
            } | undefined;
            readonly PutridSwamp?: {
                dropWeightScaler: number;
            } | undefined;
            readonly CelestialPond?: {
                dropWeightScaler: number;
            } | undefined;
            readonly TheWrithingVoid?: {
                dropWeightScaler: number;
            } | undefined;
        };
        description: string;
        name: string;
        codes?: string[] | undefined;
    };
}>;
export type FrogCryptoDbFeedData = z.infer<typeof FrogCryptoDbFeedDataSchema>;
/**
 * The prototype specification for frog creation
 *
 * This represents the raw specification of a frog, which is then used to generate the {@link IFrogData} in the {@link EdDSAFrogPCD}. Some attributes are optional and will be randomly selected if not specified.
 * This mirrors the specification from the design spreadsheet and is wrapped as {@link FrogCryptoDbFrogData} to store in the database.
 * See {@link FrogCryptoFeed} for the feed configuration and how Frog prototypes are selected.
 *
 * Undefined numeric attribute means that the value will be randomly selected from [0, 10].
 */
export declare const FrogCryptoFrogDataSchema: z.ZodObject<{
    id: z.ZodNumber;
    uuid: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    biome: z.ZodString;
    rarity: z.ZodString;
    /**
     * undefined means the temperament will be randomly selected
     */
    temperament: z.ZodOptional<z.ZodString>;
    drop_weight: z.ZodNumber;
    jump_min: z.ZodOptional<z.ZodNumber>;
    jump_max: z.ZodOptional<z.ZodNumber>;
    speed_min: z.ZodOptional<z.ZodNumber>;
    speed_max: z.ZodOptional<z.ZodNumber>;
    intelligence_min: z.ZodOptional<z.ZodNumber>;
    intelligence_max: z.ZodOptional<z.ZodNumber>;
    beauty_min: z.ZodOptional<z.ZodNumber>;
    beauty_max: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    description: string;
    uuid: string;
    name: string;
    id: number;
    biome: string;
    rarity: string;
    drop_weight: number;
    temperament?: string | undefined;
    jump_min?: number | undefined;
    jump_max?: number | undefined;
    speed_min?: number | undefined;
    speed_max?: number | undefined;
    intelligence_min?: number | undefined;
    intelligence_max?: number | undefined;
    beauty_min?: number | undefined;
    beauty_max?: number | undefined;
}, {
    description: string;
    uuid: string;
    name: string;
    id: number;
    biome: string;
    rarity: string;
    drop_weight: number;
    temperament?: string | undefined;
    jump_min?: number | undefined;
    jump_max?: number | undefined;
    speed_min?: number | undefined;
    speed_max?: number | undefined;
    intelligence_min?: number | undefined;
    intelligence_max?: number | undefined;
    beauty_min?: number | undefined;
    beauty_max?: number | undefined;
}>;
export type FrogCryptoFrogData = z.infer<typeof FrogCryptoFrogDataSchema>;
/**
 * DB schema for frog data
 */
export interface FrogCryptoDbFrogData {
    id: number;
    uuid: string;
    frog: Omit<FrogCryptoFrogData, "id" | "uuid">;
}
/**
 * All FrogCrypto PCDs are stored in a folder named "FrogCrypto".
 */
export declare const FrogCryptoFolderName = "FrogCrypto";
/**
 * User score data and computed rank
 */
export interface FrogCryptoScore {
    semaphore_id_hash: string;
    telegram_username?: string;
    has_telegram_username: boolean;
    score: number;
    rank: number;
}
/**
 * A subset of frog attributes relevant in the DEX
 */
export interface DexFrog {
    id: number;
    rarity: Rarity;
}
//# sourceMappingURL=FrogCrypto.d.ts.map