import { SerializedPCD } from "@pcd/pcd-types";
export declare function zupassPopupSetup(): Promise<string | undefined>;
/**
 * Open up a Zupass popup window on a local popup page, which will redirect to
 * Zupass. Once the action is complete, Zupass will redirect back, and the
 * local page will send a message to its opener and close itself. See
 * {@link zupassPopupSetup} and {@link receiveZupassPopupMessage}.
 *
 * @param {string} popupUrl is a URL to the local page that hosts some
 * JavaScript calling {@link zupassPopupSetup}
 * @param {string} proofUrl is a URL pointing to Zupass, and should be
 * generated using the construct*url() functions in ../PassportInterface.ts
 */
export declare function openZupassPopup(popupUrl: string, proofUrl: string): Promise<Window | null>;
/**
 * Opens a Zupass popup window to a given URL. Can be used to open Zupass
 * directly, allowing Zupass to send a message back and bypassing the need for
 * a special page to redirect.
 */
export declare function openZupassPopupUrl(url: string): Promise<Window | null>;
/**
 * The popup message can contain either an encoded PCD or encoded pending PCD.
 */
export type PopupMessageResult = {
    type: "pcd";
    pcdStr: string;
} | {
    type: "multi-pcd";
    pcds: SerializedPCD[];
} | {
    type: "pendingPcd";
    pendingPcdStr: string;
} | {
    type: "aborted";
};
/**
 * Asynchronous function that listens for PCDs and PendingPCDs from a Zupass
 * popup window using message passing and event listeners.
 */
export declare function receiveZupassPopupMessage(signal: AbortSignal): Promise<PopupMessageResult>;
export type PopupActionResult = PopupMessageResult | {
    type: "popupClosed";
} | {
    type: "popupBlocked";
};
/**
 * An asynchronous function that opens a Zupass popup window, and returns a
 * {@link PopupActionResult} containing either:
 * - An encoded PCD
 * - An encoded pending PCD
 * - An indication that the popup was closed with no result
 * - An indication that the popup was blocked from opening
 *
 * By detecting popup blockers and the popup being closed without result, this
 * offers broader functionality than calling {@link openZupassPopupWithLocalRedirect} and
 * {@link receiveZupassPopupMessage} separately. It is added as a new API to
 * avoid breaking backwards-compatibility for existing code.
 */
export declare function zupassPopupExecute(proofUrl: string, popupUrl?: string): Promise<PopupActionResult>;
//# sourceMappingURL=core.d.ts.map