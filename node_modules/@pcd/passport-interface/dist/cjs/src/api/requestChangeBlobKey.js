"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestChangeBlobKey = void 0;
const url_join_1 = __importDefault(require("url-join"));
const apiResult_1 = require("./apiResult");
const makeRequest_1 = require("./makeRequest");
/**
 * Updates the blob key that encrypts a user's storage and updates the salt used to
 * generate the preimage to that blob key. If this request succeeds, the user's storage
 * is no longer accessible with the old blob key and the user's salt is guaranteed to
 * be different.
 *
 * Never rejects. All information encoded in the resolved response.
 */
async function requestChangeBlobKey(zupassServerUrl, oldBlobKey, newBlobKey, uuid, newSalt, encryptedStorage, knownRevision, credential) {
    return (0, makeRequest_1.httpPost)((0, url_join_1.default)(zupassServerUrl, `/sync/v3/changeBlobKey`), {
        onValue: async (resText) => ({
            value: JSON.parse(resText),
            success: true
        }),
        onError: apiResult_1.onNamedAPIError
    }, {
        oldBlobKey,
        newBlobKey,
        newSalt,
        encryptedBlob: JSON.stringify(encryptedStorage),
        uuid,
        knownRevision,
        pcd: credential
    });
}
exports.requestChangeBlobKey = requestChangeBlobKey;
