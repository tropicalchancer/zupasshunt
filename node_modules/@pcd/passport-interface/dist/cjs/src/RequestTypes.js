"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailUpdateError = exports.PipelineEmailType = exports.isPerDayBadge = exports.ISSUANCE_STRING = exports.KnownPublicKeyType = exports.PipelineLogLevel = exports.KnownTicketGroup = void 0;
/**
 * Supported ticket groups for known tickets. This is based on pattern-matching
 * of event ID, product ID, and signing key.
 */
var KnownTicketGroup;
(function (KnownTicketGroup) {
    KnownTicketGroup["Devconnect23"] = "Devconnect23";
    KnownTicketGroup["Zuzalu23"] = "Zuzalu23";
    KnownTicketGroup["Zuconnect23"] = "Zuconnect23";
    KnownTicketGroup["Other"] = "Other";
})(KnownTicketGroup || (exports.KnownTicketGroup = KnownTicketGroup = {}));
var PipelineLogLevel;
(function (PipelineLogLevel) {
    PipelineLogLevel["Info"] = "Info";
    PipelineLogLevel["Warning"] = "Warning";
    PipelineLogLevel["Error"] = "Error";
})(PipelineLogLevel || (exports.PipelineLogLevel = PipelineLogLevel = {}));
/**
 * For known tickets, this is the type of the public key.
 * Possibly this information is redundant, but it seems useful to be
 * explicit about the type of key used.
 */
var KnownPublicKeyType;
(function (KnownPublicKeyType) {
    KnownPublicKeyType["EdDSA"] = "eddsa";
    KnownPublicKeyType["RSA"] = "rsa";
})(KnownPublicKeyType || (exports.KnownPublicKeyType = KnownPublicKeyType = {}));
/**
 * The string the client must sign with the user's semaphore identity
 * in order to be able to request the PCDs that the server wants to
 * issue the user.
 */
exports.ISSUANCE_STRING = "Issue me PCDs please.";
function isPerDayBadge(badge) {
    return badge.maxPerDay !== undefined;
}
exports.isPerDayBadge = isPerDayBadge;
var PipelineEmailType;
(function (PipelineEmailType) {
    PipelineEmailType["EsmeraldaOneClick"] = "EsmeraldaOneClick";
})(PipelineEmailType || (exports.PipelineEmailType = PipelineEmailType = {}));
var EmailUpdateError;
(function (EmailUpdateError) {
    EmailUpdateError["InvalidCredential"] = "InvalidCredential";
    EmailUpdateError["InvalidConfirmationCode"] = "InvalidConfirmationCode";
    EmailUpdateError["EmailAlreadyRegistered"] = "EmailAlreadyRegistered";
    EmailUpdateError["CantDeleteOnlyEmail"] = "CantDeleteOnlyEmail";
    EmailUpdateError["CantChangeWrongOldEmail"] = "CantChangeWrongOldEmail";
    EmailUpdateError["CantChangeWhenMultipleEmails"] = "CantChangeWhenMultipleEmails";
    EmailUpdateError["EmailNotAssociatedWithThisAccount"] = "EmailNotAssociatedWithThisAccount";
    EmailUpdateError["UserNotFound"] = "UserNotFound";
    EmailUpdateError["InvalidInput"] = "InvalidInput";
    EmailUpdateError["TooManyEmails"] = "TooManyEmails";
    EmailUpdateError["Unknown"] = "Unknown";
})(EmailUpdateError || (exports.EmailUpdateError = EmailUpdateError = {}));
