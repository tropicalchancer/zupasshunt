"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericPretixCheckinListSchema = exports.GenericPretixProductCategorySchema = exports.GenericPretixEventSettingsSchema = exports.GenericPretixEventSchema = exports.GenericPretixProductSchema = exports.GenericPretixOrderSchema = exports.GenericPretixI18MapSchema = exports.getI18nString = void 0;
const zod_1 = require("zod");
/**
 * Return an English-language string if one exists, otherwise the first
 */
function getI18nString(map) {
    return map["en"] ?? Object.values(map)[0];
}
exports.getI18nString = getI18nString;
/**
 * Pretix API types
 *
 * A Zod schema is used to ensure that the data has the expected form.
 * Clients may do additional validation, for instance to ensure that events
 * have the expected products, or that event settings match those that we
 * require. Those checks are not part of the schema.
 *
 * The comments below are copied from the original Devconnect Pretix API
 * client.
 */
exports.GenericPretixI18MapSchema = zod_1.z.record(zod_1.z.string());
// This records when an attendee was checked in
const GenericPretixCheckinSchema = zod_1.z.object({
    datetime: zod_1.z.string(),
    type: zod_1.z.enum(["entry", "exit"])
});
// This records all attendee answers to questions that they
// filled in when purchasing their ticket
const GenericPretixAnswerSchema = zod_1.z.object({
    question: zod_1.z.number(),
    answer: zod_1.z.string(),
    question_identifier: zod_1.z.string(),
    options: zod_1.z.array(zod_1.z.number()),
    option_identifiers: zod_1.z.array(zod_1.z.string())
});
// Unclear why this is called a "position" rather than a ticket.
const GenericPretixPositionSchema = zod_1.z.object({
    id: zod_1.z.number(),
    order: zod_1.z.string(), // "Q0BHN"
    positionid: zod_1.z.number(),
    item: zod_1.z.number(),
    price: zod_1.z.string(),
    attendee_name: zod_1.z.string().optional().nullable(), // first and last
    attendee_email: zod_1.z.string().toLowerCase().trim().nullable(),
    subevent: zod_1.z.number().nullable(),
    secret: zod_1.z.string(),
    checkins: zod_1.z.array(GenericPretixCheckinSchema),
    answers: zod_1.z.array(GenericPretixAnswerSchema).optional()
});
// A Pretix order. For our purposes, each order contains one ticket.
exports.GenericPretixOrderSchema = zod_1.z.object({
    code: zod_1.z.string(), // "Q0BHN"
    status: zod_1.z.string(), // "p"
    testmode: zod_1.z.boolean(),
    secret: zod_1.z.string(),
    name: zod_1.z.string().nullable().optional(),
    email: zod_1.z.string().toLowerCase().trim(),
    positions: zod_1.z.array(GenericPretixPositionSchema) // should have exactly one
});
exports.GenericPretixProductSchema = zod_1.z.object({
    id: zod_1.z.number(), // corresponds to "item" field in GenericPretixPosition
    category: zod_1.z.number().optional().nullable(),
    admission: zod_1.z.boolean(),
    personalized: zod_1.z.boolean(),
    generate_tickets: zod_1.z.boolean().nullable().optional(),
    name: exports.GenericPretixI18MapSchema
});
exports.GenericPretixEventSchema = zod_1.z.object({
    slug: zod_1.z.string(), // corresponds to "event_id" field in our db
    name: exports.GenericPretixI18MapSchema
});
exports.GenericPretixEventSettingsSchema = zod_1.z.object({
    // These settings control whether individual attendees must have
    // email addresses specified.
    // Corresponds to the "Ask for email addresses per ticket" setting
    // in the "Customer and attendee data" section of event settings
    // in the Pretix UI.
    attendee_emails_asked: zod_1.z.boolean(),
    attendee_emails_required: zod_1.z.boolean()
});
/**
 * All tickets must be configured as "personalized", with the exception of
 * "add-ons", and an add-on is recognized by its category. The use-case
 * for non-personalized add-on tickets was Devconnect towels.
 *
 * To date, we only care about categories for the purpose of ensuring that
 * non-personalized tickets are, indeed, add-ons. No category data is persisted,
 * as it's used only for validation.
 *
 * Category API docs: https://docs.pretix.eu/en/latest/api/resources/categories.html
 *
 * See #1119 for original implementation.
 */
exports.GenericPretixProductCategorySchema = zod_1.z.object({
    id: zod_1.z.number(),
    is_addon: zod_1.z.boolean()
    // TODO: load category name
});
// Each event has one or more check-in lists
// We only care about these because we need the list ID for check-in sync
exports.GenericPretixCheckinListSchema = zod_1.z.object({
    id: zod_1.z.number(),
    name: zod_1.z.string()
});
