"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSemaphoreGroupProof = exports.openGroupMembershipPopup = void 0;
const pcd_types_1 = require("@pcd/pcd-types");
const semaphore_group_pcd_1 = require("@pcd/semaphore-group-pcd");
const semaphore_identity_pcd_1 = require("@pcd/semaphore-identity-pcd");
const util_1 = require("@pcd/util");
const react_1 = require("react");
const requestSemaphoreGroup_1 = require("./api/requestSemaphoreGroup");
const PassportInterface_1 = require("./PassportInterface");
const core_1 = require("./PassportPopup/core");
const SerializedPCDIntegration_1 = require("./SerializedPCDIntegration");
/**
 * Opens a Zupass popup to generate a Zuzalu membership proof.
 *
 * @param urlToZupassClient URL of the Zupass client
 * @param popupUrl Route where the useZupassPopupSetup hook is being served from
 * @param urlToSemaphoreGroup URL where Zuzalu semaphore group is being served from
 * @param originalSiteName Name of site requesting proof
 * @param signal Optional signal that user is anonymously attesting to
 * @param externalNullifier Optional unique identifier for this SemaphoreGroupPCD
 */
function openGroupMembershipPopup(urlToZupassClient, popupUrl, urlToSemaphoreGroup, originalSiteName, signal, externalNullifier) {
    const proofUrl = (0, PassportInterface_1.constructZupassPcdGetRequestUrl)(urlToZupassClient, popupUrl, semaphore_group_pcd_1.SemaphoreGroupPCDPackage.name, {
        externalNullifier: {
            argumentType: pcd_types_1.ArgumentTypeName.BigInt,
            userProvided: false,
            value: externalNullifier ??
                (0, util_1.generateSnarkMessageHash)(originalSiteName).toString()
        },
        group: {
            argumentType: pcd_types_1.ArgumentTypeName.Object,
            userProvided: false,
            remoteUrl: urlToSemaphoreGroup
        },
        identity: {
            argumentType: pcd_types_1.ArgumentTypeName.PCD,
            pcdType: semaphore_identity_pcd_1.SemaphoreIdentityPCDPackage.name,
            value: undefined,
            userProvided: true
        },
        signal: {
            argumentType: pcd_types_1.ArgumentTypeName.BigInt,
            userProvided: false,
            value: signal ?? "1"
        }
    }, {
        title: "Zuzalu Anon Auth",
        description: originalSiteName
    });
    (0, core_1.openZupassPopup)(popupUrl, proofUrl);
}
exports.openGroupMembershipPopup = openGroupMembershipPopup;
/**
 * React hook which can be used on 3rd party application websites that
 * parses and verifies a PCD representing a Semaphore group membership proof.
 * Params match those used in openZuzaluMembershipPopup.
 */
function useSemaphoreGroupProof(pcdStr, semaphoreGroupUrl, originalSiteName, onVerified, externalNullifier) {
    const semaphoreGroupPCD = (0, SerializedPCDIntegration_1.useSerializedPCD)(semaphore_group_pcd_1.SemaphoreGroupPCDPackage, pcdStr);
    const [error, setError] = (0, react_1.useState)();
    const [semaphoreGroup, setGroup] = (0, react_1.useState)();
    const loadSemaphoreGroup = (0, react_1.useCallback)(async () => {
        if (!semaphoreGroupPCD)
            return;
        const groupResult = await (0, requestSemaphoreGroup_1.requestSemaphoreGroup)(semaphoreGroupUrl);
        if (groupResult.success) {
            setGroup(groupResult.value);
        }
        else {
            setError(groupResult.error);
        }
    }, [semaphoreGroupPCD, semaphoreGroupUrl]);
    (0, react_1.useEffect)(() => {
        loadSemaphoreGroup();
    }, [loadSemaphoreGroup]);
    (0, react_1.useEffect)(() => {
        if (semaphoreGroupPCD && semaphoreGroup) {
            const proofExternalNullifier = externalNullifier ??
                (0, util_1.generateSnarkMessageHash)(originalSiteName).toString();
            verifyProof(semaphoreGroupPCD, semaphoreGroup, proofExternalNullifier).then(onVerified);
        }
    }, [
        semaphoreGroupPCD,
        semaphoreGroup,
        externalNullifier,
        originalSiteName,
        onVerified
    ]);
    return {
        proof: semaphoreGroupPCD,
        group: semaphoreGroup,
        error
    };
}
exports.useSemaphoreGroupProof = useSemaphoreGroupProof;
async function verifyProof(pcd, serializedExpectedGroup, externalNullifier) {
    const { verify } = semaphore_group_pcd_1.SemaphoreGroupPCDPackage;
    const verified = await verify(pcd);
    if (!verified)
        return false;
    // verify the claim is for the correct externalNullifier and group
    const sameExternalNullifier = pcd.claim.externalNullifier === externalNullifier;
    const expectedGroup = await (0, semaphore_group_pcd_1.deserializeSemaphoreGroup)(serializedExpectedGroup);
    const sameRoot = expectedGroup.root.toString() === pcd.claim.merkleRoot;
    return sameExternalNullifier && sameRoot;
}
