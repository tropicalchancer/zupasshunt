"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSemaphoreSignatureProof = exports.openSignedZuzaluSignInPopup = exports.openSignedZuzaluUUIDPopup = exports.openSemaphoreSignaturePopup = void 0;
const pcd_types_1 = require("@pcd/pcd-types");
const semaphore_identity_pcd_1 = require("@pcd/semaphore-identity-pcd");
const semaphore_signature_pcd_1 = require("@pcd/semaphore-signature-pcd");
const react_1 = require("react");
const PassportInterface_1 = require("./PassportInterface");
const core_1 = require("./PassportPopup/core");
const SerializedPCDIntegration_1 = require("./SerializedPCDIntegration");
/**
 * Opens a Zupass popup to generate a Semaphore signature proof.
 *
 * @param urlToZupassClient URL of the Zupass client
 * @param popupUrl Route where the useZupassPopupSetup hook is being served from
 * @param messageToSign Message being attested to
 * @param proveOnServer Boolean indicating whether proof should be generated on server
 */
function openSemaphoreSignaturePopup(urlToZupassClient, popupUrl, messageToSign, proveOnServer) {
    const proofUrl = (0, PassportInterface_1.constructZupassPcdGetRequestUrl)(urlToZupassClient, popupUrl, semaphore_signature_pcd_1.SemaphoreSignaturePCDPackage.name, {
        identity: {
            argumentType: pcd_types_1.ArgumentTypeName.PCD,
            pcdType: semaphore_identity_pcd_1.SemaphoreIdentityPCDPackage.name,
            value: undefined,
            userProvided: true
        },
        signedMessage: {
            argumentType: pcd_types_1.ArgumentTypeName.String,
            value: messageToSign,
            userProvided: false
        }
    }, {
        proveOnServer: proveOnServer
    });
    (0, core_1.openZupassPopup)(popupUrl, proofUrl);
}
exports.openSemaphoreSignaturePopup = openSemaphoreSignaturePopup;
/**
 * WARNING: Deprecated for sign-in purposes!
 *
 * Opens a Zupass popup to generate a Semaphore signature proof on the user's
 * Zuzalu DB uuid, which can then be used to fetch user details from the Zupass
 * server. Built specifically for Zuzalu apps.
 *
 * @param urlToZupassClient URL of the Zupass client
 * @param popupUrl Route where the useZupassPopupSetup hook is being served from
 * @param originalSiteName Name of site requesting proof
 *
 * @deprecated
 */
function openSignedZuzaluUUIDPopup(urlToZupassClient, popupUrl, originalSiteName) {
    const proofUrl = (0, PassportInterface_1.constructZupassPcdGetRequestUrl)(urlToZupassClient, popupUrl, semaphore_signature_pcd_1.SemaphoreSignaturePCDPackage.name, {
        identity: {
            argumentType: pcd_types_1.ArgumentTypeName.PCD,
            pcdType: semaphore_identity_pcd_1.SemaphoreIdentityPCDPackage.name,
            value: undefined,
            userProvided: true
        },
        signedMessage: {
            argumentType: pcd_types_1.ArgumentTypeName.String,
            userProvided: true,
            value: undefined
        }
    }, {
        title: "Zuzalu Auth",
        description: originalSiteName
    });
    (0, core_1.openZupassPopup)(popupUrl, proofUrl);
}
exports.openSignedZuzaluUUIDPopup = openSignedZuzaluUUIDPopup;
/**
 * Opens a Zupass popup to generate a Semaphore signature proof on the user's
 * Zuzalu DB uuid and website referer, which can then be used to fetch user details
 * from the Zupass server, and ensure that the sign in signature was meant for this
 * website. Built specifically for Zuzalu apps.
 *
 * @param zupassClientUrl URL of the Zupass client
 * @param popupUrl Route where the useZupassPopupSetup hook is being served from
 * @param originalSiteName Name of site requesting proof
 */
function openSignedZuzaluSignInPopup(zupassClientUrl, popupUrl, originalSiteName) {
    const proofUrl = (0, PassportInterface_1.constructZupassPcdGetRequestUrl)(zupassClientUrl, popupUrl, semaphore_signature_pcd_1.SemaphoreSignaturePCDPackage.name, {
        identity: {
            argumentType: pcd_types_1.ArgumentTypeName.PCD,
            pcdType: semaphore_identity_pcd_1.SemaphoreIdentityPCDPackage.name,
            value: undefined,
            userProvided: true
        },
        signedMessage: {
            argumentType: pcd_types_1.ArgumentTypeName.String
        }
    }, {
        title: "Zuzalu Auth",
        description: originalSiteName,
        signIn: true
    });
    (0, core_1.openZupassPopup)(popupUrl, proofUrl);
}
exports.openSignedZuzaluSignInPopup = openSignedZuzaluSignInPopup;
/**
 * React hook which can be used on 3rd party application websites that
 * parses and verifies a PCD representing a Semaphore signature proof.
 */
function useSemaphoreSignatureProof(pcdStr, onVerified) {
    const semaphoreSignaturePCD = (0, SerializedPCDIntegration_1.useSerializedPCD)(semaphore_signature_pcd_1.SemaphoreSignaturePCDPackage, pcdStr);
    (0, react_1.useEffect)(() => {
        if (semaphoreSignaturePCD) {
            const { verify } = semaphore_signature_pcd_1.SemaphoreSignaturePCDPackage;
            verify(semaphoreSignaturePCD).then(onVerified);
        }
    }, [semaphoreSignaturePCD, onVerified]);
    return {
        signatureProof: semaphoreSignaturePCD
    };
}
exports.useSemaphoreSignatureProof = useSemaphoreSignatureProof;
