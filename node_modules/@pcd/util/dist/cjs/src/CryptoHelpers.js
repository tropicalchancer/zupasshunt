"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRandomValues = void 0;
const crypto_1 = __importDefault(require("crypto"));
const Environment_1 = require("./Environment");
// The 'crypto' variable provides access to the functions defined
// in the standard Web Crypto API (https://www.w3.org/TR/WebCryptoAPI).
let crypto;
/**
 * Initialize the 'crypto' variable with an implementation that
 * is compatible with the Web Crypto API standard in both
 * browser and Node.js environments, requiring no additional
 * polyfills or code.
 * This code is compatible with Node.js < v18 too.
 */
function initCryptoAPI() {
    if (!crypto) {
        if ((0, Environment_1.isBrowser)()) {
            crypto = globalThis.crypto;
        }
        else if ((0, Environment_1.isNode)()) {
            crypto = crypto_1.default.webcrypto;
        }
        else {
            throw new Error("Crypto API is not defined");
        }
    }
    return crypto;
}
/**
 * Provide cryptographically strong random values.
 * @param numberOfBytes Number of bytes of the random value.
 * @returns Random value.
 */
function getRandomValues(numberOfBytes) {
    const crypto = initCryptoAPI();
    return crypto.getRandomValues(new Uint8Array(numberOfBytes));
}
exports.getRandomValues = getRandomValues;
