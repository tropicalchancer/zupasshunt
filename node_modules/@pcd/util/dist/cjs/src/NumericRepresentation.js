"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.booleanToBigInt = exports.hexToBigInt = exports.numberToBigInt = exports.uuidToBigInt = exports.decStringToBigIntToUuid = exports.fromHexString = exports.toHexString = void 0;
const buffer_1 = require("buffer");
const uuid_1 = require("uuid");
/**
 * Converts a byte array to a hex string.  Opposite of fromHexString().
 */
function toHexString(bytes) {
    return buffer_1.Buffer.from(bytes).toString("hex");
}
exports.toHexString = toHexString;
/**
 * Converts a hex string to a byte-array.  Opposite of toHexString().
 */
function fromHexString(hexString) {
    return buffer_1.Buffer.from(hexString, "hex");
}
exports.fromHexString = fromHexString;
/**
 * Converts a number (as decimal string) to a UUID (as string) in the
 * format of uuid.stringify.
 */
function decStringToBigIntToUuid(value) {
    let hexStr = BigInt(value).toString(16);
    while (hexStr.length < 32)
        hexStr = "0" + hexStr;
    const buf = buffer_1.Buffer.from(hexStr, "hex");
    return (0, uuid_1.stringify)(buf);
}
exports.decStringToBigIntToUuid = decStringToBigIntToUuid;
/**
 * Converts a UUID string into a bigint.
 */
function uuidToBigInt(v) {
    // a uuid is just a particular representation of 16 bytes
    const bytes = (0, uuid_1.parse)(v);
    const hex = "0x" + buffer_1.Buffer.from(bytes).toString("hex");
    return BigInt(hex);
}
exports.uuidToBigInt = uuidToBigInt;
/**
 * Converts a native number to a bigint.
 */
function numberToBigInt(v) {
    return BigInt(v);
}
exports.numberToBigInt = numberToBigInt;
/**
 * Converts a hex number to a bigint.
 */
function hexToBigInt(v) {
    if (!v.startsWith("0x")) {
        v = "0x" + v;
    }
    return BigInt(v);
}
exports.hexToBigInt = hexToBigInt;
/**
 * Converts a boolean to a bigint value of 0 or 1.
 */
function booleanToBigInt(v) {
    return BigInt(v ? 1 : 0);
}
exports.booleanToBigInt = booleanToBigInt;
