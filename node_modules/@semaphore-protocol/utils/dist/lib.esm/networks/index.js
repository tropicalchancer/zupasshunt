/**
 * @module @semaphore-protocol/utils
 * @version 4.9.2
 * @file A library to provide utility functions to the other Semaphore packages.
 * @copyright Ethereum Foundation 2025
 * @license MIT
 * @see [Github]{@link https://github.com/semaphore-protocol/semaphore/tree/main/packages/utils}
*/
import deployedContracts from './deployed-contracts.json.js';
import supportedNetworks from './supported-networks.js';

/**
 * @module Networks
 * This module provides a collection of utility functions to provide the other internal
 * packages and developers with information on deployed contracts and networks supported
 * by Semaphore.
 */
// Default Semaphore network.
const defaultNetwork = "sepolia";
/**
 * Returns true if a network is supported by Semaphore, false otherwise.
 * @param supportedNetwork The network to be checked.
 */
function isSupportedNetwork(supportedNetwork) {
    return Object.keys(supportedNetworks).includes(supportedNetwork);
}
/**
 * Utility function to get an object compatible with the Hardhat 'networks' option.
 * If the private key is not defined it returns an empty object.
 * @param privateKey Private key to be used with networks.
 * @returns An object compatible with the Hardhat 'networks' option.
 */
function getHardhatNetworks(privateKey) {
    if (!privateKey) {
        return {};
    }
    const supportedNetworksCopy = JSON.parse(JSON.stringify(supportedNetworks));
    for (const key in supportedNetworksCopy) {
        if (Object.prototype.hasOwnProperty.call(supportedNetworksCopy, key)) {
            supportedNetworksCopy[key].accounts = [`0x${privateKey}`];
        }
    }
    return supportedNetworksCopy;
}
/**
 * Returns name, address and start block of a Semaphore contract deployed
 * on a specific supported network.
 * @param supportedNetwork The network supported by Semaphore.
 * @returns An object with name, address and start block of the deployed contract.
 */
function getDeployedContract(supportedNetwork) {
    if (!isSupportedNetwork(supportedNetwork)) {
        throw new Error(`Semaphore has not been deployed on '${supportedNetwork}' yet`);
    }
    const deployedContract = deployedContracts.find(({ network }) => network === supportedNetwork);
    return deployedContract.contracts.find(({ name }) => name === "Semaphore");
}

export { defaultNetwork, deployedContracts, getDeployedContract, getHardhatNetworks, isSupportedNetwork, supportedNetworks };
